[
    {
        "code": "find . -exec printf %s\\0 {} ;",
        "text": "print name of all file and director i find in current director i tree ..",
        "id": 1,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', '.', '-', 'exec', 'print', 'f', '%', 's', '\\\\', '<number>', 'word', 'word', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 5, 5, 5, 0, 0, 6, 16, 17]]",
            "sibling_edges": "[[17, 6, 2, 3, 4, 5, 8, 10, 12, 13, 14, 16], [1, 2, 3, 4, 5, 16, 9, 11, 13, 14, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20], [7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 1]]"
        }
    },
    {
        "code": "find Path ! -name Regex -print",
        "text": "search current director i tree for file who be e name be not file ..",
        "id": 2,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '!', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 9, 12], [1, 2, 3, 4, 5, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec sed Program File \\;",
        "text": "find regex sub ti tut on li regex occur r of a word use s ed file in all file file ..",
        "id": 3,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 's', 'ed', 'program', 'file', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 19, 21, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 20, 22, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -ls",
        "text": "print extend file inform for regular file find under home director i who be e name start with ..",
        "id": 4,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} +",
        "text": "find all file under file and set per miss to number ..",
        "id": 5,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 20]]"
        }
    },
    {
        "code": "ifconfig | sed -n Program",
        "text": "find ip address of all network inter fa c ..",
        "id": 6,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'n', 'program', 'if', 'config', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 5, 5]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 9, 11], [1, 5, 2, 3, 7, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 1, 11, 12, 6, 7], [10, 1, 11, 12, 6, 7, 8]]"
        }
    },
    {
        "code": "rsync -avz --rsh=ssh -p3382 source root@remote_server_name:/opt/backups",
        "text": "archiv regex to file via ssh on port number and compress data du re trans miss ..",
        "id": 7,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'av', 'z', '--', 'r', 'sh', '=', 'ssh', '-', 'p', '<number>', 'source', 'root', '@', 'remote', 'server', 'name', ':', '/', 'opt', '/', 'backup', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29], [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]]"
        }
    },
    {
        "code": "find Path -name Regex -mtime Timespan",
        "text": "find text file mod if i le than time span ago ..",
        "id": 8,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'm', 'time', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -path Regex -prune -or -iname Regex -print",
        "text": "excl ud director i from find command ..",
        "id": 9,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'i', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 14, 16, 18, 19, 22], [1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 17, 19, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find /path/to/dir -type f | sed -r p;s:.*/(.*)/.*:1: | xargs -n 2 sh -c sed -i 's/^/$1 ' $0",
        "text": "search for a file in current folder and append file name at start of all line in file ..",
        "id": 10,
        "graph": {
            "nodes": "['program', ';', '|', 'variable_name', '|', 'word', 'word', 'word', 'word', 'word', 's', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'raw_string', 'word', '/', 'path', '/', 'to', '/', 'dir', '-', 'type', 'f', 'word', '-', 'r', 'p', 'word', '(', ')', '/', '.', '*', ':', '<number>', ':', 'word', '-', 'n', '<number>', 'sh', '-', 'c', 's', 'ed', '-', 'i', \"'s\", '/', '^', '/', '$', '<number>', \"'\", '$', 'special_variable_name', 'find', 's', 'ed', ':', '.', '*', '/', 'x', 'arg', '<number>', 'word', '.', '*']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 6, 6, 7, 0, 8, 8, 9, 0, 0, 0, 11, 11, 11, 11, 11, 11, 0, 12, 12, 13, 14, 15, 15, 16, 16, 17, 17, 18, 18, 18, 18, 18, 18, 18, 0, 0, 19, 29, 29, 33, 33, 33, 33, 42, 42, 61, 0, 72, 72]]",
            "sibling_edges": "[[9, 1, 3, 7, 2, 35, 11, 4, 19, 5, 6, 29, 8, 33, 42, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 30, 34, 72, 36, 37, 38, 39, 40, 43, 47, 49, 51, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 69, 73], [1, 3, 33, 2, 29, 11, 4, 42, 5, 6, 7, 8, 9, 34, 12, 13, 14, 15, 16, 17, 18, 60, 21, 22, 23, 24, 25, 27, 31, 72, 35, 37, 38, 39, 40, 41, 44, 48, 50, 52, 54, 55, 56, 57, 58, 59, 61, 64, 66, 67, 68, 70, 74]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[62, 20, 21, 22, 23, 24, 25, 26, 27, 28, 2, 63, 64, 30, 31, 32, 1, 10, 65, 66, 67, 68, 34, 73, 74, 35, 36, 37, 38, 39, 40, 41, 4, 69, 70, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [20, 21, 22, 23, 24, 25, 26, 27, 28, 2, 63, 64, 30, 31, 32, 1, 10, 65, 66, 67, 68, 34, 73, 74, 35, 36, 37, 38, 39, 40, 41, 4, 69, 70, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 71]]"
        }
    },
    {
        "code": "find . -name *.cpp | while read f; do dirname $f ; done | sort -u",
        "text": "search for al file file in current folder and display distinct p be not director i of t he be e file in sort order ..",
        "id": 11,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'while', ';', 'word', 'word', '.', '-', 'name', '*', '.', 'cpp', 'word', 'do', ';', 'done', 'word', '-', 'u', 'find', 'word', 'f', 'sort', 'read', 'word', '$', 'variable_name', 'dir', 'name', 'f']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 5, 5, 0, 0, 0, 0, 0, 8, 8, 9, 0, 16, 20, 24, 0, 0, 0, 28, 28, 30]]",
            "sibling_edges": "[[5, 1, 19, 2, 9, 3, 4, 6, 16, 7, 20, 11, 13, 14, 24, 17, 30, 18, 21, 28, 29, 31], [1, 6, 2, 20, 3, 4, 5, 24, 7, 17, 8, 12, 14, 15, 16, 28, 18, 19, 22, 29, 30, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 1, 6, 27, 25, 7, 17, 31, 32, 29, 33, 18, 19, 2, 26, 21], [10, 11, 12, 13, 14, 15, 1, 6, 27, 25, 7, 17, 31, 32, 29, 33, 18, 19, 2, 26, 21, 22]]"
        }
    },
    {
        "code": "ifconfig | grep -o -P Regex",
        "text": "get ip address of all act iv network inter fa c ..",
        "id": 12,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'o', '-', 'p', 'regex', 'if', 'config', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 5, 6]]",
            "sibling_edges": "[[5, 1, 6, 2, 3, 7, 9, 12], [1, 6, 2, 3, 4, 8, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 13, 1, 14, 7, 8, 9, 10], [13, 1, 14, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex -type d -exec mv {} File \\; -exec mkdir Directory \\; -exec sh -c mv File File \\;",
        "text": "move each of regex director i in regex to a not h director i who be e name be con ti tut by append file to each director i name and c re at a director i ..",
        "id": 13,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'd', '-', 'exec', 'mv', 'word', 'word', 'file', '\\\\', ';', '-', 'exec', 'mk', 'dir', 'directory', '\\\\', ';', '-', 'exec', 'sh', '-', 'c', 'mv', 'file', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 16, 16, 17, 18, 19, 20, 20, 21, 32, 33]]",
            "sibling_edges": "[[21, 1, 2, 3, 4, 5, 6, 7, 33, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 26, 29, 32, 35, 37, 39, 42, 44, 47, 52], [1, 2, 3, 4, 5, 6, 7, 32, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 27, 30, 33, 36, 38, 40, 43, 45, 48, 53]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[54, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 55, 56, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 55, 56, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]]"
        }
    },
    {
        "code": "grep -v Regex File | wc",
        "text": "count non blank line in all file file in a current folder ..",
        "id": 14,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'v', 'regex', 'file', 'word', 'grep', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 2, 3, 4, 0, 5, 10]]",
            "sibling_edges": "[[4, 1, 5, 2, 3, 6], [1, 10, 2, 3, 4, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9, 1], [6, 7, 8, 9, 1, 12]]"
        }
    },
    {
        "code": "find Path -user Regex",
        "text": "find root 's file in current director i tree ..",
        "id": 15,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "false | tee File",
        "text": "save val u number in regex v aria bl and return number ..",
        "id": 16,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'file', 'false', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 0, 2, 3, 4]]",
            "sibling_edges": "[[3, 1, 4], [1, 4, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 1, 7], [1, 7, 5]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "display all file in home folder which end with file ..",
        "id": 17,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -atime -Timespan -exec ls -l {} \\;",
        "text": "find all regular file in current folder which be access in time span and display a long list of them ..",
        "id": 18,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'a', 'time', '-', 'timespan', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 25, 26]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 26, 12, 15, 16, 18, 20, 23, 25, 27], [1, 2, 3, 4, 5, 6, 7, 8, 25, 9, 13, 16, 17, 19, 21, 24, 26, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 27], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 27, 28]]"
        }
    },
    {
        "code": "dirs=($(find . -type d))",
        "text": "search for all director i in current folder and save output to a v aria bl ..",
        "id": 19,
        "graph": {
            "nodes": "['variable_assignment', 'variable_name', '=', 'dir', '(', ')', '$(', ')', 'word', 'word', 'word', 'word', '.', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 10, 11]]",
            "sibling_edges": "[[1, 2, 4, 7, 6, 10, 11, 8, 9, 13], [2, 4, 6, 5, 11, 7, 8, 9, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 2, 4, 6, 16, 12, 13, 14, 15, 7], [2, 4, 6, 16, 12, 13, 14, 15, 7, 5]]"
        }
    },
    {
        "code": "split --lines Quantity File Regex",
        "text": "split file into file with at most number line and use prefix file ..",
        "id": 20,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '--', 'line', 'quantity', 'file', 'regex', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6], [1, 2, 3, 4, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -name Regex -or -maxdepth Quantity -mmin +Quantity -type f -name Regex -delete",
        "text": "r emo v all file file except file under give director i mod if i more than time span ago ..",
        "id": 21,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'or', '-', 'max', 'depth', 'quantity', '-', 'mm', 'in', '+', 'quantity', '-', 'type', 'f', '-', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14]]",
            "sibling_edges": "[[14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 19, 21, 22, 25, 26, 28, 30, 33, 36], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 20, 22, 23, 26, 27, 29, 31, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find file with ext en file in file director i ..",
        "id": 22,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -mmin -Quantity | xargs -r -I {} ls -l -d {}",
        "text": "list all file from current director i tree that be mod if i le than time span ago omit regex ..",
        "id": 23,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'mm', 'in', '-', 'quantity', 'word', '-', 'r', '-', 'i', 'word', 'word', 'ls', '-', 'l', '-', 'd', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 5, 6, 6, 0, 7, 7, 8, 8, 0, 0, 9, 10, 10, 11, 11, 0, 0, 12, 23, 23, 28, 29, 35, 36]]",
            "sibling_edges": "[[6, 1, 12, 2, 3, 4, 5, 23, 7, 8, 29, 9, 10, 11, 14, 15, 18, 19, 21, 24, 26, 28, 31, 33, 35, 38], [1, 23, 2, 3, 4, 5, 6, 7, 8, 28, 9, 10, 11, 35, 15, 16, 19, 20, 22, 25, 27, 29, 32, 34, 36, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 38, 39, 24, 25, 26, 27, 40, 41, 30, 31, 32, 33, 34, 42], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 38, 39, 24, 25, 26, 27, 40, 41, 30, 31, 32, 33, 34, 42, 43]]"
        }
    },
    {
        "code": "curl --data-urlencode paramName=param www.example.com",
        "text": "download content from web it file use url en cod regex ..",
        "id": 24,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'data', '-', 'url', 'encode', 'param', 'name', '=', 'param', '<', 'url', '>', 'curl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 6, 7, 8, 10, 11, 12, 14, 15], [1, 2, 3, 6, 7, 8, 9, 11, 12, 13, 15, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "cut -d Regex -f Number File",
        "text": "print on li group name from file ..",
        "id": 25,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'file', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 10], [1, 2, 3, 4, 5, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "loc at all file file under current director i tree ..",
        "id": 26,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "rsync -a -v -z File File",
        "text": "archiv file on host regex to local director i file ..",
        "id": 27,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'v', '-', 'z', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 9, 11, 15], [1, 2, 3, 4, 5, 8, 10, 12, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 16, 7, 8, 9, 10, 11, 12, 13], [16, 7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "pstree | grep Regex | less -S -E -X",
        "text": "print process with regex in name cut off line long than screen width exit from le after end of output and save print line on term in after exit ..",
        "id": 28,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 's', '-', 'e', '-', 'x', 'ps', 'tree', 'grep', 'le']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 5, 6, 6, 7, 7, 8, 10]]",
            "sibling_edges": "[[7, 1, 3, 2, 8, 10, 4, 5, 11, 13, 15, 17], [1, 8, 2, 10, 3, 4, 5, 6, 12, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 18, 1, 19, 9, 2, 20, 11, 12, 13, 14, 15], [18, 1, 19, 9, 2, 20, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan -type f",
        "text": "find all file that be mod if i in time span ..",
        "id": 29,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 11, 13], [1, 2, 3, 4, 5, 9, 10, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path Path -name Regex",
        "text": "search director i tree foo and bar for file file ..",
        "id": 30,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 8], [1, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "chmod Permission File File File",
        "text": "add exe cut per miss to regex regex and regex for all user ..",
        "id": 31,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'permission', 'file', 'file', 'file', 'ch', 'mod']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 10], [1, 2, 3, 4, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 6, 7, 8], [11, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex -print0",
        "text": "find all file with ext en file regardless of case ..",
        "id": 32,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', '-', 'print', '<number>', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 13, 16, 17], [1, 2, 3, 4, 5, 6, 10, 13, 14, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file and director i under current director i ..",
        "id": 33,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type l -print | xargs -I {} ls -l -d {} | awk Program",
        "text": "print file to which symbol link in current director i point ..",
        "id": 34,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'l', '-', 'print', 'word', '-', 'i', 'word', 'word', 'ls', '-', 'l', '-', 'd', 'word', 'word', 'word', 'program', 'find', 'x', 'arg', '{', '}', '{', '}', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 0, 7, 7, 0, 0, 8, 9, 9, 10, 10, 0, 0, 0, 11, 12, 19, 19, 22, 23, 29, 30, 31, 31]]",
            "sibling_edges": "[[6, 1, 30, 2, 12, 3, 4, 5, 19, 7, 23, 8, 9, 10, 31, 14, 17, 20, 22, 25, 27, 29, 34, 40], [1, 19, 2, 31, 3, 4, 5, 6, 7, 22, 8, 9, 10, 29, 11, 15, 18, 21, 23, 26, 28, 30, 35, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 15, 16, 17, 18, 1, 34, 35, 20, 21, 36, 37, 24, 25, 26, 27, 28, 38, 39, 2, 40, 41], [13, 14, 15, 16, 17, 18, 1, 34, 35, 20, 21, 36, 37, 24, 25, 26, 27, 28, 38, 39, 2, 40, 41, 32]]"
        }
    },
    {
        "code": "time find . -type f -exec stat {} + > /dev/null",
        "text": "display in an op ti m way file status for all regular file in current director i tree suppress error me sag ..",
        "id": 35,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '>', 'word', 'word', 'find', '.', '-', 'type', 'f', '-', 'exec', 'stat', 'word', 'word', '+', '/', 'dev', '/', 'null', 'time', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6, 0, 0, 7, 9, 9, 9, 9, 10, 19, 20]]",
            "sibling_edges": "[[7, 10, 1, 2, 3, 4, 5, 6, 20, 8, 13, 16, 19, 22, 23, 24], [8, 1, 2, 3, 4, 5, 6, 19, 7, 9, 14, 17, 20, 23, 24, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 27, 28, 21, 8, 22, 23, 24], [11, 12, 13, 14, 15, 16, 17, 18, 27, 28, 21, 8, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path | grep -E -v Regex | sort",
        "text": "print list of file in current director i tree excl ud those who be e path contain regex or regex ..",
        "id": 36,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'path', 'word', '-', 'e', '-', 'v', 'regex', 'word', 'find', 'grep', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 5, 6, 0, 7, 9, 15]]",
            "sibling_edges": "[[3, 1, 6, 2, 7, 9, 4, 5, 10, 12], [1, 9, 2, 15, 3, 4, 5, 6, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 1, 17, 10, 11, 12, 13, 14, 2], [8, 1, 17, 10, 11, 12, 13, 14, 2, 18]]"
        }
    },
    {
        "code": "find Path -type f -exec basename {} \\;",
        "text": "list name of all file under current director i ..",
        "id": 37,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'base', 'name', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 0, 0, 6, 6, 7, 16, 17]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 17, 9, 12, 14, 16, 18], [1, 2, 3, 4, 5, 16, 6, 10, 13, 15, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18], [8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18, 19]]"
        }
    },
    {
        "code": "find Path -regextype posix-egrep -regex Regex -not -path Regex -not -path Regex -print0 | xargs -0 -I {} ls -L -1 -d {}",
        "text": "list all file and director i under current director i match po ix e grep type regex file in name excl ud path file and file ..",
        "id": 38,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'number', 'word', 'word', 'path', '-', 'regex', 'type', 'po', 'ix', '-', 'e', 'grep', '-', 'regex', 'regex', '-', 'not', '-', 'path', 'regex', '-', 'not', '-', 'path', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'ls', '-', 'l', '-', '<number>', '-', 'd', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 12, 13, 13, 13, 0, 14, 14, 15, 15, 0, 0, 16, 17, 17, 18, 18, 19, 19, 0, 0, 20, 46, 46, 51, 52, 60, 61]]",
            "sibling_edges": "[[13, 1, 20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 46, 14, 15, 52, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 30, 33, 35, 38, 40, 43, 44, 47, 49, 51, 54, 56, 58, 60, 63], [1, 46, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 51, 16, 17, 18, 19, 60, 23, 24, 26, 27, 28, 29, 31, 34, 36, 39, 41, 44, 45, 48, 50, 52, 55, 57, 59, 61, 64]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[62, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 1, 63, 64, 47, 48, 49, 50, 65, 66, 53, 54, 55, 56, 57, 58, 59, 67], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 1, 63, 64, 47, 48, 49, 50, 65, 66, 53, 54, 55, 56, 57, 58, 59, 67, 68]]"
        }
    },
    {
        "code": "find Path -mmin -Quantity",
        "text": "find all file in and below home director i that be mod if i in time span ..",
        "id": 39,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'mm', 'in', '-', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find . -name pattern | xargs git diff --",
        "text": "find file in current director i tree that match regex and run regex on them ..",
        "id": 40,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', 'pattern', 'word', 'git', 'diff', '--', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 6, 7, 8, 13, 13]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 6, 10, 18], [1, 13, 2, 3, 4, 5, 6, 7, 11, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 9, 10, 11, 12, 1, 18, 19, 14, 15], [9, 10, 11, 12, 1, 18, 19, 14, 15, 16]]"
        }
    },
    {
        "code": "comm -2 -3 File File | wc -l",
        "text": "count number of uni qu line in sort file file com par to sort file file ..",
        "id": 41,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'number', 'word', 'word', 'word', 'word', '-', '<number>', '-', '<number>', 'file', 'file', 'word', '-', 'l', 'comm', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 0, 6, 6, 7, 14]]",
            "sibling_edges": "[[5, 1, 7, 2, 3, 4, 14, 8, 10, 15], [1, 14, 2, 3, 4, 5, 6, 9, 11, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 1, 18, 15], [8, 9, 10, 11, 12, 13, 1, 18, 15, 16]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -print",
        "text": "find all regular file under file director i tree that start with regex in name ..",
        "id": 42,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file loc at under file and below ..",
        "id": 43,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type d -name Regex",
        "text": "find all director i name build under current director i ..",
        "id": 44,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -delete",
        "text": "de let all text file in current folder ..",
        "id": 45,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -name Regex -not -path Regex",
        "text": "find file name file under file director i tree ig nor regex ..",
        "id": 46,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'not', '-', 'path', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14], [1, 2, 3, 4, 5, 6, 10, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find -L Path -type f -perm -Permission",
        "text": "find regular file in current director i tree that all exe cut bite set ..",
        "id": 47,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'path', '-', 'type', 'f', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 11, 14, 16], [1, 2, 3, 4, 5, 6, 9, 12, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -print0 | tr Regex Regex",
        "text": "find all file and director i under current director i with null char act as delimit and rep lac null char act with ..",
        "id": 48,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'print', '<number>', 'word', 'regex', 'regex', 'find', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 0, 4, 5, 6, 11]]",
            "sibling_edges": "[[3, 1, 6, 2, 11, 4, 8, 9], [1, 11, 2, 3, 4, 5, 9, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 1, 15, 12], [7, 8, 9, 10, 1, 15, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "loc at all regex file under and below file ..",
        "id": 49,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "grep -r Regex File | awk Program | xargs -I {} dirname {}",
        "text": "recur find all file contain text regex and print folder where be place ..",
        "id": 50,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'word', 'program', 'word', '-', 'i', 'word', 'word', 'dir', 'name', 'word', 'word', 'grep', 'a', 'wk', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 0, 6, 0, 7, 7, 0, 0, 8, 8, 0, 0, 9, 14, 14, 16, 16, 19, 20, 23, 24]]",
            "sibling_edges": "[[5, 1, 6, 2, 9, 3, 4, 14, 16, 7, 20, 8, 10, 17, 19, 21, 23, 26, 28], [1, 14, 2, 16, 3, 4, 5, 6, 7, 19, 8, 23, 11, 18, 20, 22, 24, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 1, 26, 27, 15, 2, 28, 29, 17, 18, 30, 31, 21, 22, 32], [10, 11, 12, 13, 1, 26, 27, 15, 2, 28, 29, 17, 18, 30, 31, 21, 22, 32, 33]]"
        }
    },
    {
        "code": "find Path -name Regex -prune -or -type f -print",
        "text": "display all regular file in current folder excl ud file with name mmm ..",
        "id": 51,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'type', 'f', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 14, 16, 18, 21], [1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 17, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "cat File | xargs -n Quantity -I {} echo Regex Regex Regex {}",
        "text": "print regex on each string in file regex ..",
        "id": 52,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'echo', 'regex', 'regex', 'regex', 'word', 'word', 'cat', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 0, 0, 6, 7, 8, 9, 0, 0, 10, 12, 12, 18, 19, 24, 25]]",
            "sibling_edges": "[[2, 1, 10, 12, 3, 4, 5, 19, 6, 7, 8, 9, 13, 16, 18, 24, 27], [1, 12, 2, 3, 4, 5, 18, 6, 7, 8, 9, 24, 14, 17, 19, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 1, 27, 28, 13, 14, 15, 16, 17, 29, 30, 20, 21, 22, 23, 31], [11, 1, 27, 28, 13, 14, 15, 16, 17, 29, 30, 20, 21, 22, 23, 31, 32]]"
        }
    },
    {
        "code": "cp -r -f --remove-destination $( readlink File ) File",
        "text": "cop i file or folder link to by regex to regex ..",
        "id": 53,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'f', '--', 'remove', '-', 'destination', '$(', ')', 'file', 'cp', 'word', 'word', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 0, 0, 4, 5, 0, 0, 18, 19, 19]]",
            "sibling_edges": "[[5, 1, 2, 3, 15, 6, 8, 10, 11, 12, 14, 18, 19, 21], [1, 2, 3, 14, 4, 7, 9, 11, 12, 13, 19, 15, 18, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 6, 7, 8, 9, 10, 11, 12, 13, 14, 21, 22, 20, 15], [6, 7, 8, 9, 10, 11, 12, 13, 14, 21, 22, 20, 15, 16]]"
        }
    },
    {
        "code": "find Path -type d -exec du -s -k {} \\; | sort -n -k Number",
        "text": "show director i size in kb and sort to give large at end ..",
        "id": 54,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'du', '-', 's', '-', 'k', 'word', 'word', '\\\\', ';', 'word', '-', 'n', '-', 'k', 'number', 'find', '{', '}', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 0, 0, 9, 9, 0, 10, 10, 11, 11, 12, 13, 25, 26, 29]]",
            "sibling_edges": "[[9, 1, 13, 2, 3, 4, 5, 6, 7, 8, 26, 29, 10, 11, 15, 18, 21, 23, 25, 27, 30, 32], [1, 29, 2, 3, 4, 5, 6, 7, 8, 25, 9, 10, 11, 12, 16, 19, 22, 24, 26, 28, 31, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 36, 37, 27, 28, 1, 38, 30, 31, 32, 33], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 36, 37, 27, 28, 1, 38, 30, 31, 32, 33, 34]]"
        }
    },
    {
        "code": "find . -exec sh -c echo {} | grep -qi /path/to/something[^/]*$ ; -print",
        "text": "find file and director i under current director i that match regex file in path ..",
        "id": 55,
        "graph": {
            "nodes": "['program', ';', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'exec', 'sh', '-', 'c', 'echo', 'word', 'word', 'word', '-', 'qi', 'word', 'word', 'word', 'word', 'word', '$', '-', 'print', 'find', '{', '}', 'grep', '/', 'path', '/', 'to', '/', 'something', '[', '^', '/', ']', '*']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 9, 9, 10, 18, 19, 20, 23, 23, 23, 23, 23, 23, 24, 25, 25, 26, 27]]",
            "sibling_edges": "[[28, 1, 19, 2, 10, 3, 4, 5, 6, 7, 20, 8, 12, 15, 18, 21, 23, 24, 25, 26, 27, 29, 35, 36, 37, 38, 39, 42], [1, 9, 2, 20, 3, 4, 5, 6, 7, 18, 8, 23, 13, 16, 19, 22, 24, 25, 26, 27, 28, 30, 36, 37, 38, 39, 40, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 11, 12, 13, 14, 15, 16, 17, 32, 33, 2, 34, 21, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 28, 1, 29], [11, 12, 13, 14, 15, 16, 17, 32, 33, 2, 34, 21, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 28, 1, 29, 30]]"
        }
    },
    {
        "code": "find Path -type f -perm +Permission | wc -l",
        "text": "display count of regular file under file director i tree which exe cut per miss to all user ..",
        "id": 56,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', '+', 'permission', 'word', '-', 'l', 'find', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 0, 7, 7, 8, 17]]",
            "sibling_edges": "[[6, 1, 8, 2, 3, 4, 5, 17, 10, 13, 15, 18], [1, 17, 2, 3, 4, 5, 6, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 1, 21, 18], [9, 10, 11, 12, 13, 14, 15, 16, 1, 21, 18, 19]]"
        }
    },
    {
        "code": "find Path -regex Regex",
        "text": "find all file file in current folder use regular express ..",
        "id": 57,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f | awk -F Regex Program | sort -f | uniq -i -d",
        "text": "print a list of all dup li c case in sen it file n be in current director i tree ..",
        "id": 58,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'f', 'regex', 'program', 'word', '-', 'f', 'word', '-', 'i', '-', 'd', 'find', 'a', 'wk', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 0, 7, 7, 8, 9, 0, 10, 10, 0, 11, 11, 12, 12, 13, 18, 18, 23, 26, 26]]",
            "sibling_edges": "[[6, 1, 9, 2, 10, 3, 13, 4, 5, 18, 7, 8, 23, 26, 11, 15, 19, 24, 27, 29, 32, 35], [1, 18, 2, 23, 3, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 20, 25, 28, 30, 33, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 14, 15, 16, 17, 1, 32, 33, 19, 20, 21, 22, 2, 34, 24, 25, 3, 35, 36, 27, 28, 29], [14, 15, 16, 17, 1, 32, 33, 19, 20, 21, 22, 2, 34, 24, 25, 3, 35, 36, 27, 28, 29, 30]]"
        }
    },
    {
        "code": "find Path -type f -not -path Regex -exec cp {} File \\;",
        "text": "cop i all file in current director i that not match file in path to file ..",
        "id": 59,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'not', '-', 'path', 'regex', '-', 'exec', 'cp', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 0, 0, 9, 10, 10, 11, 24, 25]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 25, 9, 13, 16, 18, 21, 24, 27], [1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 10, 14, 17, 19, 22, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 26, 27], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 26, 27, 28]]"
        }
    },
    {
        "code": "chown -R Regex File",
        "text": "recur c hang owner and group of all file in regex to regex ..",
        "id": 60,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "cat File | xargs -I {} ln -s {} Regex",
        "text": "c re at a symbol link in director i file for each file list in file ..",
        "id": 61,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'i', 'word', 'word', 'ln', '-', 's', 'word', 'word', 'regex', 'cat', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 5, 5, 0, 0, 6, 7, 9, 9, 12, 13, 17, 18]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 13, 4, 5, 18, 10, 12, 15, 17, 21], [1, 9, 2, 3, 12, 4, 5, 17, 6, 11, 13, 16, 18, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 1, 21, 22, 10, 11, 23, 24, 14, 15, 16, 25, 26], [8, 1, 21, 22, 10, 11, 23, 24, 14, 15, 16, 25, 26, 19]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file and director i under current director i ..",
        "id": 62,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "ps -e -f | grep Regex | grep -v Regex | awk Program | xargs -I {} kill - Regex {}",
        "text": "i mm ed i term in all process who be e command or argument match regex ..",
        "id": 63,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'e', '-', 'f', 'word', 'regex', 'word', '-', 'v', 'regex', 'word', 'program', 'word', '-', 'i', 'word', 'word', 'kill', '-', 'regex', 'word', 'word', 'ps', 'grep', 'grep', 'a', 'wk', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 6, 0, 7, 0, 8, 8, 9, 0, 10, 0, 11, 11, 0, 0, 12, 13, 14, 0, 0, 15, 20, 22, 26, 26, 28, 28, 31, 32, 36, 37]]",
            "sibling_edges": "[[6, 1, 7, 2, 9, 3, 10, 4, 15, 5, 20, 22, 8, 26, 28, 11, 32, 12, 13, 14, 16, 18, 23, 29, 31, 36, 41, 43], [1, 20, 2, 22, 3, 26, 4, 28, 5, 6, 7, 8, 9, 10, 11, 31, 12, 13, 14, 36, 17, 19, 24, 30, 32, 37, 42, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 16, 17, 18, 19, 1, 39, 21, 2, 40, 23, 24, 25, 3, 41, 42, 27, 4, 43, 44, 29, 30, 45, 46, 33, 34, 35, 47], [16, 17, 18, 19, 1, 39, 21, 2, 40, 23, 24, 25, 3, 41, 42, 27, 4, 43, 44, 29, 30, 45, 46, 33, 34, 35, 47, 48]]"
        }
    },
    {
        "code": "find Path -name Regex | wc -l",
        "text": "count number of file file in current director i tree ..",
        "id": 64,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'l', 'find', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 11]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 11, 8, 12], [1, 11, 2, 3, 4, 5, 9, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 1, 15, 12], [7, 8, 9, 10, 1, 15, 12, 13]]"
        }
    },
    {
        "code": "find Path Path",
        "text": "find all file in current folder which exe cut per miss ..",
        "id": 65,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'path', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec cat {} \\; | sed Program | wc -l",
        "text": "recur count non blank non com line in all file file in a current folder ..",
        "id": 66,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'cat', 'word', 'word', '\\\\', ';', 'word', 'program', 'word', '-', 'l', 'find', '{', '}', 's', 'ed', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 0, 0, 10, 10, 0, 11, 0, 12, 12, 13, 24, 25, 28, 28, 30]]",
            "sibling_edges": "[[10, 1, 11, 2, 13, 3, 4, 5, 6, 7, 8, 9, 25, 28, 30, 15, 18, 21, 24, 26, 31, 36], [1, 28, 2, 30, 3, 4, 5, 6, 7, 8, 9, 24, 10, 11, 12, 16, 19, 22, 25, 27, 32, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 26, 27, 1, 36, 37, 29, 2, 38, 31], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 26, 27, 1, 36, 37, 29, 2, 38, 31, 32]]"
        }
    },
    {
        "code": "find Path -iname Regex -atime +Timespan",
        "text": "loc at all file file that re id in home director i and not be access in past time span ..",
        "id": 67,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'a', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12, 13, 15], [1, 2, 3, 4, 5, 9, 10, 13, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 7, 8, 9, 10, 11, 12, 13, 14, 15], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "mv File",
        "text": "expand bash array regex as argument to regex ..",
        "id": 68,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'mv']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "od -t fD File",
        "text": "display a dump of regex as float point val u of do u bl size ..",
        "id": 69,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 't', 'fd', 'file', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "grep -m Quantity -a -o Regex File | sed Program | head -n Quantity",
        "text": "print a random number between number and number ..",
        "id": 70,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'm', 'quantity', '-', 'a', '-', 'o', 'regex', 'file', 'word', 'program', 'word', '-', 'n', 'quantity', 'grep', 's', 'ed', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 5, 6, 6, 7, 8, 0, 9, 0, 10, 10, 11, 12, 22, 22, 24]]",
            "sibling_edges": "[[8, 1, 9, 2, 12, 3, 4, 5, 6, 7, 22, 24, 10, 13, 16, 18, 25, 29], [1, 22, 2, 24, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 19, 26, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 29, 30, 23, 2, 31, 25, 26], [13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 29, 30, 23, 2, 31, 25, 26, 27]]"
        }
    },
    {
        "code": "find Path -type f -follow | xargs -I {} ls -a -l {} | awk Program | sort -u",
        "text": "find uni qu owner of all file in file director i ..",
        "id": 71,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'follow', 'word', '-', 'i', 'word', 'word', 'ls', '-', 'a', '-', 'l', 'word', 'word', 'word', 'program', 'word', '-', 'u', 'find', 'x', 'arg', '{', '}', '{', '}', 'a', 'wk', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 0, 8, 8, 0, 0, 9, 10, 10, 11, 11, 0, 0, 0, 12, 0, 13, 13, 14, 21, 21, 24, 25, 31, 32, 33, 33, 35]]",
            "sibling_edges": "[[7, 1, 32, 2, 12, 3, 14, 4, 5, 6, 21, 8, 25, 9, 10, 11, 33, 35, 16, 19, 22, 24, 27, 29, 31, 36, 39, 45], [1, 21, 2, 33, 3, 35, 4, 5, 6, 7, 8, 24, 9, 10, 11, 31, 12, 13, 17, 20, 23, 25, 28, 30, 32, 37, 40, 46]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 15, 16, 17, 18, 19, 20, 1, 39, 40, 22, 23, 41, 42, 26, 27, 28, 29, 30, 43, 44, 2, 45, 46, 34, 3, 47, 36], [15, 16, 17, 18, 19, 20, 1, 39, 40, 22, 23, 41, 42, 26, 27, 28, 29, 30, 43, 44, 2, 45, 46, 34, 3, 47, 36, 37]]"
        }
    },
    {
        "code": "find Path -name Regex -not \\( -path Regex -or -path Regex \\)",
        "text": "find regex file regex regex file regex regex file ..",
        "id": 72,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'not', '\\\\', '(', '-', 'path', 'regex', '-', 'or', '-', 'path', 'regex', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 19, 21, 24, 26, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 18, 20, 22, 25, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]]"
        }
    },
    {
        "code": "find <path> -name .* -prune -o -type d -print",
        "text": "find all director i under regex excl ud hide director i and sub director i ..",
        "id": 73,
        "graph": {
            "nodes": "['redirected_statement', '<', 'word', '>', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', '.', '*', '-', 'prune', '-', 'o', '-', 'type', 'd', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 2, 1, 3, 4, 5, 6, 7, 8, 9, 13, 15, 17, 19, 21, 24], [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 14, 16, 18, 20, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 1, 12, 3, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [1, 12, 3, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -name Regex -mtime +Timespan -exec rm {} \\;",
        "text": "r emo v all file file in regex director i tree that be last mod if i more than time span ago ..",
        "id": 74,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'm', 'time', '+', 'timespan', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 0, 0, 8, 8, 9, 22, 23]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 23, 11, 14, 15, 17, 19, 22, 24], [1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 15, 16, 18, 20, 23, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24, 25]]"
        }
    },
    {
        "code": "$( md5sum File | cut -f Number -d Regex )",
        "text": "cal cu l regex sum of file regex and save it to v aria bl regex ..",
        "id": 75,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'f', 'number', '-', 'd', 'regex', 'md', '<number>', 'sum', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 5, 6, 7, 7, 8, 9, 9, 9, 11]]",
            "sibling_edges": "[[1, 8, 4, 3, 9, 11, 5, 6, 7, 12, 15, 18, 19], [9, 2, 3, 11, 4, 5, 6, 7, 8, 13, 16, 19, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 18, 19, 20, 10, 3, 21, 12, 13, 14, 15, 16, 17], [18, 19, 20, 10, 3, 21, 12, 13, 14, 15, 16, 17, 2]]"
        }
    },
    {
        "code": "find Path -path Regex -prune -or -name Regex -type f -print",
        "text": "search file director i recur for regular file name regex ig nor directory ..",
        "id": 76,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'name', 'regex', '-', 'type', 'f', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 18, 20, 23, 26], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 19, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "SCRIPT=$( readlink -m $( type -p $0 ))",
        "text": "save ab sol ut path of script file n be in v aria bl regex ..",
        "id": 77,
        "graph": {
            "nodes": "['variable_assignment', 'variable_name', '=', 'script', '$(', ')', 'word', 'word', '-', 'm', '$(', ')', 'read', 'link', 'word', 'word', '-', 'p', '$', 'special_variable_name', 'type', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 1, 0, 0, 0, 0, 6, 6, 0, 0, 7, 7, 0, 0, 14, 14, 0, 0, 15, 19]]",
            "sibling_edges": "[[1, 2, 4, 11, 7, 6, 8, 10, 19, 12, 15, 14, 16, 18], [2, 4, 7, 5, 6, 10, 9, 15, 11, 13, 14, 18, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 2, 4, 12, 13, 8, 9, 10, 20, 16, 17, 18, 21, 11], [2, 4, 12, 13, 8, 9, 10, 20, 16, 17, 18, 21, 11, 5]]"
        }
    },
    {
        "code": "gzip -d -c Regex | grep -P Regex | grep -v -P Regex | split -d -l Quantity File Regex",
        "text": "decompress file to standard output and save all line match regex and not match regex to file with a number line limit ..",
        "id": 78,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', '-', 'c', 'regex', 'word', '-', 'p', 'regex', 'word', '-', 'v', '-', 'p', 'regex', 'word', '-', 'd', '-', 'l', 'quantity', 'file', 'regex', 'g', 'zip', 'grep', 'grep', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 5, 6, 0, 7, 7, 8, 0, 9, 9, 10, 10, 11, 0, 12, 12, 13, 13, 14, 15, 16, 17, 17, 23, 27, 33]]",
            "sibling_edges": "[[6, 1, 8, 2, 11, 3, 17, 4, 5, 23, 7, 27, 9, 10, 33, 12, 13, 14, 15, 18, 20, 24, 28, 30, 34, 36, 41], [1, 23, 2, 27, 3, 33, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 25, 29, 31, 35, 37, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 42, 18, 19, 20, 21, 22, 1, 43, 24, 25, 26, 2, 44, 28, 29, 30, 31, 32, 3, 45, 34, 35, 36, 37, 38, 39], [42, 18, 19, 20, 21, 22, 1, 43, 24, 25, 26, 2, 44, 28, 29, 30, 31, 32, 3, 45, 34, 35, 36, 37, 38, 39, 40]]"
        }
    },
    {
        "code": "find Path -perm -Permission",
        "text": "find all file that add it per miss ..",
        "id": 79,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 8], [1, 2, 3, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path",
        "text": "list all file incl ud every th in sub director i ..",
        "id": 80,
        "graph": {
            "nodes": "['command', 'word', 'word', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -nouser -print",
        "text": "find file own by non exist user ..",
        "id": 81,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'no', 'user', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "ping -c Quantity Regex | grep Regex",
        "text": "send one ping request to host with local address in file ring with last number specif i by v aria bl regex and output on li line contain regex to standard output ..",
        "id": 82,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'c', 'quantity', 'regex', 'word', 'regex', 'ping', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 0, 5, 6, 11]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 11, 7], [1, 11, 2, 3, 4, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 7, 8, 9, 10, 1, 14], [7, 8, 9, 10, 1, 14, 12]]"
        }
    },
    {
        "code": "find Path -type f -size Size -print | xargs -I {} rm {}",
        "text": "r emo v all e mp ti regular file under current director i and below ..",
        "id": 83,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'size', 'size', '-', 'print', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 0, 8, 8, 0, 0, 9, 0, 0, 10, 20, 20, 23, 24, 26, 27]]",
            "sibling_edges": "[[7, 1, 10, 2, 3, 4, 5, 6, 20, 8, 24, 9, 12, 15, 18, 21, 23, 26, 29], [1, 20, 2, 3, 4, 5, 6, 7, 8, 23, 9, 26, 13, 16, 19, 22, 24, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 29, 30, 21, 22, 31, 32, 25, 33], [11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 29, 30, 21, 22, 31, 32, 25, 33, 34]]"
        }
    },
    {
        "code": "whoami",
        "text": "save user name of current user to v aria bl regex ..",
        "id": 84,
        "graph": {
            "nodes": "['word', 'whoa', 'mi']",
            "base_edges": "[[1, 2], [0, 0]]",
            "sibling_edges": "[[1], [2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1], [2]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} grep -i Regex {}",
        "text": "search file file from directory director i tree for to do line ..",
        "id": 85,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', '-', 'i', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 10, 0, 0, 11, 19, 19, 24, 25, 30, 31]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 19, 6, 7, 25, 8, 9, 10, 13, 16, 17, 20, 22, 24, 27, 30, 33], [1, 19, 2, 3, 4, 5, 6, 7, 24, 8, 9, 10, 30, 14, 17, 18, 21, 23, 25, 28, 31, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 1, 33, 34, 20, 21, 22, 23, 35, 36, 26, 27, 28, 29, 37], [12, 13, 14, 15, 16, 17, 18, 1, 33, 34, 20, 21, 22, 23, 35, 36, 26, 27, 28, 29, 37, 38]]"
        }
    },
    {
        "code": "who | awk Program | sort | head - Quantity",
        "text": "print login time and user of first person who file in ..",
        "id": 86,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'program', 'word', 'word', '-', 'quantity', 'who', 'a', 'wk', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 6, 7, 8, 8, 10, 11]]",
            "sibling_edges": "[[7, 1, 4, 2, 10, 3, 8, 11, 5, 15], [1, 8, 2, 10, 3, 11, 4, 5, 6, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 1, 15, 16, 9, 2, 17, 3, 18, 12], [1, 15, 16, 9, 2, 17, 3, 18, 12, 13]]"
        }
    },
    {
        "code": "ping -a Regex",
        "text": "send an a udi bl ping to file ..",
        "id": 87,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'a', 'regex', 'ping']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "sort -n -r -k File",
        "text": "num er sort standard input by second word of each line and output from great val u to least val u ..",
        "id": 88,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'n', '-', 'r', '-', 'k', 'file', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 10], [1, 2, 3, 4, 7, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rename Regex {} \\;",
        "text": "rep lac regex with regex for all file in current folder ..",
        "id": 89,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rename', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 0, 0, 7, 7, 8, 17, 18]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 18, 10, 13, 17, 19], [1, 2, 3, 4, 5, 6, 17, 7, 11, 14, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19], [9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19, 20]]"
        }
    },
    {
        "code": "find Path -nouser -ok rm {} \\;",
        "text": "r emo v file from file system that be own by no bod i ask user be for each r emo v ..",
        "id": 90,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'no', 'user', '-', 'ok', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 0, 0, 5, 5, 6, 14, 15]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 15, 8, 9, 11, 14, 16], [1, 2, 3, 4, 14, 5, 9, 10, 12, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 10, 11, 12, 13, 19, 20, 16], [7, 8, 9, 10, 11, 12, 13, 19, 20, 16, 17]]"
        }
    },
    {
        "code": "which Regex",
        "text": "run file with a new environ v aria bl file set to full path of command regex ..",
        "id": 91,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "dig Regex Regex com.",
        "text": "request ns record for file domain rec e iv on li author it answer ..",
        "id": 92,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'regex', 'regex', 'com', '.', 'dig']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 7], [1, 2, 3, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i regex ..",
        "id": 93,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "mv $( ls File ) File",
        "text": "move all file and director i match file in current director i to regex ..",
        "id": 94,
        "graph": {
            "nodes": "['command', 'word', 'word', '$(', ')', 'file', 'mv', 'word', 'word', 'file', 'ls']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 0, 0, 7, 8]]",
            "sibling_edges": "[[2, 4, 3, 7, 8], [3, 1, 8, 4, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 10, 9, 4], [3, 10, 9, 4, 5]]"
        }
    },
    {
        "code": "cat File | rev | cut -d Regex -f -Number | rev",
        "text": "r emo v all but number last comma se par field from each line in file ..",
        "id": 95,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', 'word', '-', 'd', 'regex', '-', 'f', '-', 'number', 'word', 'cat', 'rev', 'cut', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 5, 6, 7, 7, 8, 8, 0, 9, 11, 12, 20]]",
            "sibling_edges": "[[4, 1, 11, 2, 8, 3, 9, 12, 5, 6, 7, 13, 16, 18], [1, 11, 2, 12, 3, 20, 4, 5, 6, 7, 8, 14, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 1, 22, 2, 23, 13, 14, 15, 16, 17, 18, 19, 3], [10, 1, 22, 2, 23, 13, 14, 15, 16, 17, 18, 19, 3, 24]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -n -f File {} \\;",
        "text": "find all file file under current director i and search for regular express take from file file ..",
        "id": 96,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'n', '-', 'f', 'file', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 20, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 21, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "echo Regex | tr -c -d Regex",
        "text": "print on li digit in v aria bl regex ..",
        "id": 97,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'c', '-', 'd', 'regex', 'echo', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 5, 6, 8]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 4, 9, 11], [1, 8, 2, 3, 4, 5, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 1, 15, 9, 10, 11, 12], [7, 1, 15, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} grep Regex {}",
        "text": "search all file file in current director i tree for regex ..",
        "id": 98,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 0, 0, 8, 13, 13, 16, 17, 20, 21]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 17, 6, 7, 10, 14, 16, 20, 23], [1, 13, 2, 3, 4, 5, 16, 6, 7, 20, 11, 15, 17, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 19, 27], [9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 19, 27, 28]]"
        }
    },
    {
        "code": "tail -F File | tee -a File",
        "text": "write line append to regex as it appear to con sol and append to regex in background ..",
        "id": 99,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'f', 'file', 'word', '-', 'a', 'file', 'tail', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 4, 4, 5, 6, 10]]",
            "sibling_edges": "[[3, 1, 6, 2, 10, 4, 7, 11], [1, 10, 2, 3, 4, 5, 8, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 1, 15, 11, 12], [7, 8, 9, 1, 15, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex | grep -v Regex",
        "text": "find all file file in regex director i tree who be e path n be not contain white spa c ..",
        "id": 100,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'v', 'regex', 'find', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 7, 12]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 9, 13], [1, 12, 2, 3, 4, 5, 6, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 9, 10, 11, 1, 17, 13, 14], [8, 9, 10, 11, 1, 17, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "find all permission file who be e per miss be number ..",
        "id": 101,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -exec du -k {} \\; | awk Program",
        "text": "cal cu l total size of all file file in director i tree ..",
        "id": 102,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'du', '-', 'k', 'word', 'word', '\\\\', ';', 'word', 'program', 'find', '{', '}', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 0, 0, 8, 8, 0, 9, 10, 20, 21, 24, 24]]",
            "sibling_edges": "[[8, 1, 10, 2, 3, 4, 5, 6, 7, 21, 24, 12, 15, 18, 20, 22, 29], [1, 24, 2, 3, 4, 5, 6, 7, 20, 8, 9, 13, 16, 19, 21, 23, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 22, 23, 1, 29, 30], [11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 22, 23, 1, 29, 30, 25]]"
        }
    },
    {
        "code": "find Path -user Regex -print",
        "text": "search system for file and director i own by user regex ..",
        "id": 103,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -type f \\( -name Regex -or -name Regex \\) -print0 | xargs -0 -I {} ls -t {} | tail - Quantity | xargs -I {} rm {}",
        "text": "find all regular file with file and file ext en and de let old file under file director i tree ..",
        "id": 104,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'ls', '-', 't', 'word', 'word', 'word', '-', 'quantity', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', 'tail', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 14, 0, 15, 15, 16, 16, 0, 0, 17, 18, 18, 0, 0, 0, 19, 20, 0, 21, 21, 0, 0, 22, 0, 0, 23, 43, 43, 48, 49, 53, 54, 55, 58, 58, 61, 62, 64, 65]]",
            "sibling_edges": "[[14, 1, 54, 2, 20, 3, 23, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 43, 15, 16, 49, 17, 18, 55, 19, 58, 21, 62, 22, 25, 28, 30, 33, 35, 38, 40, 41, 44, 46, 48, 51, 53, 59, 61, 64, 67, 74], [1, 43, 2, 55, 3, 58, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 48, 17, 18, 53, 19, 20, 21, 61, 22, 64, 26, 29, 31, 34, 36, 39, 41, 42, 45, 47, 49, 52, 54, 60, 62, 65, 68, 75]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[66, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 1, 67, 68, 44, 45, 46, 47, 69, 70, 50, 51, 52, 71, 72, 2, 73, 56, 57, 3, 74, 75, 59, 60, 76, 77, 63, 78], [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 1, 67, 68, 44, 45, 46, 47, 69, 70, 50, 51, 52, 71, 72, 2, 73, 56, 57, 3, 74, 75, 59, 60, 76, 77, 63, 78, 79]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan",
        "text": "find all file in current folder that not be mod if i in time span ..",
        "id": 105,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -type d -perm Permission -print -exec chmod Permission {} \\;",
        "text": "find all director i with per miss number under and below file and c hang per miss to number ..",
        "id": 106,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'perm', 'permission', '-', 'print', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 0, 0, 10, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 13, 16, 19, 21, 23, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 14, 17, 20, 22, 24, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28, 29]]"
        }
    },
    {
        "code": "sort File -o File",
        "text": "sort file regex by line ..",
        "id": 107,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'file', '-', 'o', 'file', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "brew reinstall git",
        "text": "un inst al and inst al git formula ..",
        "id": 108,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'reinstall', 'git', 'brew']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "tail - Quantity File | tee -a File",
        "text": "print last line of regex to con sol and append to regex ..",
        "id": 109,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'quantity', 'file', 'word', '-', 'a', 'file', 'tail', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 5, 5, 6, 7, 11]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 11, 5, 12], [1, 11, 2, 3, 4, 5, 6, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 8, 9, 10, 1, 16, 12, 13], [8, 9, 10, 1, 16, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -newermt Regex",
        "text": "display all file in current folder which be mod if i in one hour ago ..",
        "id": 110,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'mt', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find <directory> -type f -size -1M -print0 | xargs -0 rm",
        "text": "r emo v file that be le than size in size under regex ..",
        "id": 111,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'word', '<', 'word', '>', 'word', 'word', 'word', 'word', 'word', 'word', '-', '<number>', 'rm', 'word', 'directory', '-', 'type', 'f', '-', 'size', '-', '<number>', 'm', '-', 'print', '<number>', 'x', 'arg', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 5, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 16]]",
            "sibling_edges": "[[11, 1, 16, 5, 12, 2, 4, 6, 7, 8, 9, 10, 13, 18, 21, 23, 24, 26, 27, 29], [1, 12, 4, 6, 2, 3, 5, 7, 8, 9, 10, 11, 14, 19, 22, 24, 25, 27, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 4, 17, 6, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 29, 30, 13, 14], [4, 17, 6, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 29, 30, 13, 14, 15]]"
        }
    },
    {
        "code": "shift",
        "text": "shift posit para meet to leave by number ..",
        "id": 112,
        "graph": {
            "nodes": "['program', 'pipeline', 'redirected_statement', '|', 'command', 'command', 'file_redirect', 'file_redirect', 'command_name', 'number', 'word', 'command_name', '<', 'word', '>', 'word', 'word', 'word', 'word', 'word', 'word', '-', '<number>', 'rm', 'word', 'directory', '-', 'type', 'f', '-', 'size', '-']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 5, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 16]]",
            "sibling_edges": "[[11, 1, 16, 5, 12, 2, 4, 6, 7, 8, 9, 10, 13, 18, 21, 23, 24, 26, 27, 29], [1, 12, 4, 6, 2, 3, 5, 7, 8, 9, 10, 11, 14, 19, 22, 24, 25, 27, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 4, 17, 6, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 29, 30, 13, 14], [4, 17, 6, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 29, 30, 13, 14, 15]]"
        }
    },
    {
        "code": "ln -f File Regex",
        "text": "f orc c re at a hard link in file to regex ..",
        "id": 113,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'f', 'file', 'regex', 'ln']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "seq -f '%02g' Number",
        "text": "print number from number to number with number pad to a width of number ..",
        "id": 114,
        "graph": {
            "nodes": "['command', 'word', 'raw_string', 'word', 'word', '-', 'f', \"'\", '%', '<number>', 'g', \"'\", 'number', 'seq']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 8, 9, 10], [1, 2, 3, 6, 8, 9, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 5, 6, 7, 8, 9, 10, 11], [5, 6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -name Regex -type f | sort | xargs -I {} wc -l {}",
        "text": "count line in each file file sort by file path ..",
        "id": 115,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', 'word', 'word', '-', 'i', 'word', 'word', 'wc', '-', 'l', 'word', 'word', 'find', 'sort', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 0, 0, 9, 10, 10, 0, 0, 11, 19, 20, 20, 23, 24, 28, 29]]",
            "sibling_edges": "[[7, 1, 19, 2, 11, 3, 4, 5, 6, 20, 8, 24, 9, 10, 13, 16, 21, 23, 26, 28, 32], [1, 19, 2, 20, 3, 4, 5, 6, 7, 8, 23, 9, 10, 28, 14, 17, 22, 24, 27, 29, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 1, 31, 2, 32, 33, 21, 22, 34, 35, 25, 26, 27, 36], [12, 13, 14, 15, 16, 17, 18, 1, 31, 2, 32, 33, 21, 22, 34, 35, 25, 26, 27, 36, 37]]"
        }
    },
    {
        "code": "mv $( grep -l Regex | awk -F Regex Program ) File",
        "text": "move all file that contain regex to regex ..",
        "id": 116,
        "graph": {
            "nodes": "['command', 'word', 'word', '$(', ')', 'file', 'mv', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'regex', 'word', '-', 'f', 'regex', 'program', 'grep', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 8, 8, 9, 0, 10, 10, 11, 12, 13, 17, 17]]",
            "sibling_edges": "[[2, 4, 3, 12, 9, 7, 13, 8, 17, 10, 11, 14, 18, 23], [3, 1, 13, 4, 7, 17, 8, 9, 10, 11, 12, 15, 19, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 22, 14, 15, 16, 7, 23, 24, 18, 19, 20, 21, 4], [3, 22, 14, 15, 16, 7, 23, 24, 18, 19, 20, 21, 4, 5]]"
        }
    },
    {
        "code": "find Path Path Path -print | grep -F -f File",
        "text": "find all regular file in current folder which be present in pattern file file ..",
        "id": 117,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', 'path', '-', 'print', 'word', '-', 'f', '-', 'f', 'file', 'find', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 5, 0, 6, 6, 7, 7, 8, 9, 15]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 15, 6, 7, 13, 16, 18], [1, 15, 2, 3, 4, 5, 6, 7, 8, 14, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 13, 14, 1, 22, 16, 17, 18, 19], [10, 11, 12, 13, 14, 1, 22, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "read -n Quantity",
        "text": "read one char act from standard input into v aria bl regex ..",
        "id": 118,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'n', 'quantity', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "chmod +Permission File",
        "text": "make regex exe cut ..",
        "id": 119,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '+', 'permission', 'file', 'ch', 'mod']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -I {} grep Regex {}",
        "text": "search all file file re id in current director i tree and mod if i at least time span ago for string regex ..",
        "id": 120,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'm', 'time', '+', 'timespan', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 11, 0, 0, 12, 25, 25, 30, 31, 34, 35]]",
            "sibling_edges": "[[7, 1, 12, 2, 3, 4, 5, 6, 25, 8, 9, 31, 10, 11, 14, 17, 18, 20, 22, 23, 26, 28, 30, 34, 37], [1, 25, 2, 3, 4, 5, 6, 7, 8, 9, 30, 10, 11, 34, 15, 18, 19, 21, 23, 24, 27, 29, 31, 35, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 37, 38, 26, 27, 28, 29, 39, 40, 32, 33, 41], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 37, 38, 26, 27, 28, 29, 39, 40, 32, 33, 41, 42]]"
        }
    },
    {
        "code": "find Path -user Regex -mtime Timespan -iname Regex",
        "text": "find all file with file ext en that belong to user regex and be mod if i exact time span ago under file director i tree ..",
        "id": 121,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'm', 'time', 'timespan', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 13, 14, 17, 18], [1, 2, 3, 4, 5, 6, 7, 11, 14, 15, 18, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "awk Program <( rev File )",
        "text": "for each line in regex print regex follow by line backward ..",
        "id": 122,
        "graph": {
            "nodes": "['command', 'word', 'word', 'program', '<(', ')', 'a', 'wk', 'word', 'word', 'file', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 1, 0, 0, 2, 2, 0, 0, 8, 9]]",
            "sibling_edges": "[[2, 1, 4, 8, 6, 9], [1, 4, 9, 5, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 3, 4, 11, 10], [7, 3, 4, 11, 10, 5]]"
        }
    },
    {
        "code": "find Path -size +Size",
        "text": "find all file in current director i tree who be e size be great than size ..",
        "id": 123,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 8], [1, 2, 3, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -size Size -printf '%M %n %u %g %s %Tb\\n \\b%Td %Tk:%TM %p\\n'",
        "text": "display all detail of e mp ti file in current folder ..",
        "id": 124,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'size', 'size', '-', 'print', 'f', \"'\", '%', 'm', '%', 'n', '%', 'u', '%', 'g', '%', 's', '%', 'tb', '\\\\', 'b', '%', 'td', '%', 'tk', ':', '%', 'tm', '%', 'p', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [1, 2, 3, 4, 5, 9, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]]"
        }
    },
    {
        "code": "rsync -avzn --list-only --include company1/ --include company1/unique_folder1/*** --exclude * -e ssh user@server.com:/path/to/old/data/ /path/to/new/data",
        "text": "cop i specif sub director i directory and file from directory to file via ssh ..",
        "id": 125,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'av', 'zn', '--', 'list', '-', 'only', '--', 'include', 'company', '<number>', '/', '--', 'include', 'company', '<number>', '/', 'unique', 'folder', '<number>', '/', '*', '*', '*', '--', 'exclude', '*', '-', 'e', 'ssh', 'user', '@', 'server', '.', 'com', ':', '/', 'path', '/', 'to', '/', 'old', '/', 'data', '/', '/', 'path', '/', 'to', '/', 'new', '/', 'data', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 8, 9, 9, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 21, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[67, 68, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [68, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]]"
        }
    },
    {
        "code": "ssh -p Regex Regex",
        "text": "ssh into local host on port number ..",
        "id": 126,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'p', 'regex', 'regex', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "xhost +si:localuser:`whoami`",
        "text": "append current user to server access control list for x ..",
        "id": 127,
        "graph": {
            "nodes": "['command', 'word', 'word', 'x', 'host', '+', 'si', ':', 'local', 'user', ':', '`', '`', 'word', 'whoa', 'mi']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 13, 13]]",
            "sibling_edges": "[[1, 2, 3, 5, 6, 7, 8, 9, 11, 13, 14], [2, 11, 4, 6, 7, 8, 9, 10, 13, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15], [4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 12]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -n Regex {} \\;",
        "text": "search for regex in all regex file under current director i and show match line with line number ..",
        "id": 128,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'n', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 20, 21]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 21, 11, 14, 17, 20, 22], [1, 2, 3, 4, 5, 6, 7, 20, 8, 12, 15, 18, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22, 23]]"
        }
    },
    {
        "code": "paste <(mount | awk tolower($0) ~ /\\/dev\\/sd*/ {print NR '\\t' $1 '\\t' $3}) <(/usr/sbin/smartctl -a /dev/sdb | awk /Device:/ {print $2})",
        "text": "print list of disk and mount point of disk match file ..",
        "id": 129,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'raw_string', 'raw_string', 'word', '<(', ')', '~', '/', '\\\\', '/', 'dev', '\\\\', '/', 'sd', '*', '/', 'word', 'word', 'nr', \"'\", '\\\\', 't', \"'\", '$', 'variable_name', \"'\", '\\\\', 't', \"'\", 'word', ')', '<(', ')', 'paste', '|', '{', 'print', '<number>', '$', 'variable_name', '}', '|', '<number>', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', '/', 'dev', '/', 's', 'db', 'word', '/', 'device', ':', '/', 'word', 'word', 'word', 'mount', 'a', 'wk', 'to', 'low', '(', '$', 'special_variable_name', '/', 'us', 'r', '/', 's', 'bin', '/', 'smart', 'ctl', 'a', 'wk', '{', 'print', '$', 'variable_name', '}', '<number>', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 6, 0, 19, 20, 27, 0, 0, 32, 0, 42, 0, 0, 0, 0, 0, 0, 0, 46, 46, 47, 47, 47, 47, 47, 0, 48, 48, 48, 48, 0, 0, 0, 49, 50, 50, 51, 51, 0, 0, 0, 52, 52, 52, 52, 52, 52, 52, 52, 52, 60, 60, 65, 66, 0, 0, 67, 75, 90]]",
            "sibling_edges": "[[6, 8, 1, 2, 20, 3, 4, 27, 5, 32, 33, 7, 75, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 26, 28, 29, 30, 42, 34, 67, 49, 37, 41, 47, 44, 50, 52, 46, 60, 48, 66, 51, 73, 53, 55, 56, 57, 58, 61, 62, 63, 65, 90, 69, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89], [7, 1, 2, 19, 3, 4, 26, 5, 41, 33, 34, 49, 8, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 24, 25, 27, 29, 30, 31, 32, 52, 35, 37, 50, 42, 44, 60, 51, 46, 47, 48, 65, 89, 73, 74, 54, 56, 57, 58, 59, 62, 63, 64, 66, 67, 70, 72, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 90]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 7, 68, 37, 69, 70, 71, 72, 73, 74, 92, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 38, 39, 21, 22, 23, 24, 25, 26, 40, 28, 29, 30, 31, 41, 45, 43, 33, 34, 76, 77, 78, 79, 80, 81, 82, 83, 84, 53, 54, 55, 56, 57, 58, 59, 44, 85, 86, 61, 62, 63, 64, 87, 88, 89, 93, 91], [7, 68, 37, 69, 70, 71, 72, 73, 74, 92, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 38, 39, 21, 22, 23, 24, 25, 26, 40, 28, 29, 30, 31, 41, 45, 43, 33, 34, 76, 77, 78, 79, 80, 81, 82, 83, 84, 53, 54, 55, 56, 57, 58, 59, 44, 85, 86, 61, 62, 63, 64, 87, 88, 89, 93, 91, 35]]"
        }
    },
    {
        "code": "find / -print0 | perl -ln0e print 'found $_' if -p",
        "text": "show all file in en ti r file system ..",
        "id": 130,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', '/', '-', 'print', '<number>', 'word', '-', 'ln', '<number>', 'e', 'print', \"'\", 'find', '$', '_', \"'\", 'if', '-', 'p', 'find', 'perl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 0, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 7, 8, 8, 9, 14]]",
            "sibling_edges": "[[3, 1, 9, 2, 14, 4, 5, 6, 7, 11, 12, 15, 16, 17, 20, 21, 22, 23, 26], [1, 14, 2, 3, 4, 5, 6, 7, 8, 12, 13, 16, 17, 18, 21, 22, 23, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 10, 11, 12, 13, 1, 29, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [10, 11, 12, 13, 1, 29, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "cat File | tr -d -C Regex",
        "text": "print on li print a bl char act from file ..",
        "id": 131,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'd', '-', 'c', 'regex', 'cat', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 5, 6, 8]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 4, 9, 11], [1, 8, 2, 3, 4, 5, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 1, 15, 9, 10, 11, 12], [7, 1, 15, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find . -name Lemon*.mp3 -exec mplayer {} ;",
        "text": "find all file file under current director i and run m player with t he be e file ..",
        "id": 132,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', 'lemon', '*', '.', 'mp3', '-', 'exec', 'm', 'player', 'word', 'word', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 0, 0, 7, 19, 20]]",
            "sibling_edges": "[[20, 7, 2, 3, 4, 5, 6, 9, 11, 12, 13, 15, 17, 19], [1, 2, 3, 4, 5, 6, 19, 10, 12, 13, 14, 16, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 1]]"
        }
    },
    {
        "code": "seq Number Number | sort -R | head -n Quantity",
        "text": "print a random number from number to number ..",
        "id": 133,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'number', 'word', '-', 'r', 'word', '-', 'n', 'quantity', 'seq', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 5, 5, 0, 6, 6, 7, 8, 11, 14]]",
            "sibling_edges": "[[4, 1, 5, 2, 8, 3, 11, 14, 6, 12, 15], [1, 11, 2, 14, 3, 4, 5, 6, 7, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 9, 10, 1, 19, 12, 13, 2, 20, 15, 16], [9, 10, 1, 19, 12, 13, 2, 20, 15, 16, 17]]"
        }
    },
    {
        "code": "echo Regex | tee >( wc )",
        "text": "write regex to con sol and print number of byte symbol and string in prov id input ..",
        "id": 134,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'regex', 'word', '>(', ')', 'echo', 'tee', 'word', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 2, 0, 0, 0, 3, 5, 0, 10]]",
            "sibling_edges": "[[2, 1, 3, 5, 6, 10], [1, 5, 2, 6, 10, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 4, 1, 9, 6, 11], [4, 1, 9, 6, 11, 7]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file in current director i end with file ..",
        "id": 135,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rm {} +",
        "text": "r emo v all file file in and below current director i ..",
        "id": 136,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rm', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 19, 20], [8, 9, 10, 11, 12, 13, 14, 19, 20, 17]]"
        }
    },
    {
        "code": "date --set Regex",
        "text": "set system date to sit date time int number ..",
        "id": 137,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '--', 'set', 'regex', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "screen -r",
        "text": "list screen id ..",
        "id": 138,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'r', 'screen']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "date -u -d Regex +'%s'",
        "text": "save utc date repr es by time string regex as second sin c epoch to v aria bl regex ..",
        "id": 139,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'u', '-', 'd', 'regex', 'word', 'raw_string', 'date', '+', \"'\", '%', 's', \"'\"]",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 1, 1, 2, 2, 3, 0, 0, 4, 10, 11, 11, 11, 11]]",
            "sibling_edges": "[[4, 1, 2, 3, 5, 7, 10, 14, 15, 16], [1, 2, 3, 10, 6, 8, 11, 15, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 5, 6, 7, 8, 9, 13, 14, 15, 16], [5, 6, 7, 8, 9, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "seq -s+ -5 10 | bc",
        "text": "cal cu l sum of all number from number to number ..",
        "id": 140,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'number', 'number', 'word', '-', 's', '+', '-', '<number>', '<number>', 'word', 'seq', 'bc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 4, 0, 5, 12]]",
            "sibling_edges": "[[4, 1, 5, 2, 3, 6, 7, 9], [1, 12, 2, 3, 4, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11, 1], [6, 7, 8, 9, 10, 11, 1, 14]]"
        }
    },
    {
        "code": "dig Regex Regex ch txt",
        "text": "print file record with server 's ho tn be from name serv regex ..",
        "id": 141,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'regex', 'regex', 'ch', 'txt', 'dig']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 0, 1, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3], [1, 2, 3, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 6, 7, 8], [6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -type f -not -iname Regex -exec cp {} File \\;",
        "text": "cop i all file under current director i but one with file in path to directory director i ..",
        "id": 142,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'not', '-', 'i', 'name', 'regex', '-', 'exec', 'cp', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 0, 0, 9, 10, 10, 11, 25, 26]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 26, 9, 13, 16, 18, 19, 22, 25, 28], [1, 2, 3, 4, 5, 6, 7, 8, 25, 9, 10, 14, 17, 19, 20, 23, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 32, 27, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 32, 27, 28, 29]]"
        }
    },
    {
        "code": "find data/ -name filepattern-*2009* -print > filesOfInterest.txt",
        "text": "print a list of all regex file and director i under directory to file file ..",
        "id": 143,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', '>', 'word', 'word', 'data', '/', '-', 'name', 'file', 'pattern', '-', '*', '<number>', '*', '-', 'print', 'file', 'of', 'interest', '.', 'txt', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 7]]",
            "sibling_edges": "[[4, 7, 1, 2, 3, 5, 8, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23], [5, 1, 2, 3, 4, 6, 9, 11, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 20, 21, 22, 23], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "history",
        "text": "print command hist or i ..",
        "id": 144,
        "graph": {
            "nodes": "['program', 'redirected_statement', 'command', 'file_redirect', 'command_name', 'word', 'word', 'word', 'word', '>', 'word', 'word', 'data', '/', '-', 'name', 'file', 'pattern', '-', '*', '<number>', '*', '-', 'print', 'file', 'of']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 7]]",
            "sibling_edges": "[[4, 7, 1, 2, 3, 5, 8, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23], [5, 1, 2, 3, 4, 6, 9, 11, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 20, 21, 22, 23], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path -size +Size -exec ls -l -s {} + | sort -n -r",
        "text": "display a long list of all file in current folder in sort order which be big than size ..",
        "id": 145,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'exec', 'ls', '-', 'l', '-', 's', 'word', 'word', '+', 'word', '-', 'n', '-', 'r', 'find', '{', '}', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 0, 0, 9, 0, 10, 10, 11, 11, 12, 25, 26, 28]]",
            "sibling_edges": "[[9, 1, 12, 2, 3, 4, 5, 6, 7, 8, 26, 28, 10, 14, 16, 18, 21, 23, 25, 29, 31], [1, 28, 2, 3, 4, 5, 6, 7, 8, 25, 9, 10, 11, 15, 17, 19, 22, 24, 26, 30, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 34, 35, 27, 1, 36, 29, 30, 31], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 34, 35, 27, 1, 36, 29, 30, 31, 32]]"
        }
    },
    {
        "code": "find Path -type f \\( -exec grep -q Regex {} \\; -or -print \\)",
        "text": "find all regular file in current director i tree that not contain a white spa c ..",
        "id": 146,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'exec', 'grep', '-', 'q', 'regex', 'word', 'word', '\\\\', ';', '-', 'or', '-', 'print', '\\\\', ')', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 0, 0, 9, 9, 10, 10, 11, 11, 12, 12, 13, 26, 27]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 27, 9, 10, 11, 15, 18, 20, 23, 26, 28, 30, 32, 34], [1, 2, 3, 4, 5, 6, 7, 8, 26, 9, 10, 11, 12, 16, 19, 21, 24, 27, 29, 31, 33, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 28, 29, 30, 31, 32, 33, 34], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 28, 29, 30, 31, 32, 33, 34, 35]]"
        }
    },
    {
        "code": "find Path -fprint File -and \\( -name Regex -exec rm {} \\; \\)",
        "text": "r emo v file name regex from file director i tree and write name to file regex standard error ..",
        "id": 147,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'f', 'print', 'file', '-', 'and', '\\\\', '(', '-', 'name', 'regex', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', '\\\\', ')', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 0, 0, 10, 10, 11, 11, 12, 28, 29]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 29, 10, 14, 15, 18, 20, 22, 25, 28, 30, 32], [1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 11, 15, 16, 19, 21, 23, 26, 29, 31, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 30, 31, 32], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 30, 31, 32, 33]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "search for all file in current director i recur who be e name contain regex ig nor case ..",
        "id": 148,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -atime +Timespan -ok rm {} \\;",
        "text": "r emo v with prompt all file start in file that not be access in over time span ..",
        "id": 149,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'a', 'time', '+', 'timespan', '-', 'ok', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 0, 0, 6, 6, 7, 17, 18]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 18, 9, 10, 12, 14, 17, 19], [1, 2, 3, 4, 5, 17, 6, 10, 11, 13, 15, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 8, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19], [8, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19, 20]]"
        }
    },
    {
        "code": "cat $( whoami )",
        "text": "print current user 's mail file in file ..",
        "id": 150,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'cat', 'word', 'whoa', 'mi']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 0, 5, 5]]",
            "sibling_edges": "[[1, 2, 5, 6], [2, 5, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 6, 7], [2, 6, 7, 3]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -i -n Regex {} \\;",
        "text": "search file file from current director i tree for to do line ..",
        "id": 151,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'i', '-', 'n', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 20, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 21, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -print Path",
        "text": "find one file or director i in current director i who be e name match pattern give as a v aria bl regex ..",
        "id": 152,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'print', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 14, 17], [1, 2, 3, 4, 5, 6, 7, 11, 12, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "ls",
        "text": "list content of current folder ..",
        "id": 153,
        "graph": {
            "nodes": "['program', 'command', 'command_name', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'print']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 14, 17], [1, 2, 3, 4, 5, 6, 7, 11, 12, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "tac File | grep -m Quantity -o -P Regex",
        "text": "grep for last occur r of text between number tag ..",
        "id": 154,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'm', 'quantity', '-', 'o', '-', 'p', 'regex', 'ta', 'c', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 10]]",
            "sibling_edges": "[[2, 1, 8, 10, 3, 4, 5, 6, 11, 14, 16, 19], [1, 10, 2, 3, 4, 5, 6, 7, 12, 15, 17, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 20, 9, 1, 21, 11, 12, 13, 14, 15, 16, 17], [20, 9, 1, 21, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "screen -r user -X stuff spawn daemon$(printf \\r)",
        "text": "send text regex and a new l in char act to screen session ..",
        "id": 155,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'r', 'user', '-', 'x', 'stuff', 'spawn', 'word', 'screen', 'daemon', '$(', ')', 'word', 'word', '\\\\', 'r', 'print', 'f']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 0, 6, 14, 0, 0, 0, 0, 19, 19, 20, 20]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 5, 7, 10, 14, 17, 19, 20, 21, 23], [1, 2, 3, 4, 5, 14, 8, 11, 17, 20, 18, 19, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13, 16, 17, 23, 24, 21, 22], [7, 8, 9, 10, 11, 12, 13, 16, 17, 23, 24, 21, 22, 18]]"
        }
    },
    {
        "code": "tmux set-environment -gu RBENV_VERSION",
        "text": "unset regex v aria bl in global environ ..",
        "id": 156,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'set', '-', 'environment', '-', 'gu', 'rb', 'env', 'version', 't', 'mu', 'x']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 6, 8, 10, 11, 13, 14], [1, 2, 3, 6, 7, 9, 11, 12, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 14, 15, 5, 6, 7, 8, 9, 10, 11], [14, 15, 5, 6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "cut File -f Number File",
        "text": "print second section of space se par data from text file regex ..",
        "id": 157,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'file', '-', 'f', 'number', 'file', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7], [1, 2, 3, 4, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "sort -t Regex -k Number -k Number File",
        "text": "sort tab se par file regex use a version sort for field number and a num er sort for field number ..",
        "id": 158,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', 'regex', '-', 'k', 'number', '-', 'k', 'number', 'file', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 12, 15], [1, 2, 3, 4, 5, 6, 7, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "rm File",
        "text": "r emo v regex file ..",
        "id": 159,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'rm']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "tree --help 2>&1 | head -n2",
        "text": "print first number line of tree 's help me sag by redirect it from standard error to standard output ..",
        "id": 160,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'file_descriptor', '>&', 'number', 'word', '-', 'n', '<number>', 'word', '--', 'help', '<number>', '<number>', 'head', 'tree']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 4, 6, 7, 11]]",
            "sibling_edges": "[[6, 1, 3, 7, 11, 4, 5, 8, 9, 12], [1, 7, 4, 2, 3, 5, 6, 9, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 12, 13, 14, 5, 15, 1, 16, 8, 9], [12, 13, 14, 5, 15, 1, 16, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type f -exec chmod Permission {} \\;",
        "text": "add group write per miss to all file in current director i ..",
        "id": 161,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 24, 25]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 25, 12, 13, 16, 19, 21, 24, 26], [1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 13, 14, 17, 20, 22, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26, 27]]"
        }
    },
    {
        "code": "sed -z Program",
        "text": "rep lac all new l in with space in standard input ..",
        "id": 162,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'z', 'program', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "echo Regex | cut -d Regex -f Number",
        "text": "print give file name 's ext en ..",
        "id": 163,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'echo', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 6, 7, 9]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 4, 5, 10, 13], [1, 9, 2, 3, 4, 5, 6, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 1, 17, 10, 11, 12, 13, 14], [8, 1, 17, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "cp -n File File",
        "text": "cop i regex to regex pre serv over writ exist file ..",
        "id": 164,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', 'file', 'file', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -daystart -mtime Timespan",
        "text": "find all file that be mod if i exact one day ago ..",
        "id": 165,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'day', 'start', '-', 'm', 'time', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 10, 11], [1, 2, 3, 4, 8, 9, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -type f | xargs -I {} chmod --reference {} Permission",
        "text": "find all file under current director i and cop i per miss to same file in file ..",
        "id": 166,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'i', 'word', 'word', 'ch', 'mod', '--', 'reference', 'word', 'word', 'permission', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 6, 7, 7, 0, 0, 8, 9, 14, 14, 17, 18, 23, 24]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 18, 6, 7, 24, 11, 15, 17, 19, 21, 23, 27], [1, 14, 2, 3, 4, 5, 17, 6, 7, 23, 8, 12, 16, 18, 20, 22, 24, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 1, 27, 28, 15, 16, 29, 30, 19, 20, 21, 22, 31, 32], [10, 11, 12, 13, 1, 27, 28, 15, 16, 29, 30, 19, 20, 21, 22, 31, 32, 25]]"
        }
    },
    {
        "code": "find Path -type f \\( -name Regex -or -name Regex \\) -print",
        "text": "search current director i tree for regular file who be e name end in file or file ..",
        "id": 167,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 12]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 19, 22, 24, 27, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 18, 20, 23, 25, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]]"
        }
    },
    {
        "code": "gzip",
        "text": "compress from standard input with g zip ..",
        "id": 168,
        "graph": {
            "nodes": "['word', 'g', 'zip']",
            "base_edges": "[[1, 2], [0, 0]]",
            "sibling_edges": "[[1], [2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1], [2]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -print | xargs -I {} rm -f {}",
        "text": "find file name core in or below director i file and de let them note that will work incorrect if be an i file n be contain new l in sing l or do u bl quot ..",
        "id": 169,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'print', 'word', '-', 'i', 'word', 'word', 'rm', '-', 'f', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 0, 8, 8, 0, 0, 9, 10, 10, 0, 0, 11, 21, 21, 24, 25, 29, 30]]",
            "sibling_edges": "[[7, 1, 11, 2, 3, 4, 5, 6, 21, 8, 25, 9, 10, 13, 16, 19, 22, 24, 27, 29, 32], [1, 21, 2, 3, 4, 5, 6, 7, 8, 24, 9, 10, 29, 14, 17, 20, 23, 25, 28, 30, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 32, 33, 22, 23, 34, 35, 26, 27, 28, 36], [12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 32, 33, 22, 23, 34, 35, 26, 27, 28, 36, 37]]"
        }
    },
    {
        "code": "shopt -s dotglob",
        "text": "en a bl regex shell option ..",
        "id": 170,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 's', 'dot', 'glob', 'shop', 't']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 1, 1, 2, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 6, 8], [1, 2, 5, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 9, 4, 5, 6], [9, 4, 5, 6, 7]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file name regex on system ..",
        "id": 171,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "readlink -f File",
        "text": "save actual work director i in v aria bl regex ..",
        "id": 172,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'f', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "join -t Regex <( sort File ) <( sort File ) | join -t Regex File <( sort File )",
        "text": "join colon se par inform in number file file file and file in a ca scad fashion join file and file join result with file ..",
        "id": 173,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', 'regex', '<(', ')', '<(', ')', 'word', '-', 't', 'regex', 'file', '<(', ')', 'join', 'word', 'word', 'join', 'word', 'word', 'file', 'word', 'file', 'word', 'file', 'sort', 'sort', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 4, 4, 5, 6, 0, 0, 7, 0, 0, 15, 0, 0, 23, 0, 24, 0, 26, 27, 29, 31]]",
            "sibling_edges": "[[14, 1, 7, 2, 3, 12, 15, 4, 5, 6, 8, 11, 23, 13, 24, 16, 20, 26, 27, 29, 31], [1, 15, 2, 3, 11, 13, 4, 5, 6, 20, 9, 27, 12, 29, 14, 17, 31, 21, 23, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 8, 9, 10, 11, 33, 28, 12, 13, 34, 30, 14, 1, 25, 16, 17, 18, 19, 20, 35, 32], [8, 9, 10, 11, 33, 28, 12, 13, 34, 30, 14, 1, 25, 16, 17, 18, 19, 20, 35, 32, 21]]"
        }
    },
    {
        "code": "find Path -inum Quantity -print",
        "text": "find file assoc i with an i nod ..",
        "id": 174,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'in', 'um', 'quantity', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 11], [1, 2, 3, 4, 8, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "find all file and director i under current director i that match case in sen it glob pattern regex regex ..",
        "id": 175,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "search for file pic as a in folder directory ..",
        "id": 176,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "watch command",
        "text": "count number of open file for pi d regex ever i time span ..",
        "id": 177,
        "graph": {
            "nodes": "['command', 'word', 'word', 'command', 'watch']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -name Regex -newer File -print",
        "text": "search current director i tree for all file file new than file file ..",
        "id": 178,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'new', 'file', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -name Regex -prune -or \\( -type d -print \\)",
        "text": "find all director i under minimum number level down current director i excl ud director i that start with a in name ..",
        "id": 179,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'name', 'regex', '-', 'prune', '-', 'or', '\\\\', '(', '-', 'type', 'd', '-', 'print', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 19, 22, 24, 26, 28, 31, 33], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 20, 23, 25, 27, 29, 32, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]]"
        }
    },
    {
        "code": "find Path -not -path Regex -type d -exec mkdir -p -- Directory \\;",
        "text": "find all director i in current director i tree excl ud hide director i and c re at them in file ..",
        "id": 180,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'not', '-', 'path', 'regex', '-', 'type', 'd', '-', 'exec', 'mk', 'dir', '-', 'p', '--', 'directory', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 12, 12, 13]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 20, 23, 25, 27, 31], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 18, 21, 24, 26, 28, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]]"
        }
    },
    {
        "code": "bind Regex",
        "text": "de let what be type in command line and run regex when button regex ..",
        "id": 181,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'bind']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "mv File File",
        "text": "move all file excl ud hide file in directory to directory ..",
        "id": 182,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'file', 'file', 'mv']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "display all text file in current folder ..",
        "id": 183,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "echo $( readlink -f File ) Regex Regex",
        "text": "print full real path of file follow by regex ..",
        "id": 184,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '$(', ')', 'regex', 'regex', 'echo', 'word', 'word', 'word', '-', 'f', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 9, 9, 10, 11, 11]]",
            "sibling_edges": "[[3, 5, 1, 4, 10, 11, 9, 12, 15], [4, 1, 2, 11, 5, 9, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 4, 15, 16, 12, 13, 14, 5, 6], [4, 15, 16, 12, 13, 14, 5, 6, 7]]"
        }
    },
    {
        "code": "find Path -samefile Regex",
        "text": "loc at all hard link of file regex ..",
        "id": 185,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'same', 'file', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "join File | awk Program",
        "text": "file and file both contain a name and a number on each line for each name who be e correspond number not match in both file display regex me sag ..",
        "id": 186,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'file', 'word', 'program', 'join', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 9], [1, 6, 2, 3, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 1, 9, 10], [5, 1, 9, 10, 7]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file under current director i ..",
        "id": 187,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "ifconfig Regex | head -n Quantity | tr -s Regex | cut -d Regex -f Number",
        "text": "get mac address of regex network inter fa c ..",
        "id": 188,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'n', 'quantity', 'word', '-', 's', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'if', 'config', 'head', 'tr', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 5, 6, 0, 7, 7, 8, 0, 9, 9, 10, 11, 11, 12, 13, 13, 15, 19, 23]]",
            "sibling_edges": "[[4, 1, 6, 2, 8, 3, 13, 15, 5, 19, 7, 23, 9, 10, 11, 16, 20, 24, 27, 30], [1, 15, 2, 19, 3, 23, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 21, 25, 28, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 31, 14, 1, 32, 16, 17, 18, 2, 33, 20, 21, 22, 3, 34, 24, 25, 26, 27, 28], [31, 14, 1, 32, 16, 17, 18, 2, 33, 20, 21, 22, 3, 34, 24, 25, 26, 27, 28, 29]]"
        }
    },
    {
        "code": "history | awk Program | awk Program | sort | uniq -c | sort -n | tail | sort -n -r",
        "text": "print number most use command ..",
        "id": 189,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'program', 'word', 'program', 'word', 'word', '-', 'c', 'word', '-', 'n', 'word', 'word', '-', 'n', '-', 'r', 'history', 'a', 'wk', 'a', 'wk', 'sort', 'uni', 'q', 'sort', 'tail', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 0, 0, 10, 10, 0, 11, 11, 0, 0, 12, 12, 13, 13, 14, 15, 15, 17, 17, 19, 20, 20, 23, 26, 27]]",
            "sibling_edges": "[[14, 1, 8, 2, 9, 3, 19, 4, 10, 5, 11, 6, 26, 7, 15, 17, 20, 23, 27, 12, 21, 24, 28, 30, 33, 35, 38], [1, 15, 2, 17, 3, 19, 4, 20, 5, 23, 6, 26, 7, 27, 8, 9, 10, 11, 12, 13, 22, 25, 29, 31, 34, 36, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 1, 33, 34, 16, 2, 35, 36, 18, 3, 37, 4, 38, 39, 21, 22, 5, 40, 24, 25, 6, 41, 7, 42, 28, 29, 30], [1, 33, 34, 16, 2, 35, 36, 18, 3, 37, 4, 38, 39, 21, 22, 5, 40, 24, 25, 6, 41, 7, 42, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "rev File",
        "text": "display each line in file backward ..",
        "id": 190,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'rev']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "mkdir -p Directory Directory",
        "text": "make director i and p be not as need to regex and regex ..",
        "id": 191,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'p', 'directory', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "grep -r -H Regex File",
        "text": "recur find string regex in an i file within regex follow s ym link and print find string with file name ..",
        "id": 192,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'h', 'regex', 'file', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "ls File | xargs -I {} gunzip {}",
        "text": "unzip all file match file ..",
        "id": 193,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'i', 'word', 'word', 'g', 'unzip', 'word', 'word', 'ls', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 4, 0, 0, 5, 7, 7, 10, 11, 14, 15]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 11, 4, 8, 10, 12, 14, 17], [1, 7, 2, 3, 10, 4, 14, 9, 11, 13, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 6, 1, 17, 18, 8, 9, 19, 20, 12, 13, 21], [6, 1, 17, 18, 8, 9, 19, 20, 12, 13, 21, 22]]"
        }
    },
    {
        "code": "awk Program Program | column -t",
        "text": "read first column of each row find all other first column which a differ le than number and append that comma se par list to row ..",
        "id": 194,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'program', 'program', 'word', '-', 't', 'a', 'wk', 'column']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 5, 8]]",
            "sibling_edges": "[[3, 1, 5, 2, 8, 9, 11], [1, 8, 2, 3, 4, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 6, 7, 1, 13, 9], [12, 6, 7, 1, 13, 9, 10]]"
        }
    },
    {
        "code": "finger | tail -n +Quantity | awk Program | sort | uniq",
        "text": "print sort uni qu column of user n be of user who be current file in without header ..",
        "id": 195,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', '-', 'n', '+', 'quantity', 'word', 'program', 'word', 'word', 'finger', 'tail', 'a', 'wk', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 6, 0, 7, 0, 0, 8, 9, 14, 14, 16, 17, 17]]",
            "sibling_edges": "[[8, 1, 6, 2, 7, 3, 16, 4, 9, 5, 14, 10, 12, 20, 23], [1, 9, 2, 14, 3, 16, 4, 17, 5, 6, 7, 11, 13, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 1, 19, 10, 11, 12, 13, 2, 20, 21, 15, 3, 22, 4, 23], [1, 19, 10, 11, 12, 13, 2, 20, 21, 15, 3, 22, 4, 23, 24]]"
        }
    },
    {
        "code": "./yourscript.ksh | sort | uniq",
        "text": "print on li uni qu line of file output ..",
        "id": 196,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', '.', '/', 'your', 'script', '.', 'k', 'sh', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5]]",
            "sibling_edges": "[[3, 1, 4, 2, 6, 7, 8, 9, 10, 11, 14], [1, 4, 2, 5, 7, 8, 9, 10, 11, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 8, 9, 10, 11, 12, 1, 13, 2, 14], [7, 8, 9, 10, 11, 12, 1, 13, 2, 14, 15]]"
        }
    },
    {
        "code": "ssh-keygen -l -f File",
        "text": "display host 's ecdsa fingerprint use regex have algorithm ..",
        "id": 197,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'l', '-', 'f', 'file', 'ssh', '-', 'key', 'gen']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 10, 11, 12], [1, 2, 3, 6, 8, 11, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 12, 13, 5, 6, 7, 8], [11, 12, 13, 5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "more File | grep $( hostname ) | awk Program",
        "text": "list all ip address assign to current ho tn be pa us for user interact after each page ..",
        "id": 198,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'file', 'word', '$(', ')', 'word', 'program', 'more', 'grep', 'a', 'wk', 'word', 'host', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 5, 7, 10, 10, 0, 16, 16]]",
            "sibling_edges": "[[3, 1, 9, 2, 5, 7, 10, 8, 16, 14, 17], [1, 7, 2, 10, 3, 8, 4, 16, 9, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 1, 13, 8, 17, 18, 9, 2, 14, 15], [6, 1, 13, 8, 17, 18, 9, 2, 14, 15, 11]]"
        }
    },
    {
        "code": "mv File File",
        "text": "r en be regex to file ..",
        "id": 199,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'file', 'file', 'mv']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "find Path -xdev -type f | cut -d Regex -f Number | sort | uniq -c | sort -n",
        "text": "print number of en tr i in sub director i of current director i stop search at an i de vi c mount point ..",
        "id": 200,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'x', 'dev', '-', 'type', 'f', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'word', '-', 'c', 'word', '-', 'n', 'find', 'cut', 'sort', 'uni', 'q', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 6, 7, 7, 8, 0, 9, 9, 10, 11, 11, 12, 0, 0, 13, 13, 0, 14, 14, 15, 23, 30, 31, 31, 34]]",
            "sibling_edges": "[[8, 1, 12, 2, 30, 3, 13, 4, 15, 5, 6, 7, 23, 9, 10, 11, 31, 34, 17, 18, 20, 24, 27, 32, 35, 40], [1, 23, 2, 30, 3, 31, 4, 34, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 21, 25, 28, 33, 36, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 16, 17, 18, 19, 20, 21, 22, 1, 38, 24, 25, 26, 27, 28, 29, 2, 39, 3, 40, 41, 32, 33, 4, 42, 35], [16, 17, 18, 19, 20, 21, 22, 1, 38, 24, 25, 26, 27, 28, 29, 2, 39, 3, 40, 41, 32, 33, 4, 42, 35, 36]]"
        }
    },
    {
        "code": "find Path -size -Size -xdev -print",
        "text": "find file small than size skip director i on other file system ..",
        "id": 201,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '-', 'size', '-', 'x', 'dev', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 10, 12, 13, 15], [1, 2, 3, 4, 5, 9, 11, 13, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 7, 8, 9, 10, 11, 12, 13, 14, 15], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -size +Size -exec ls -l {} \\;",
        "text": "display a long list of all file that be big than size in current folder ..",
        "id": 202,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 19, 20]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 20, 10, 12, 14, 17, 19, 21], [1, 2, 3, 4, 5, 6, 19, 7, 11, 13, 15, 18, 20, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 21], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 21, 22]]"
        }
    },
    {
        "code": "mount -t ntfs",
        "text": "mount a read on li n tf file system ..",
        "id": 203,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 't', 'n', 'tf', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 2, 3]]",
            "sibling_edges": "[[3, 1, 4, 6], [1, 2, 5, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 4, 5, 6], [4, 5, 6, 7]]"
        }
    },
    {
        "code": "echo Regex | tee -a File",
        "text": "print regex to con sol and append to regex ..",
        "id": 204,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'a', 'file', 'echo', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 8], [1, 7, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 1, 12, 8, 9], [6, 1, 12, 8, 9, 10]]"
        }
    },
    {
        "code": "sync --list-only --include *2012*.xml -exclude *.xml serveripaddress::pt/dir/files/ --port=111 | awk { $1=$2=$3=$4=''; print substr($0,5); } >output.txt",
        "text": "list on li file name match regex from directory listen on port number and write to file ..",
        "id": 205,
        "graph": {
            "nodes": "['program', ';', ';', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '(', ')', '>', 'word', 'word', '--', 'list', '-', 'only', '--', 'include', '*', '<number>', '*', '.', 'xml', '-', 'exclude', '*', '.', 'xml', 'server', 'ip', 'address', '::', 'pt', '/', 'dir', '/', 'file', '/', '--', 'port', '=', '<number>', 'word', '{', 'word', 'word', 'word', 'word', 'raw_string', 'print', 'sub', 'tr', 'word', 'output', '.', 'txt', 'sync', 'a', 'wk', '$', 'variable_name', '=', '$', 'variable_name', '=', '$', 'variable_name', '=', '$', 'variable_name', '=', \"''\", '}', '<number>', '<number>', '<number>', '<number>', 'word', '$', 'special_variable_name', ',', '<number>', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 0, 11, 0, 0, 0, 0, 0, 12, 13, 13, 0, 17, 17, 17, 18, 49, 49, 0, 0, 51, 0, 0, 52, 0, 0, 53, 0, 0, 54, 55, 59, 67, 70, 73, 76, 0, 0, 0, 84, 84, 86]]",
            "sibling_edges": "[[55, 1, 15, 2, 10, 3, 12, 13, 59, 18, 4, 5, 6, 7, 8, 9, 49, 11, 14, 84, 16, 19, 20, 21, 23, 25, 26, 27, 28, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 67, 51, 70, 52, 73, 53, 76, 54, 57, 60, 61, 64, 66, 69, 72, 75, 86, 85, 87], [1, 12, 2, 59, 3, 49, 13, 14, 16, 4, 5, 6, 7, 8, 9, 10, 11, 66, 85, 15, 17, 20, 21, 22, 24, 26, 27, 28, 29, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 51, 69, 52, 72, 53, 75, 54, 55, 58, 61, 62, 65, 67, 70, 73, 76, 84, 86, 88]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[63, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 3, 64, 65, 50, 66, 80, 68, 69, 81, 71, 72, 82, 74, 75, 83, 77, 78, 1, 56, 57, 58, 14, 85, 89, 87, 88, 15, 2, 79, 16, 60, 61], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 3, 64, 65, 50, 66, 80, 68, 69, 81, 71, 72, 82, 74, 75, 83, 77, 78, 1, 56, 57, 58, 14, 85, 89, 87, 88, 15, 2, 79, 16, 60, 61, 62]]"
        }
    },
    {
        "code": "find Path -cmin -Quantity",
        "text": "find all file in file system which be c hang in time span ..",
        "id": 206,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'cm', 'in', '-', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -type f -mtime +Timespan",
        "text": "find all regular file that re id in current director i tree and be last mod if i more than time span ago ..",
        "id": 207,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'm', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14], [1, 2, 3, 4, 5, 9, 12, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -daystart -mtime -Timespan",
        "text": "find all file that be mod if i in time span ..",
        "id": 208,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'day', 'start', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 10, 11, 13], [1, 2, 3, 4, 8, 9, 11, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 6, 7, 8, 9, 10, 11, 12, 13], [6, 7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "script.py $(find /stuff/* -type d)",
        "text": "search for all director i in a folder and limit search to current folder and give them as input to python script ..",
        "id": 209,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'script', '.', 'py', 'word', 'word', 'word', 'word', '/', 'stuff', '/', '*', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 7, 7, 7, 7, 8, 8, 9, 10]]",
            "sibling_edges": "[[1, 2, 9, 4, 5, 10, 7, 8, 11, 12, 13, 15], [2, 10, 3, 5, 6, 7, 8, 9, 12, 13, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 6, 2, 18, 11, 12, 13, 14, 15, 16, 17], [5, 6, 2, 18, 11, 12, 13, 14, 15, 16, 17, 3]]"
        }
    },
    {
        "code": "find Path -regex Regex",
        "text": "search file director i tree for file who be e name match regular express file ..",
        "id": 210,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -newermt Regex -and ! -newermt Regex",
        "text": "display all file in current folder which be mod if i between number date ..",
        "id": 211,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'mt', 'regex', '-', 'and', '!', '-', 'new', 'mt', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 14, 17, 18], [1, 2, 3, 4, 5, 6, 7, 11, 12, 15, 18, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "echo Regex | xargs -n Quantity -I {} cp File {}",
        "text": "cop i file regex to each of director i like file ..",
        "id": 212,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'cp', 'file', 'word', 'word', 'echo', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 0, 0, 6, 7, 0, 0, 8, 10, 10, 16, 17, 20, 21]]",
            "sibling_edges": "[[2, 1, 8, 10, 3, 4, 5, 17, 6, 7, 11, 14, 16, 20, 23], [1, 10, 2, 3, 4, 5, 16, 6, 7, 20, 12, 15, 17, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 1, 23, 24, 11, 12, 13, 14, 15, 25, 26, 18, 19, 27], [9, 1, 23, 24, 11, 12, 13, 14, 15, 25, 26, 18, 19, 27, 28]]"
        }
    },
    {
        "code": "find -iname file* -exec du -cb {} + | grep total$ | cut -f1 | paste -sd+ - | bc",
        "text": "find total size of file who be e name begin with regex within current director i tree ..",
        "id": 213,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'i', 'name', 'file', '*', '-', 'exec', 'du', '-', 'cb', 'word', 'word', '+', 'word', 'word', '$', 'word', '-', 'f', '<number>', 'word', '-', 'sd', '+', '-', 'word', 'find', '{', '}', 'grep', 'total', 'cut', 'paste', 'bc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 6, 6, 7, 7, 8, 9, 9, 0, 0, 10, 0, 0, 0, 0, 11, 11, 11, 0, 12, 12, 12, 13, 0, 14, 25, 26, 28, 29, 31, 35, 40]]",
            "sibling_edges": "[[10, 1, 30, 2, 11, 3, 13, 4, 14, 5, 6, 7, 8, 9, 26, 28, 31, 35, 12, 15, 16, 18, 20, 23, 25, 29, 32, 33, 36, 37], [1, 28, 2, 31, 3, 35, 4, 40, 5, 6, 7, 8, 9, 25, 10, 29, 11, 12, 13, 16, 17, 19, 21, 24, 26, 30, 33, 34, 37, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 42, 43, 27, 1, 44, 45, 30, 2, 46, 32, 33, 34, 3, 47, 36, 37, 38, 39, 4], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 42, 43, 27, 1, 44, 45, 30, 2, 46, 32, 33, 34, 3, 47, 36, 37, 38, 39, 4, 48]]"
        }
    },
    {
        "code": "find Path -uid Regex -print",
        "text": "find all file and director i with user id number under current director i tree ..",
        "id": 214,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'uid', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find /path/to/dir -mindepth 1 -maxdepth 1 -type d -execdir sh -c d=${1##*/}; sudo tar -zcpvf '$d'.tar.gz '$d' - {} ;",
        "text": "find all director i under file and archiv them into file with file ext en ..",
        "id": 215,
        "graph": {
            "nodes": "['program', ';', ';', 'word', 'word', 'number', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', '/', 'path', '/', 'to', '/', 'dir', '-', 'min', 'depth', '<number>', '-', 'max', 'depth', '<number>', '-', 'type', 'd', '-', 'exec', 'dir', 'sh', '-', 'c', 'word', 'word', 'tar', '-', 'z', 'cp', 'vf', 'raw_string', 'word', \"'\", '$', 'd', \"'\", '-', 'word', 'word', 'find', 'd', '=', '${', 'variable_name', '##', 'regex', '}', 'su', 'do', \"'\", '$', 'd', \"'\", '.', 'tar', '.', 'gz', '{', '}', '<number>', '*', '/']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 10, 10, 10, 11, 12, 12, 0, 0, 13, 14, 14, 14, 14, 0, 0, 15, 15, 15, 15, 16, 0, 0, 17, 41, 41, 0, 0, 0, 0, 0, 42, 42, 48, 48, 48, 48, 49, 49, 49, 49, 55, 56, 61, 63, 63]]",
            "sibling_edges": "[[64, 1, 56, 17, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 42, 13, 14, 49, 15, 16, 18, 19, 20, 21, 22, 24, 25, 28, 29, 32, 35, 36, 39, 41, 44, 45, 46, 48, 50, 51, 52, 55, 58, 60, 61, 62, 63, 65, 67, 68, 69, 71, 72, 73, 78], [1, 42, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 41, 13, 14, 48, 15, 16, 55, 19, 20, 21, 22, 23, 25, 26, 29, 30, 33, 36, 37, 40, 60, 45, 46, 47, 49, 51, 52, 53, 56, 59, 61, 62, 63, 64, 66, 68, 69, 70, 72, 73, 74, 79]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[57, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 58, 59, 60, 77, 62, 78, 79, 64, 1, 65, 66, 43, 44, 45, 46, 47, 67, 68, 69, 70, 71, 72, 73, 74, 50, 51, 52, 53, 54, 75, 76], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 58, 59, 60, 77, 62, 78, 79, 64, 1, 65, 66, 43, 44, 45, 46, 47, 67, 68, 69, 70, 71, 72, 73, 74, 50, 51, 52, 53, 54, 75, 76, 2]]"
        }
    },
    {
        "code": "find Path -user Regex -exec chown Regex {} \\;",
        "text": "c hang ownership of all regex 's file in current director i and below to regex ..",
        "id": 216,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'exec', 'chow', 'n', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan",
        "text": "find all file that be mod if i within time span ..",
        "id": 217,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -name Regex -atime +Timespan -print",
        "text": "search for file with name regex and which not be access in time span in file folder ..",
        "id": 218,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'a', 'time', '+', 'timespan', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 13, 15, 17], [1, 2, 3, 4, 5, 6, 10, 13, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "echo Regex | grep -E -o Regex",
        "text": "find on li part of echo string that match with regex regex and save them in regex v aria bl each match part on a se par line ..",
        "id": 219,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'e', '-', 'o', 'regex', 'echo', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 5, 6, 8]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 4, 9, 11], [1, 8, 2, 3, 4, 5, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 1, 15, 9, 10, 11, 12], [7, 1, 15, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "sleep $(expr `date -d 03/21/2014 12:30 +%s` - `date +%s`)",
        "text": "sleep until a specif date ..",
        "id": 220,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'sleep', 'word', 'word', '`', '`', '-', '`', '`', 'expr', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', '<number>', '/', '<number>', '/', '<number>', '<number>', ':', '<number>', '+', '%', 's', 'word', '+', '%', 's', 'date', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 0, 17, 17, 17, 18, 32]]",
            "sibling_edges": "[[1, 2, 11, 6, 8, 5, 7, 16, 10, 17, 18, 13, 14, 15, 32, 19, 21, 22, 23, 24, 26, 27, 29, 30, 33, 34], [2, 6, 3, 7, 5, 10, 18, 8, 32, 11, 13, 14, 15, 16, 17, 20, 22, 23, 24, 25, 27, 28, 30, 31, 34, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 12, 7, 36, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 8, 9, 10, 37, 33, 34, 35, 11], [2, 12, 7, 36, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 8, 9, 10, 37, 33, 34, 35, 11, 3]]"
        }
    },
    {
        "code": "ping -c Quantity Regex | awk Program",
        "text": "print ping time of a sing l request to file ..",
        "id": 221,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'c', 'quantity', 'regex', 'word', 'program', 'ping', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 0, 5, 6, 11, 11]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 11, 7, 14], [1, 11, 2, 3, 4, 5, 8, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 7, 8, 9, 10, 1, 14, 15], [7, 8, 9, 10, 1, 14, 15, 12]]"
        }
    },
    {
        "code": "echo Regex | rev | cut -d Regex -f -Number",
        "text": "revert regex val u and print first number space se par field ..",
        "id": 222,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', 'word', '-', 'd', 'regex', '-', 'f', '-', 'number', 'echo', 'rev', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 4, 5, 6, 6, 7, 7, 8, 10, 11]]",
            "sibling_edges": "[[3, 1, 10, 2, 8, 11, 4, 5, 6, 12, 15, 17], [1, 10, 2, 11, 3, 4, 5, 6, 7, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 1, 20, 2, 21, 12, 13, 14, 15, 16, 17], [9, 1, 20, 2, 21, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "ls !(b*)",
        "text": "list all file and folder with it content in a current folder excl ud name start with regex ..",
        "id": 223,
        "graph": {
            "nodes": "['command', 'word', 'word', '(', ')', 'ls', '!', 'word', 'b', '*']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 0, 7, 7]]",
            "sibling_edges": "[[1, 2, 3, 7, 8], [2, 3, 7, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 6, 3, 8, 9], [6, 3, 8, 9, 4]]"
        }
    },
    {
        "code": "comm -1 -2 <( awk Program Program | sort -u ) <( awk Program Program | sort -u )",
        "text": "print common third white spa c se par field in regex and regex ..",
        "id": 224,
        "graph": {
            "nodes": "['command', 'number', 'number', 'word', '-', '<number>', '-', '<number>', '<(', ')', '<(', ')', 'comm', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'program', 'program', 'word', '-', 'u', 'word', 'program', 'program', 'word', '-', 'u', 'a', 'wk', 'sort', 'a', 'wk', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 16, 0, 17, 17, 0, 18, 19, 0, 20, 20, 21, 21, 24, 27, 27, 30]]",
            "sibling_edges": "[[3, 1, 2, 9, 4, 6, 8, 17, 10, 20, 16, 13, 19, 14, 21, 15, 24, 27, 18, 30, 25, 31, 33, 36], [1, 2, 8, 10, 5, 7, 21, 9, 27, 11, 13, 24, 14, 30, 15, 16, 17, 18, 19, 20, 26, 32, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 4, 5, 6, 7, 8, 33, 34, 22, 23, 13, 35, 25, 26, 9, 10, 36, 37, 28, 29, 14, 38, 31, 32], [4, 5, 6, 7, 8, 33, 34, 22, 23, 13, 35, 25, 26, 9, 10, 36, 37, 28, 29, 14, 38, 31, 32, 11]]"
        }
    },
    {
        "code": "find Path -type f -exec ls -s {} \\; Path Path | head - Quantity",
        "text": "find command will display top number small file from current director i most prob a bl will get size file ..",
        "id": 225,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ls', '-', 's', 'word', 'word', '\\\\', ';', 'path', 'path', 'word', '-', 'quantity', 'find', '{', '}', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 0, 0, 8, 8, 9, 10, 0, 11, 12, 13, 23, 24, 29]]",
            "sibling_edges": "[[10, 1, 13, 2, 3, 4, 5, 6, 7, 24, 8, 9, 29, 11, 15, 18, 21, 23, 25], [1, 29, 2, 3, 4, 5, 6, 7, 23, 8, 9, 10, 11, 12, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 33, 34, 25, 26, 27, 28, 1, 35, 30], [14, 15, 16, 17, 18, 19, 20, 21, 22, 33, 34, 25, 26, 27, 28, 1, 35, 30, 31]]"
        }
    },
    {
        "code": "find . -exec sh -c echo {} | grep -qi /projects/insanewebproject[^/]*$ ; -print",
        "text": "find file and director i under current director i that match regex file in path ..",
        "id": 226,
        "graph": {
            "nodes": "['program', ';', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'exec', 'sh', '-', 'c', 'echo', 'word', 'word', 'word', '-', 'qi', 'word', 'word', 'word', 'word', 'word', '$', '-', 'print', 'find', '{', '}', 'grep', '/', 'project', '/', 'insane', 'web', 'project', '[', '^', '/', ']', '*']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 9, 9, 10, 18, 19, 20, 23, 23, 23, 23, 23, 23, 24, 25, 25, 26, 27]]",
            "sibling_edges": "[[28, 1, 19, 2, 10, 3, 4, 5, 6, 7, 20, 8, 12, 15, 18, 21, 23, 24, 25, 26, 27, 29, 35, 36, 37, 38, 39, 42], [1, 9, 2, 20, 3, 4, 5, 6, 7, 18, 8, 23, 13, 16, 19, 22, 24, 25, 26, 27, 28, 30, 36, 37, 38, 39, 40, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 11, 12, 13, 14, 15, 16, 17, 32, 33, 2, 34, 21, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 28, 1, 29], [11, 12, 13, 14, 15, 16, 17, 32, 33, 2, 34, 21, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 28, 1, 29, 30]]"
        }
    },
    {
        "code": "cd Directory",
        "text": "go to director i file file file use sing l quot to es cap special char act incl ud dollar sign ..",
        "id": 227,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'cd']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} +",
        "text": "find all director i under file and c hang per miss to number ..",
        "id": 228,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 20]]"
        }
    },
    {
        "code": "find Path Path Path",
        "text": "find all regex file and director i under current director i ..",
        "id": 229,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', 'path', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2], [1, 2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 6], [5, 6, 7]]"
        }
    },
    {
        "code": "cat file.json | python -c import sys, json, jsonpath; print '\\n'.join(jsonpath.jsonpath(json.load(sys.stdin), 'store.book[?(@.price < 10)].title'))",
        "text": "par file to print file regex en tr i who be e regex be le than number ..",
        "id": 230,
        "graph": {
            "nodes": "['program', ';', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '(', ')', 'word', 'file', '.', 'json', 'word', '-', 'c', 'import', 'sys', ',', 'json', ',', 'json', 'path', 'print', 'raw_string', 'word', 'cat', 'python', \"'\", \"'\", '.', 'join', 'word', '(', ')', 'json', 'path', '.', 'json', 'path', ',', 'raw_string', 'word', '(', ')', \"'\", 'store', '.', 'book', '[', '?', '(', '@', '.', 'price', '<', '<number>', ')', ']', '.', 'title', \"'\", 'json', '.', 'load', 'word', 'sys', '.', 'std', 'in']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 0, 0, 12, 16, 27, 27, 28, 28, 0, 0, 0, 35, 35, 35, 35, 35, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 0, 68, 68, 68, 68]]",
            "sibling_edges": "[[8, 1, 3, 2, 9, 28, 12, 16, 4, 5, 6, 7, 10, 37, 13, 14, 17, 20, 22, 24, 27, 35, 31, 33, 36, 43, 44, 38, 39, 40, 41, 47, 45, 46, 68, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 69, 70, 71], [1, 9, 2, 16, 27, 10, 3, 4, 5, 6, 7, 8, 35, 11, 14, 15, 18, 21, 23, 25, 28, 36, 32, 34, 45, 44, 37, 39, 40, 41, 42, 43, 46, 68, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70, 71, 72]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 13, 14, 15, 2, 30, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 26, 31, 32, 33, 34, 10, 38, 39, 40, 41, 42, 36, 65, 66, 67, 46, 69, 70, 71, 72, 47, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 37], [13, 14, 15, 2, 30, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 26, 31, 32, 33, 34, 10, 38, 39, 40, 41, 42, 36, 65, 66, 67, 46, 69, 70, 71, 72, 47, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 37, 11]]"
        }
    },
    {
        "code": "find Path -regex Regex",
        "text": "find all director i in current folder which begin with word regex and end with a digit ..",
        "id": 231,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "mount -l -t nfs4",
        "text": "list all nfs mount ..",
        "id": 232,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'l', '-', 't', 'nfs', '<number>', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 9], [1, 2, 3, 6, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -path Regex",
        "text": "display all file in us r folder and those that be in path local ..",
        "id": 233,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -printf 'f %s %p\\n'",
        "text": "display all regular file in temp folder and display file n be along with file size ..",
        "id": 234,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'type', 'f', '-', 'print', 'f', \"'\", 'f', '%', 's', '%', 'p', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14, 15, 16, 17, 18, 19], [1, 2, 3, 4, 5, 9, 12, 13, 15, 16, 17, 18, 19, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "find Path -type f -mtime +Timespan -name Regex -exec mv {} File \\;",
        "text": "move file from regex to regex that not be mod if i in time span ..",
        "id": 235,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'm', 'time', '+', 'timespan', '-', 'name', 'regex', '-', 'exec', 'mv', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 0, 0, 10, 11, 11, 12, 28, 29]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 29, 10, 14, 17, 18, 20, 22, 25, 28, 31], [1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 11, 15, 18, 19, 21, 23, 26, 29, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 34, 35, 30, 31], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 34, 35, 30, 31, 32]]"
        }
    },
    {
        "code": "set -f",
        "text": "dis a bl wildcard exp an and name glob ..",
        "id": 236,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'f', 'set']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "find Path -type f -exec file -i {} + | grep Regex",
        "text": "print name of all file in home director i and it sub director i recur who be e mime type be video ..",
        "id": 237,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'file', '-', 'i', 'word', 'word', '+', 'word', 'regex', 'find', '{', '}', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 0, 0, 8, 0, 9, 10, 20, 21, 23]]",
            "sibling_edges": "[[8, 1, 10, 2, 3, 4, 5, 6, 7, 21, 23, 12, 15, 18, 20], [1, 23, 2, 3, 4, 5, 6, 7, 20, 8, 9, 13, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 27, 22, 1, 28], [11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 27, 22, 1, 28, 24]]"
        }
    },
    {
        "code": "git -c color.status=always status | less -REX",
        "text": "run specif i git command page through output with raw char act write to term in without init i term in cap a bl and auto mat exit when end of output be reach ..",
        "id": 238,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'c', 'color', '.', 'status', '=', 'always', 'status', 'word', '-', 'r', 'ex', 'git', 'le']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 4, 0, 5, 5, 5, 6, 15]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 15, 7, 9, 10, 11, 12, 16, 17], [1, 15, 2, 3, 4, 5, 8, 10, 11, 12, 13, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 7, 8, 9, 10, 11, 12, 13, 14, 1, 20, 16, 17], [7, 8, 9, 10, 11, 12, 13, 14, 1, 20, 16, 17, 18]]"
        }
    },
    {
        "code": "find ../D44203 -iname 2.jpg | while read fn; do name=$(basename $fn) ; dir=$(dirname $fn) ; mv $fn $dir/$(basename $(pwd))-$name ;done",
        "text": "r en be all regex file under file by append present work director i name at begin of name ..",
        "id": 239,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'while', ';', 'word', '.', '.', '/', 'd', '<number>', '-', 'i', 'name', '<number>', '.', 'jpg', 'word', 'do', ';', ';', ';', 'done', 'find', 'word', 'fn', 'variable_name', '=', 'variable_name', '=', 'read', 'name', '$(', ')', 'dir', '$(', ')', 'word', '$', 'variable_name', 'word', 'word', 'mv', 'fn', '$', 'variable_name', '/', '$(', ')', '-', '$', 'variable_name', 'word', '$', 'variable_name', 'word', '$', 'variable_name', 'dir', 'name', 'base', 'name', 'fn', 'dir', 'name', 'fn', 'word', '$(', ')', 'base', 'name', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 0, 0, 0, 0, 0, 0, 7, 0, 19, 0, 0, 0, 0, 26, 28, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 39, 41, 0, 0, 42, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 47, 53, 54, 54, 56, 57, 57, 59, 0, 0, 0, 68, 68, 0, 73]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 5, 19, 6, 8, 9, 10, 11, 13, 14, 16, 17, 26, 20, 35, 21, 38, 22, 53, 23, 28, 29, 30, 31, 39, 41, 34, 56, 37, 59, 40, 47, 42, 50, 43, 54, 57, 46, 49, 70, 52, 55, 58, 68, 62, 65, 69, 73, 71], [1, 5, 2, 3, 4, 26, 6, 20, 9, 10, 11, 12, 14, 15, 17, 18, 19, 28, 21, 30, 22, 39, 23, 24, 29, 34, 31, 37, 40, 46, 54, 35, 57, 38, 41, 42, 49, 43, 52, 55, 58, 47, 68, 50, 53, 56, 59, 69, 63, 66, 73, 70, 72]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 5, 32, 27, 6, 20, 33, 29, 34, 62, 63, 55, 64, 35, 21, 36, 31, 37, 65, 66, 58, 67, 38, 22, 44, 40, 45, 46, 60, 48, 49, 71, 72, 69, 74, 70, 50, 51, 52, 61, 23], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 5, 32, 27, 6, 20, 33, 29, 34, 62, 63, 55, 64, 35, 21, 36, 31, 37, 65, 66, 58, 67, 38, 22, 44, 40, 45, 46, 60, 48, 49, 71, 72, 69, 74, 70, 50, 51, 52, 61, 23, 24]]"
        }
    },
    {
        "code": "find Path -size +Size -print",
        "text": "show list of file large than size ..",
        "id": 240,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9, 11], [1, 2, 3, 4, 8, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec grep -i -l Regex {} \\;",
        "text": "search case in sen it for regex in all file with file ext en under current director i tree and show on li file name ..",
        "id": 241,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'i', '-', 'l', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 0, 0, 11, 11, 12, 28, 29]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 14, 17, 20, 23, 25, 28, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 28, 11, 15, 18, 21, 24, 26, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 30], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 30, 31]]"
        }
    },
    {
        "code": "find . ! -name . -prune -exec sh -c mv '$@' targetdirectory/ sh {} +",
        "text": "move all file from current director i to regex ..",
        "id": 242,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', '.', '!', '-', 'name', '.', '-', 'prune', '-', 'exec', 'sh', '-', 'c', 'mv', \"'\", '$', '@', \"'\", 'target', 'directory', '/', 'sh', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 10, 10, 11, 11, 11, 12, 0, 0, 13, 14, 36, 37]]",
            "sibling_edges": "[[14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 37, 17, 20, 22, 25, 28, 29, 30, 32, 33, 36], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 36, 13, 18, 21, 23, 26, 29, 30, 31, 33, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 38]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "list all regular file under director i regex ..",
        "id": 243,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "grep --exclude-dir Directory -r -n -w Regex -e Regex",
        "text": "find recur all file in directory excl ud folder regex regex and all like file that contain regex and print match string with string number and file name ..",
        "id": 244,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '--', 'exclude', '-', 'dir', 'directory', '-', 'r', '-', 'n', '-', 'w', 'regex', '-', 'e', 'regex', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 17, 19, 22], [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 16, 18, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "hostname",
        "text": "run regex with an environ v aria bl regex set to system ho tn be ..",
        "id": 245,
        "graph": {
            "nodes": "['word', 'host', 'name']",
            "base_edges": "[[1, 2], [0, 0]]",
            "sibling_edges": "[[1], [2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1], [2]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} rm {}",
        "text": "find all file file on system start from directory and de let them ..",
        "id": 246,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 0, 0, 7, 12, 12, 15, 16, 18, 19]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 16, 6, 9, 13, 15, 18, 21], [1, 12, 2, 3, 4, 5, 15, 6, 18, 10, 14, 16, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 1, 21, 22, 13, 14, 23, 24, 17, 25], [8, 9, 10, 11, 1, 21, 22, 13, 14, 23, 24, 17, 25, 26]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} md5sum {}",
        "text": "find all file under file and cal cu l regex ..",
        "id": 247,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'md', '<number>', 'sum', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 8, 8, 0, 0, 9, 17, 17, 22, 23, 27, 28]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 17, 6, 7, 23, 8, 11, 14, 15, 18, 20, 22, 24, 25, 27, 30], [1, 17, 2, 3, 4, 5, 6, 7, 22, 8, 27, 12, 15, 16, 19, 21, 23, 25, 26, 28, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 10, 11, 12, 13, 14, 15, 16, 1, 30, 31, 18, 19, 20, 21, 32, 33, 24, 25, 26, 34], [10, 11, 12, 13, 14, 15, 16, 1, 30, 31, 18, 19, 20, 21, 32, 33, 24, 25, 26, 34, 35]]"
        }
    },
    {
        "code": "find Path -type d -exec touch File \\;",
        "text": "c re at an e mp ti file in each director i under current one up dat timestamp of al read i exist file file ..",
        "id": 248,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'touch', 'file', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 13, 17], [1, 2, 3, 4, 5, 6, 7, 11, 14, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "top -p $(pgrep --oldest ProgramName)",
        "text": "use regex to monitor old inst an c of program n be ..",
        "id": 249,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'p', '$(', ')', 'top', 'word', 'word', 'word', '--', 'old', 'program', 'name', 'p', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 8, 8, 9, 9, 10, 10]]",
            "sibling_edges": "[[2, 1, 3, 5, 9, 10, 8, 11, 13, 15], [1, 5, 4, 10, 6, 8, 9, 12, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 3, 4, 5, 15, 16, 11, 12, 13, 14], [3, 4, 5, 15, 16, 11, 12, 13, 14, 6]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan -name Regex -print",
        "text": "find file file in current director i tree that be mod if i le than time span ago ..",
        "id": 250,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 10, 12, 14, 17], [1, 2, 3, 4, 5, 6, 10, 11, 13, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "df File",
        "text": "print file system disk space u sag of current director i 's file system ..",
        "id": 251,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'df']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -name Regex -exec gunzip {} \\;",
        "text": "find all file archiv in current director i tree and check if be valid ..",
        "id": 252,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'g', 'unzip', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 0, 0, 6, 6, 7, 16, 17]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 17, 9, 12, 14, 16, 18], [1, 2, 3, 4, 5, 16, 6, 10, 13, 15, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18], [8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18, 19]]"
        }
    },
    {
        "code": "find Path -type f -empty -print0 | xargs -0 -I {} rm {}",
        "text": "find all e mp ti file start from current director i and de let them ..",
        "id": 253,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'empty', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 6, 0, 7, 7, 8, 8, 0, 0, 9, 0, 0, 10, 20, 20, 25, 26, 28, 29]]",
            "sibling_edges": "[[6, 1, 10, 2, 3, 4, 5, 20, 7, 8, 26, 9, 12, 15, 17, 18, 21, 23, 25, 28, 31], [1, 20, 2, 3, 4, 5, 6, 7, 8, 25, 9, 28, 13, 16, 18, 19, 22, 24, 26, 29, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 31, 32, 21, 22, 23, 24, 33, 34, 27, 35], [11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 31, 32, 21, 22, 23, 24, 33, 34, 27, 35, 36]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all text file in current folder ..",
        "id": 254,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -H -F -f <( find Path -name Regex -printf '%f\\n' ) {} \\;",
        "text": "find all file file in current folder which be present in pattern text file ..",
        "id": 255,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'h', '-', 'f', '-', 'f', '<(', ')', 'word', 'word', '\\\\', ';', 'find', 'word', 'word', 'word', 'word', 'raw_string', '{', '}', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'f', \"'\", '%', 'f', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 0, 0, 0, 0, 9, 9, 10, 0, 0, 0, 0, 0, 26, 27, 0, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 38]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 25, 27, 12, 15, 18, 20, 22, 24, 35, 26, 28, 38, 31, 32, 33, 34, 40, 43, 44, 46, 47, 48], [1, 2, 3, 4, 5, 6, 7, 8, 24, 26, 9, 13, 16, 19, 21, 23, 38, 25, 27, 29, 31, 32, 33, 34, 35, 41, 44, 45, 47, 48, 49]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 50, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 25, 36, 37, 28], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 50, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 25, 36, 37, 28, 29]]"
        }
    },
    {
        "code": "find Path -links -Quantity -print",
        "text": "search in root director i downward all file which le than number link ..",
        "id": 256,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'link', '-', 'quantity', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9, 11], [1, 2, 3, 4, 8, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "echo $(/usr/sbin/arp $(hostname) | awk -F[()] {print $2})",
        "text": "print ip address of current host ..",
        "id": 257,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'echo', '|', 'word', '$(', ')', 'word', 'word', 'word', '$', 'number', 'word', '/', 'us', 'r', '/', 's', 'bin', '/', 'arp', 'a', 'wk', '-', 'f', '[', '(', 'word', '<number>', '}', 'word', ')', ']', '{', 'print', 'host', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 10, 10, 11, 0, 0, 13, 14, 0, 29, 29, 29, 29, 32, 32]]",
            "sibling_edges": "[[1, 2, 14, 8, 5, 6, 9, 12, 7, 32, 10, 11, 29, 13, 15, 16, 17, 18, 19, 20, 21, 23, 25, 28, 33, 34, 35, 37], [2, 6, 3, 5, 9, 7, 10, 13, 32, 8, 11, 28, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 34, 35, 36, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 15, 16, 17, 18, 19, 20, 21, 22, 7, 37, 38, 8, 5, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 12, 30, 31], [2, 15, 16, 17, 18, 19, 20, 21, 22, 7, 37, 38, 8, 5, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 12, 30, 31, 3]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -mindepth Quantity -type d",
        "text": "find all director i in maximum number level down file director i ..",
        "id": 258,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'min', 'depth', 'quantity', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 14, 15, 18], [1, 2, 3, 4, 5, 6, 7, 11, 12, 15, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "find Path -type f -mtime Timespan -exec rm {} +",
        "text": "r emo v all regular file from current director i tree that be mod if i time span ago ..",
        "id": 259,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'm', 'time', 'timespan', '-', 'exec', 'rm', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 0, 0, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 14, 15, 18, 21], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 15, 16, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 23]]"
        }
    },
    {
        "code": "find Path -type f -regex Regex -exec rm -r -f {} \\;",
        "text": "r emo v file file from current director i who be e name match regular express file ..",
        "id": 260,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'regex', 'regex', '-', 'exec', 'rm', '-', 'r', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 0, 0, 10, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 13, 16, 19, 22, 24, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 14, 17, 20, 23, 25, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28, 29]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} grep Regex {}",
        "text": "find all file file under and below current director i that contain regex ..",
        "id": 261,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 0, 0, 8, 13, 13, 16, 17, 20, 21]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 17, 6, 7, 10, 14, 16, 20, 23], [1, 13, 2, 3, 4, 5, 16, 6, 7, 20, 11, 15, 17, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 19, 27], [9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 19, 27, 28]]"
        }
    },
    {
        "code": "dirname $( readlink File )",
        "text": "save director i of full path to current script in v aria bl regex ..",
        "id": 262,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'dir', 'name', 'word', 'word', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 1, 0, 0, 6, 7, 7]]",
            "sibling_edges": "[[1, 2, 6, 4, 7, 9], [2, 7, 3, 5, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 2, 9, 10, 8], [5, 2, 9, 10, 8, 3]]"
        }
    },
    {
        "code": "grep -v Regex File | grep -v Regex | more",
        "text": "display content of file regex excl ud line start with regex or file line wait for user interact after each page ..",
        "id": 263,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'v', 'regex', 'file', 'word', '-', 'v', 'regex', 'word', 'grep', 'grep', 'more']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 0, 6, 6, 7, 0, 8, 13, 17]]",
            "sibling_edges": "[[5, 1, 7, 2, 8, 3, 4, 13, 6, 9, 14], [1, 13, 2, 17, 3, 4, 5, 6, 7, 10, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 9, 10, 11, 12, 1, 19, 14, 15, 16, 2], [9, 10, 11, 12, 1, 19, 14, 15, 16, 2, 20]]"
        }
    },
    {
        "code": "touch File",
        "text": "make sure file file exist in current director i up dat it timestamp to current file ..",
        "id": 264,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'touch']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "rsync -a -v --ignore-existing File File",
        "text": "archiv regex to regex without over writ exist file in regex ..",
        "id": 265,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'v', '--', 'ignore', '-', 'exist', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 6, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 9, 11, 12, 13, 17], [1, 2, 3, 4, 5, 8, 10, 12, 13, 14, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 15], [18, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -name Regex -exec wc -l {} \\;",
        "text": "display number of line in all file file in current folder ..",
        "id": 266,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'wc', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -size -Size -exec rm {} \\;",
        "text": "f orc de let all file file in current director i which be le than size and not search in sub director i ..",
        "id": 267,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'size', '-', 'size', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 0, 0, 10, 10, 11, 27, 28]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 13, 14, 17, 20, 22, 24, 27, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 10, 14, 15, 18, 21, 23, 25, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 29], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 29, 30]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -n Quantity -P Quantity -I {} gzip -9 {}",
        "text": "compress all file under file director i tree use g zip with best compress method ..",
        "id": 268,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'n', 'quantity', '-', 'p', 'quantity', '-', 'i', 'word', 'word', 'g', 'zip', '-', '<number>', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 8, 9, 9, 10, 11, 11, 0, 0, 12, 12, 13, 13, 0, 0, 14, 22, 22, 33, 34, 39, 40]]",
            "sibling_edges": "[[5, 1, 14, 2, 3, 4, 22, 6, 7, 8, 9, 10, 11, 34, 12, 13, 16, 19, 20, 23, 25, 28, 31, 33, 35, 37, 39, 42], [1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 33, 12, 13, 39, 17, 20, 21, 24, 26, 29, 32, 34, 36, 38, 40, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 15, 16, 17, 18, 19, 20, 21, 1, 42, 43, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 44, 45, 35, 36, 37, 38, 46], [15, 16, 17, 18, 19, 20, 21, 1, 42, 43, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 44, 45, 35, 36, 37, 38, 46, 47]]"
        }
    },
    {
        "code": "{ time sleep 1; } 2>&1 | grep real",
        "text": "find real time report in a regex command exe cut statist ..",
        "id": 269,
        "graph": {
            "nodes": "['pipeline', '|', 'word', '{', ';', '}', 'file_descriptor', '>&', 'number', 'word', 'real', 'word', 'number', '<number>', '<number>', 'grep', 'word', 'sleep', '<number>', 'time']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 8, 9, 0, 11, 12, 16]]",
            "sibling_edges": "[[8, 1, 5, 9, 3, 12, 4, 6, 7, 16, 11], [1, 9, 6, 2, 16, 4, 5, 7, 8, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 19, 17, 18, 4, 5, 13, 7, 14, 1, 15], [19, 17, 18, 4, 5, 13, 7, 14, 1, 15, 10]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan",
        "text": "find all file re id in file or below that be last c hang at least time span ago ..",
        "id": 270,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "rsync -a -q -z File File",
        "text": "archiv regex to file suppress non error me sag and compress data du re trans miss ..",
        "id": 271,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'q', '-', 'z', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 9, 11, 15], [1, 2, 3, 4, 5, 8, 10, 12, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 16, 7, 8, 9, 10, 11, 12, 13], [16, 7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "comm -1 -2 <( grep -r -l Regex File | sort ) <( grep -r -l Regex File | sort )",
        "text": "print all file contain regex and regex in current director i tree ..",
        "id": 272,
        "graph": {
            "nodes": "['command', 'number', 'number', 'word', '-', '<number>', '-', '<number>', '<(', ')', '<(', ')', 'comm', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'l', 'regex', 'file', 'word', 'word', '-', 'r', '-', 'l', 'regex', 'file', 'word', 'grep', 'sort', 'grep', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 16, 16, 17, 18, 0, 0, 19, 19, 20, 20, 21, 22, 0, 23, 30, 31, 38]]",
            "sibling_edges": "[[3, 1, 2, 9, 4, 6, 8, 30, 10, 38, 18, 13, 22, 14, 23, 15, 16, 17, 31, 19, 20, 21, 24, 26, 32, 34], [1, 2, 8, 10, 5, 7, 23, 9, 31, 11, 13, 30, 14, 38, 15, 16, 17, 18, 19, 20, 21, 22, 25, 27, 33, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 4, 5, 6, 7, 8, 39, 24, 25, 26, 27, 28, 29, 13, 40, 9, 10, 41, 32, 33, 34, 35, 36, 37, 14, 42], [4, 5, 6, 7, 8, 39, 24, 25, 26, 27, 28, 29, 13, 40, 9, 10, 41, 32, 33, 34, 35, 36, 37, 14, 42, 11]]"
        }
    },
    {
        "code": "cut -d Regex -f Number",
        "text": "print second section of space se par data come from std in ..",
        "id": 273,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 9], [1, 2, 3, 4, 7, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -r -I {} ls -l -r -t {} | awk Program",
        "text": "list all file file and director i under directory director i ..",
        "id": 274,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'r', '-', 'i', 'word', 'word', 'ls', '-', 'l', '-', 'r', '-', 't', 'word', 'word', 'word', 'program', 'find', 'x', 'arg', '{', '}', '{', '}', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 10, 10, 11, 11, 0, 0, 0, 12, 13, 18, 18, 23, 24, 32, 33, 34, 34]]",
            "sibling_edges": "[[5, 1, 33, 2, 13, 3, 4, 18, 6, 7, 24, 8, 9, 10, 11, 34, 15, 19, 21, 23, 26, 28, 30, 32, 37, 43], [1, 18, 2, 34, 3, 4, 5, 6, 7, 23, 8, 9, 10, 11, 32, 12, 16, 20, 22, 24, 27, 29, 31, 33, 38, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 14, 15, 16, 17, 1, 37, 38, 19, 20, 21, 22, 39, 40, 25, 26, 27, 28, 29, 30, 31, 41, 42, 2, 43, 44], [14, 15, 16, 17, 1, 37, 38, 19, 20, 21, 22, 39, 40, 25, 26, 27, 28, 29, 30, 31, 41, 42, 2, 43, 44, 35]]"
        }
    },
    {
        "code": "watch -n Quantity du -s File",
        "text": "exe cut regex ever i time span ..",
        "id": 275,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', 'du', '-', 's', 'file', 'watch']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 11], [1, 2, 3, 4, 5, 8, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "ls | grep Regex | nl",
        "text": "search for file n be match regex in current director i and number output ..",
        "id": 276,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'regex', 'word', 'ls', 'grep', 'nl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 0, 3, 0, 4, 5, 7]]",
            "sibling_edges": "[[4, 1, 3, 2, 5], [1, 5, 2, 7, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 1, 9, 6, 2], [1, 9, 6, 2, 10]]"
        }
    },
    {
        "code": "rsync File File File",
        "text": "run r sync with option specif i by v aria bl opt cop i director i specif i by v aria bl find and to d in specif i by v aria bl backup dir ..",
        "id": 277,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'file', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 8], [1, 2, 3, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 9, 5, 6], [9, 5, 6, 7]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -i -n Regex {} + | grep Regex | cut -d Regex -f Number | uniq",
        "text": "find all file file in current folder and search for multi pl pattern in t he be e file and display file name ..",
        "id": 278,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'i', '-', 'n', 'regex', 'word', 'word', '+', 'word', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'find', '{', '}', 'grep', 'cut', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 11, 0, 0, 12, 0, 13, 0, 14, 14, 15, 16, 16, 17, 0, 18, 31, 32, 34, 36, 43, 43]]",
            "sibling_edges": "[[12, 1, 13, 2, 17, 3, 18, 4, 5, 6, 7, 8, 9, 10, 11, 32, 34, 36, 14, 15, 16, 20, 23, 26, 28, 31, 37, 40, 49], [1, 34, 2, 36, 3, 43, 4, 5, 6, 7, 8, 9, 10, 11, 31, 12, 13, 14, 15, 16, 17, 21, 24, 27, 29, 32, 38, 41, 50]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[44, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 45, 46, 33, 1, 47, 35, 2, 48, 37, 38, 39, 40, 41, 42, 3, 49], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 45, 46, 33, 1, 47, 35, 2, 48, 37, 38, 39, 40, 41, 42, 3, 49, 50]]"
        }
    },
    {
        "code": "find . -name *.c -o -name *.cpp -o -name *.h -o -name *.hpp > cscope.files",
        "text": "find all file regex regex file in current director i and save output name to a not h file ..",
        "id": 279,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '>', 'word', 'word', '.', '-', 'name', '*', '.', 'c', '-', 'o', '-', 'name', '*', '.', 'cpp', '-', 'o', '-', 'name', '*', '.', 'h', '-', 'o', '-', 'name', '*', '.', 'hp', 'p', 'c', 'scope', '.', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 14, 14, 14, 14, 15]]",
            "sibling_edges": "[[12, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 17, 19, 20, 22, 24, 26, 27, 29, 31, 33, 34, 36, 38, 40, 41, 42, 44, 45, 46], [13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 18, 20, 21, 23, 25, 27, 28, 30, 32, 34, 35, 37, 39, 41, 42, 43, 45, 46, 47]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[48, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 13, 44, 45, 46], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 13, 44, 45, 46, 47]]"
        }
    },
    {
        "code": "find Path -type f",
        "text": "find all regular file in folder main director i ..",
        "id": 280,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -path Regex -print Path",
        "text": "find file which full path name be file under file director i and print ..",
        "id": 281,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', '-', 'print', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "mount Regex -o remount,suid Regex",
        "text": "remount file with permission flag set ..",
        "id": 282,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'regex', '-', 'o', 'remount', ',', 's', 'uid', 'regex', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9, 10, 11], [1, 2, 3, 4, 8, 10, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "grep Regex $( uname -r )",
        "text": "look for an i inst an c of regex in current kernel 's compile ti m config file ..",
        "id": 283,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', '$(', ')', 'grep', 'word', 'word', '-', 'r', 'u', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 1, 0, 0, 2, 0, 0, 7, 7, 8, 8]]",
            "sibling_edges": "[[2, 1, 4, 7, 8, 9, 11], [1, 4, 8, 5, 7, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 4, 11, 12, 9, 10], [3, 4, 11, 12, 9, 10, 5]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file and director i name regex under current director i ..",
        "id": 284,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex -exec grep -s Regex {} \\;",
        "text": "search current director i tree for an file file have text regex in it ..",
        "id": 285,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', '-', 'exec', 'grep', '-', 's', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 0, 0, 10, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 13, 16, 17, 20, 23, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 14, 17, 18, 21, 24, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28, 29]]"
        }
    },
    {
        "code": "yum install mysql mysql-server",
        "text": "inst al pack ag regex and regex ..",
        "id": 286,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'install', 'my', 'sql', 'my', 'sql', '-', 'server', 'yum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 8, 9, 10], [1, 2, 3, 7, 9, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 5, 6, 7, 8, 9, 10], [5, 6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -type f | grep -v -P Regex",
        "text": "find recur all regular file in current director i tree not end in file or file ..",
        "id": 287,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'v', '-', 'p', 'regex', 'find', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 6, 7, 8, 13]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 6, 10, 14, 16], [1, 13, 2, 3, 4, 5, 6, 7, 11, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 1, 20, 14, 15, 16, 17], [9, 10, 11, 12, 1, 20, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -size +Size -iname Regex",
        "text": "return list of file name regex that be size or large ..",
        "id": 288,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 10, 12, 13], [1, 2, 3, 4, 5, 9, 11, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex \\) -print0 | xargs -0 -I {} sed -i Program File File {}",
        "text": "r emo v trail white space from all file file file file file file file file file file under current director i ..",
        "id": 289,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', 'program', 'file', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 18, 18, 19, 19, 20, 21, 21, 22, 22, 23, 24, 24, 25, 25, 26, 27, 27, 28, 28, 29, 30, 30, 31, 31, 31, 0, 32, 32, 33, 33, 0, 0, 34, 34, 35, 35, 36, 37, 38, 0, 0, 39, 91, 91, 96, 97, 105, 106]]",
            "sibling_edges": "[[31, 1, 39, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 91, 32, 33, 97, 34, 35, 36, 37, 38, 41, 43, 46, 48, 51, 53, 56, 58, 61, 63, 66, 68, 71, 73, 76, 78, 81, 83, 86, 88, 89, 92, 94, 96, 98, 100, 105, 108], [1, 91, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 96, 34, 35, 36, 37, 38, 105, 42, 44, 47, 49, 52, 54, 57, 59, 62, 64, 67, 69, 72, 74, 77, 79, 82, 84, 87, 89, 90, 93, 95, 97, 99, 101, 106, 109]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[107, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 1, 108, 109, 92, 93, 94, 95, 110, 111, 98, 99, 100, 101, 102, 103, 104, 112], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 1, 108, 109, 92, 93, 94, 95, 110, 111, 98, 99, 100, 101, 102, 103, 104, 112, 113]]"
        }
    },
    {
        "code": "find Path -size +Size -iname Regex",
        "text": "perform a case in sen it search for file file which be great than size in size under directory director i ..",
        "id": 290,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 10, 12, 13], [1, 2, 3, 4, 5, 9, 11, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path | more",
        "text": "list recur all file and director i in file and pas result to regex pager ..",
        "id": 291,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'path', 'word', 'find', 'more']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 2, 0, 3, 5]]",
            "sibling_edges": "[[2, 1, 3], [1, 5, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4, 1], [4, 1, 7]]"
        }
    },
    {
        "code": "git ls-files | xargs -d \\n wc -l",
        "text": "count number of line in each file in a git re posit or i ..",
        "id": 292,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'ls', '-', 'file', 'word', '-', 'd', 'wc', '-', 'l', 'git', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 4, 5, 5, 6, 10, 10]]",
            "sibling_edges": "[[2, 1, 6, 10, 3, 4, 7, 8, 11, 14, 17], [1, 10, 2, 3, 4, 5, 8, 9, 12, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 1, 17, 18, 11, 12, 13, 14], [7, 8, 9, 1, 17, 18, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -depth -name Regex",
        "text": "find all file file in current director i tree ..",
        "id": 293,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'depth', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9], [1, 2, 3, 4, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "date hostname echo Regex | sed Program | tr Regex Regex",
        "text": "save current date system host name and regex with new l in r emo v to v aria bl regex ..",
        "id": 294,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'host', 'name', 'echo', 'regex', 'word', 'program', 'word', 'regex', 'regex', 'date', 's', 'ed', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 0, 6, 0, 7, 8, 9, 14, 14, 16]]",
            "sibling_edges": "[[5, 1, 6, 2, 9, 3, 4, 14, 16, 7, 10, 20], [1, 14, 2, 16, 3, 4, 5, 6, 7, 8, 11, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 10, 11, 12, 13, 1, 20, 21, 15, 2, 22, 17], [10, 11, 12, 13, 1, 20, 21, 15, 2, 22, 17, 18]]"
        }
    },
    {
        "code": "find Path -ctime +Timespan",
        "text": "find file and director i in en ti r file system that meta inform c hang more than time span ago ..",
        "id": 295,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'c', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -mmin -Quantity",
        "text": "find file in current director i tree who be e content be c hang within time span ..",
        "id": 296,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'mm', 'in', '-', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find . -maxdepth 1 -name *.jpg -print -exec convert",
        "text": "exe cut regex command for ever i file file in current director i ..",
        "id": 297,
        "graph": {
            "nodes": "['command', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'max', 'depth', '<number>', '-', 'name', '*', '.', 'jpg', '-', 'print', '-', 'exec', 'convert', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 12, 15, 17, 18, 20, 22], [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 16, 18, 19, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path -print | xargs -I {} grep Regex {}",
        "text": "search for liter string regex in all file under current director i ..",
        "id": 298,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'print', 'word', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 0, 4, 4, 0, 0, 5, 6, 0, 0, 7, 11, 11, 14, 15, 18, 19]]",
            "sibling_edges": "[[3, 1, 7, 2, 11, 4, 15, 5, 6, 9, 12, 14, 18, 21], [1, 11, 2, 3, 4, 14, 5, 6, 18, 10, 13, 15, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 1, 21, 22, 12, 13, 23, 24, 16, 17, 25], [8, 9, 10, 1, 21, 22, 12, 13, 23, 24, 16, 17, 25, 26]]"
        }
    },
    {
        "code": "find Path -ipath Regex -ipath Regex",
        "text": "search for all file with either regex or regex in path name ..",
        "id": 299,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'path', 'regex', '-', 'i', 'path', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12, 13], [1, 2, 3, 4, 5, 9, 10, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -print",
        "text": "find all file which begin with regex or regex from current director i downward and print them ..",
        "id": 300,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "screen -x main -X title blah",
        "text": "c re at a name screen session ..",
        "id": 301,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'x', 'main', '-', 'x', 'title', 'blah', 'screen']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 10], [1, 2, 3, 4, 5, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -iname Regex -type d -exec mv {} File \\;",
        "text": "search for all director i end with file in file system and move them to folder file ..",
        "id": 302,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'type', 'd', '-', 'exec', 'mv', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 9, 9, 10, 22, 23]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 23, 8, 12, 13, 16, 19, 22, 25], [1, 2, 3, 4, 5, 6, 7, 22, 8, 9, 13, 14, 17, 20, 23, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 29, 24, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 29, 24, 25, 26]]"
        }
    },
    {
        "code": "readlink --canonicalize File",
        "text": "save canon path of file in v aria bl regex ..",
        "id": 303,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '--', 'canonical', 'iz', 'e', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 1, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 5, 6, 9], [1, 2, 5, 6, 7, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 4, 5, 6, 7], [10, 4, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "seq -5 10 | xargs printf - - %s | xargs | bc",
        "text": "cal cu l sum of all number from number to number ..",
        "id": 304,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'number', 'number', 'word', 'word', 'word', 'word', 'word', '-', '<number>', '<number>', 'word', 'print', 'f', '-', '-', '%', 's', 'word', 'word', 'seq', 'x', 'arg', 'x', 'arg', 'bc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 6, 6, 7, 8, 9, 9, 0, 0, 10, 14, 14, 21, 21, 22]]",
            "sibling_edges": "[[5, 1, 9, 2, 21, 3, 10, 4, 14, 6, 7, 8, 11, 15, 19, 24, 26], [1, 14, 2, 21, 3, 22, 4, 5, 6, 7, 8, 9, 12, 16, 20, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 11, 12, 13, 1, 24, 25, 15, 16, 17, 18, 19, 20, 2, 26, 27, 3], [11, 12, 13, 1, 24, 25, 15, 16, 17, 18, 19, 20, 2, 26, 27, 3, 28]]"
        }
    },
    {
        "code": "jobs -l | fgrep $! | perl -ne print '$1\\n' if /\\[(\\d+)\\]/",
        "text": "get job number from store pi d ..",
        "id": 305,
        "graph": {
            "nodes": "['program', '|', '|', 'word', 'word', '\\\\', ']', '/', 'word', '-', 'l', 'word', '$', 'special_variable_name', 'word', 'word', 'word', 'raw_string', 'word', 'word', '(', ')', 'job', 'f', 'grep', '!', 'perl', '-', 'ne', 'print', \"'\", '$', '<number>', \"'\", 'if', '/', '\\\\', '[', 'word', '\\\\', 'd', '+']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 3, 3, 3, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 11, 11, 13, 14, 15, 15, 16, 17, 17, 17, 17, 18, 19, 19, 19, 0, 38, 38, 38]]",
            "sibling_edges": "[[13, 4, 1, 2, 21, 8, 11, 14, 19, 5, 6, 9, 12, 15, 16, 17, 18, 20, 38, 23, 27, 30, 31, 32, 35, 36, 39, 40], [2, 1, 11, 14, 3, 4, 12, 15, 20, 6, 7, 10, 13, 16, 17, 18, 19, 38, 21, 24, 28, 31, 32, 33, 36, 37, 40, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 1, 23, 24, 12, 25, 2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 20, 39, 40, 41, 21, 5, 6], [9, 10, 1, 23, 24, 12, 25, 2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 20, 39, 40, 41, 21, 5, 6, 7]]"
        }
    },
    {
        "code": "find /home -type d ! -exec test -e {}/bin ; -print",
        "text": "find all director i under file that do n 't contain a file or director i name file ..",
        "id": 306,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'home', '-', 'type', 'd', '!', '-', 'exec', 'test', '-', 'e', 'word', 'word', 'word', 'word', 'find', '{', '}', '/', 'bin', '-', 'print']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 6, 6, 7, 8, 8, 0, 0, 0, 0, 9, 21, 22, 23, 23, 24, 24]]",
            "sibling_edges": "[[23, 1, 9, 2, 3, 4, 5, 6, 7, 8, 10, 12, 16, 19, 21, 22, 28, 30], [1, 24, 2, 3, 4, 5, 6, 7, 8, 21, 11, 13, 17, 20, 22, 23, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 28, 29, 1, 30], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 28, 29, 1, 30, 31]]"
        }
    },
    {
        "code": "find Path -type d \\( -name Regex -or -name Regex -or -name Regex \\) -prune -or -print",
        "text": "show all director i in current folder excl ud those that be present in sub director i of medium i mag and backup ..",
        "id": 307,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'prune', '-', 'or', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17]]",
            "sibling_edges": "[[17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 22, 24, 27, 29, 32, 34, 37, 39, 41, 43], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 23, 25, 28, 30, 33, 35, 38, 40, 42, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[45, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]]"
        }
    },
    {
        "code": "find Path -type f -iregex Regex",
        "text": "display all file i mag in current folder ..",
        "id": 308,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find . -name *.jpg -exec sh -c mv '$0' '$(basename $(dirname $0))-${0%.JPG}$.jpg' {} ;",
        "text": "r en be all file file to file file under current director i by append p be not director i name at begin of name ..",
        "id": 309,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'raw_string', 'word', '.', '-', 'name', '*', '.', 'jpg', '-', 'exec', 'sh', '-', 'c', 'mv', \"'\", '$', '<number>', \"'\", \"'\", '$', '(', 'base', 'name', '$', '(', 'dir', 'name', '$', '<number>', ')', ')', '-', '$', '{', '<number>', '%', '.', 'jpg', '}', '$', '.', 'jpg', \"'\", 'word', 'word', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 11, 53, 54]]",
            "sibling_edges": "[[54, 11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 16, 18, 21, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 53, 14, 16, 17, 19, 22, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[55, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 1]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} rm {}",
        "text": "r emo v all file who be e name end with regex in file director i tree ..",
        "id": 310,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 0, 0, 7, 12, 12, 15, 16, 18, 19]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 16, 6, 9, 13, 15, 18, 21], [1, 12, 2, 3, 4, 5, 15, 6, 18, 10, 14, 16, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 1, 21, 22, 13, 14, 23, 24, 17, 25], [8, 9, 10, 11, 1, 21, 22, 13, 14, 23, 24, 17, 25, 26]]"
        }
    },
    {
        "code": "gzip -d -c Regex | tar -x -f File -C Directory",
        "text": "decompress and extract file into file ..",
        "id": 311,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', '-', 'c', 'regex', 'word', '-', 'x', '-', 'f', 'file', '-', 'c', 'directory', 'g', 'zip', 'tar']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 0, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 16]]",
            "sibling_edges": "[[4, 1, 10, 2, 3, 16, 5, 6, 7, 8, 11, 13, 17, 19, 22, 25], [1, 16, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 18, 20, 23, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 26, 11, 12, 13, 14, 15, 1, 27, 17, 18, 19, 20, 21, 22, 23], [26, 11, 12, 13, 14, 15, 1, 27, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "echo Regex | read Regex",
        "text": "save regex into v aria bl regex in k sh ..",
        "id": 312,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', 'regex', 'echo', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 2, 0, 3, 4, 6]]",
            "sibling_edges": "[[2, 1, 4, 6], [1, 6, 2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 1, 9], [5, 1, 9, 7]]"
        }
    },
    {
        "code": "ssh -t example.com screen -r",
        "text": "alloc a pseudo term in and exe cut regex on host file ..",
        "id": 313,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 't', 'example', '.', 'com', 'screen', '-', 'r', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 9, 12], [1, 2, 3, 4, 7, 9, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "chown Regex File",
        "text": "c hang owner to regex and group to regex of file ..",
        "id": 314,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find Path -size +Size -ls",
        "text": "list file large than size under file ..",
        "id": 315,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9, 11], [1, 2, 3, 4, 8, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -name Regex -print -exec awk Program {} \\;",
        "text": "run an a wk program on ever i file file find in current director i tree ..",
        "id": 316,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '-', 'exec', 'a', 'wk', 'program', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 0, 0, 8, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 14, 16, 18, 21, 23], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 15, 17, 19, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23, 24]]"
        }
    },
    {
        "code": "df | grep Regex",
        "text": "print file system disk space u sag for file if exist ..",
        "id": 317,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'df', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 0, 2, 3, 4]]",
            "sibling_edges": "[[3, 1, 4], [1, 4, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 1, 7], [1, 7, 5]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
        "text": "recur find all file file in a current folder and r emo v them ..",
        "id": 318,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 0, 0, 9, 17, 17, 22, 23, 25, 26]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 17, 6, 7, 23, 8, 11, 14, 15, 18, 20, 22, 25, 28], [1, 17, 2, 3, 4, 5, 6, 7, 22, 8, 25, 12, 15, 16, 19, 21, 23, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 15, 16, 1, 28, 29, 18, 19, 20, 21, 30, 31, 24, 32], [10, 11, 12, 13, 14, 15, 16, 1, 28, 29, 18, 19, 20, 21, 30, 31, 24, 32, 33]]"
        }
    },
    {
        "code": "find . -type f -not -iwholename *.git* -print0 | xargs -0 perl -pi -e s/ +$//",
        "text": "r emo v trail space from all file under current director i ig nor director i with file in path ..",
        "id": 319,
        "graph": {
            "nodes": "['program', '|', '$', '//', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'not', '-', 'i', 'whole', 'name', '*', '.', 'git', '*', '-', 'print', '<number>', 'word', '-', '<number>', 'perl', '-', 'pi', '-', 'e', 's', '/', '+', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 0, 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 17, 35, 35]]",
            "sibling_edges": "[[16, 10, 1, 2, 17, 4, 5, 6, 7, 8, 9, 35, 11, 12, 13, 14, 15, 19, 22, 24, 25, 26, 28, 29, 30, 32, 33, 36, 39, 41, 43, 47], [2, 1, 35, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 23, 25, 26, 27, 29, 30, 31, 33, 34, 37, 40, 42, 44, 48]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[46, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 1, 47, 48, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 2], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 1, 47, 48, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 2, 3]]"
        }
    },
    {
        "code": "pstree -p",
        "text": "print full process tree with id number of each process ..",
        "id": 320,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'p', 'ps', 'tree']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 1, 1, 2, 2]]",
            "sibling_edges": "[[2, 3, 5], [1, 4, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 6, 3], [6, 3, 4]]"
        }
    },
    {
        "code": "find Path -name Regex -print0",
        "text": "find all file end with file in current folder ..",
        "id": 321,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10, 11], [1, 2, 3, 4, 8, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "source File",
        "text": "exe cut command from regex in current shell ..",
        "id": 322,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'source']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -type f -name Regex | xargs -I {} tar -c -v -f File File {}",
        "text": "find all regular file and c re at file ..",
        "id": 323,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'tar', '-', 'c', '-', 'v', '-', 'f', 'file', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 0, 7, 7, 0, 0, 8, 9, 9, 10, 10, 11, 11, 12, 13, 0, 0, 14, 22, 22, 25, 26, 36, 37]]",
            "sibling_edges": "[[6, 1, 14, 2, 3, 4, 5, 22, 7, 26, 8, 9, 10, 11, 12, 13, 16, 19, 23, 25, 28, 30, 32, 36, 39], [1, 22, 2, 3, 4, 5, 6, 7, 25, 8, 9, 10, 11, 12, 13, 36, 17, 20, 24, 26, 29, 31, 33, 37, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 15, 16, 17, 18, 19, 20, 21, 1, 39, 40, 23, 24, 41, 42, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43], [15, 16, 17, 18, 19, 20, 21, 1, 39, 40, 23, 24, 41, 42, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43, 44]]"
        }
    },
    {
        "code": "chgrp Regex File",
        "text": "c hang group ownership of regex to regex ..",
        "id": 324,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'file', 'chg', 'rp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "yes | command",
        "text": "cont in u send regex to input of regex ..",
        "id": 325,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'yes', 'command']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 0, 2, 3]]",
            "sibling_edges": "[[2, 1], [1, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 1], [1, 5]]"
        }
    },
    {
        "code": "find Path -name Regex -ok rm {} \\;",
        "text": "de let all text file from current folder after user confirm ..",
        "id": 326,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'ok', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    },
    {
        "code": "ls -a -l -d $( which Regex )",
        "text": "list file inform of full path of command regex ..",
        "id": 327,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'a', '-', 'l', '-', 'd', '$(', ')', 'ls', 'word', 'word', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 4, 0, 0, 14, 15]]",
            "sibling_edges": "[[4, 1, 2, 3, 5, 7, 9, 11, 14, 15], [1, 2, 3, 11, 6, 8, 10, 15, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 5, 6, 7, 8, 9, 10, 11, 17, 16], [5, 6, 7, 8, 9, 10, 11, 17, 16, 12]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file and director i name regex in en ti r file system ..",
        "id": 328,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "mount --bind /original/path /new/path",
        "text": "bind mount file on file ..",
        "id": 329,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'bind', '/', 'original', '/', 'path', '/', 'new', '/', 'path', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 8, 9, 11, 12, 13], [1, 2, 3, 6, 8, 9, 10, 12, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 5, 6, 7, 8, 9, 10, 11, 12, 13], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "chown Regex File -R",
        "text": "recur c hang owner of all file in directory to regex ..",
        "id": 330,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'regex', 'file', '-', 'r', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 3, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 7, 9], [1, 2, 3, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "find all file file under current director i ..",
        "id": 331,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -ls | awk Program",
        "text": "list all file and director i under current director i use comma as delimit for differ field in output ..",
        "id": 332,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'path', '-', 'ls', 'word', 'program', 'find', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 3, 3, 0, 4, 5, 9, 9]]",
            "sibling_edges": "[[3, 1, 5, 2, 9, 7, 12], [1, 9, 2, 3, 4, 8, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 1, 12, 13], [6, 7, 8, 1, 12, 13, 10]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity ! -regex Regex ! -regex Regex Path ! -regex Regex -exec grep --color '#define' {} +",
        "text": "search for regex in all file in current director i excl ud backup file regex file file ..",
        "id": 333,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '!', '-', 'regex', 'regex', '!', '-', 'regex', 'regex', 'path', '!', '-', 'regex', 'regex', '-', 'exec', 'grep', '--', 'color', \"'\", '#', 'define', \"'\", 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 17, 17, 17, 0, 0, 18, 19, 47, 48]]",
            "sibling_edges": "[[19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 48, 21, 22, 26, 30, 35, 38, 41, 43, 44, 45, 47], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 47, 18, 22, 23, 27, 31, 36, 39, 42, 44, 45, 46, 48]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[50, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 49]]"
        }
    },
    {
        "code": "rsync -z -v -r --include Regex --exclude Regex File File",
        "text": "cop i all file match file in file to directory compress data du re trans miss ..",
        "id": 334,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'z', '-', 'v', '-', 'r', '--', 'include', 'regex', '--', 'exclude', 'regex', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 9, 10, 10]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 17, 20, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 16, 18, 21, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "mkdir -p Directory Directory",
        "text": "c re at in term i director i file as re qui r and director i regex and regex ..",
        "id": 335,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'p', 'directory', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "read -N Quantity Regex",
        "text": "store n symbol of input into v aria bl regex ..",
        "id": 336,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find <directory_name> -type d -exec sh -c cd {} && [ -d live ] && [ -d test ] && echo 'Deleting test from {}' && rm -rvi test  {} ;",
        "text": "de let all regex director i from all director i under regex that contain director i name regex and regex ..",
        "id": 337,
        "graph": {
            "nodes": "['program', ';', '&&', '&&', 'word', 'word', '&&', 'raw_string', 'word', '-', 'r', 'vi', 'test', 'word', 'word', '&&', '[', ']', 'word', \"'\", 'delete', 'test', 'from', '{', '}', \"'\", 'rm', '{', '}', '[', ']', 'test_operator', 'word', 'echo', '<', 'word', '>', 'word', 'word', 'word', 'word', 'word', 'word', 'test_operator', 'word', '-', 'd', 'test', 'word', 'directory', 'name', '-', 'type', 'd', '-', 'exec', 'sh', '-', 'c', 'cd', 'word', 'word', '-', 'd', 'live', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 5, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 8, 13, 14, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 31, 32, 0, 35, 35, 37, 37, 38, 39, 39, 40, 41, 41, 42, 0, 0, 43, 43, 44, 48, 60, 61]]",
            "sibling_edges": "[[14, 7, 2, 17, 3, 8, 4, 5, 30, 6, 18, 9, 10, 13, 61, 15, 16, 32, 19, 20, 21, 22, 23, 24, 48, 35, 29, 44, 31, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 51, 54, 57, 60, 62], [1, 2, 8, 3, 18, 4, 5, 13, 6, 16, 7, 10, 11, 14, 15, 29, 31, 17, 20, 21, 22, 23, 24, 25, 34, 36, 43, 30, 32, 35, 37, 38, 39, 40, 41, 42, 60, 44, 46, 50, 52, 55, 58, 61, 63]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[65, 34, 49, 50, 36, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 15, 29, 62, 63, 64, 30, 6, 16, 45, 46, 47, 17, 3, 33, 19, 20, 21, 22, 23, 24, 25, 2, 26, 9, 10, 11, 12, 27, 28], [34, 49, 50, 36, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 15, 29, 62, 63, 64, 30, 6, 16, 45, 46, 47, 17, 3, 33, 19, 20, 21, 22, 23, 24, 25, 2, 26, 9, 10, 11, 12, 27, 28, 1]]"
        }
    },
    {
        "code": "find Path -type f -perm -Permission | awk -- Program",
        "text": "find file with number per miss under file and print them with string regex print as first line of output or print regex if no such file be find ..",
        "id": 338,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', '-', 'permission', 'word', '--', 'program', 'find', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 0, 7, 8, 9, 18, 18]]",
            "sibling_edges": "[[6, 1, 9, 2, 3, 4, 5, 18, 7, 11, 14, 16, 22], [1, 18, 2, 3, 4, 5, 6, 7, 8, 12, 15, 17, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 13, 14, 15, 16, 17, 1, 22, 23, 19], [10, 11, 12, 13, 14, 15, 16, 17, 1, 22, 23, 19, 20]]"
        }
    },
    {
        "code": "alias git-root=cd $(git rev-parse --show-cdup)",
        "text": "set alia regex for command regex ..",
        "id": 339,
        "graph": {
            "nodes": "['command', 'word', 'word', 'git', '-', 'root', '=', 'cd', '$(', ')', 'alias', 'word', 'word', 'word', 'rev', '-', 'parse', '--', 'show', '-', 'c', 'dup', 'git']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 1, 1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 11, 11, 11, 12, 12, 12, 12, 12, 13]]",
            "sibling_edges": "[[2, 1, 3, 4, 5, 6, 8, 12, 13, 11, 14, 15, 17, 18, 19, 20], [1, 8, 4, 5, 6, 7, 13, 9, 11, 12, 15, 16, 18, 19, 20, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 3, 4, 5, 6, 7, 8, 22, 14, 15, 16, 17, 18, 19, 20, 21], [3, 4, 5, 6, 7, 8, 22, 14, 15, 16, 17, 18, 19, 20, 21, 9]]"
        }
    },
    {
        "code": "comm -1 -2 <( sort File ) <( sort File )",
        "text": "print on li common string in sort content of file regex and regex ..",
        "id": 340,
        "graph": {
            "nodes": "['command', 'number', 'number', 'word', '-', '<number>', '-', '<number>', '<(', ')', '<(', ')', 'comm', 'word', 'word', 'word', 'file', 'word', 'file', 'sort', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 13, 0, 14, 15, 17]]",
            "sibling_edges": "[[3, 1, 2, 9, 4, 6, 8, 13, 10, 14, 15, 17], [1, 2, 8, 10, 5, 7, 15, 9, 17, 11, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 4, 5, 6, 7, 8, 19, 16, 9, 10, 20, 18], [4, 5, 6, 7, 8, 19, 16, 9, 10, 20, 18, 11]]"
        }
    },
    {
        "code": "find . -type f -execdir bash -c    dest=${1//[0-9]/}   [[ -f $dest ]] || cp -- '$1' '$dest'  _ {} ;",
        "text": "cop i file r emo v digit from file n be not over writ an i exist file ..",
        "id": 341,
        "graph": {
            "nodes": "['program', ';', '||', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'raw_string', 'word', 'word', '.', '-', 'type', 'f', '-', 'exec', 'dir', 'bash', '-', 'c', 'word', 'word', 'word', '-', 'f', '$', 'variable_name', 'word', 'word', 'word', '--', \"'\", '$', '<number>', \"'\", \"'\", '$', 'd', \"'\", '_', 'word', 'word', 'find', 'd', '=', '${', 'variable_name', '//', 'regex', '/', '}', '[', '[', 'd', ']', ']', 'cp', '{', '}', '<number>', '[', '<number>', '-', '<number>', ']']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 0, 0, 14, 25, 25, 0, 0, 0, 0, 0, 0, 26, 27, 31, 32, 33, 34, 45, 46, 51, 53, 53, 53, 53, 53]]",
            "sibling_edges": "[[46, 33, 2, 14, 3, 4, 5, 6, 7, 8, 55, 27, 9, 31, 34, 10, 11, 12, 13, 16, 19, 20, 23, 25, 26, 28, 30, 32, 36, 37, 38, 40, 41, 42, 45, 48, 50, 51, 52, 53, 54, 65, 66, 67, 68], [1, 2, 34, 3, 4, 5, 6, 7, 8, 25, 26, 9, 30, 32, 10, 11, 12, 13, 45, 17, 20, 21, 24, 50, 27, 29, 31, 33, 37, 38, 39, 41, 42, 43, 46, 49, 51, 52, 53, 54, 55, 66, 67, 68, 69]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[47, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 48, 49, 50, 64, 52, 65, 66, 67, 68, 69, 54, 55, 56, 57, 28, 29, 30, 58, 59, 60, 2, 61, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 62, 63], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 48, 49, 50, 64, 52, 65, 66, 67, 68, 69, 54, 55, 56, 57, 28, 29, 30, 58, 59, 60, 2, 61, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 62, 63, 1]]"
        }
    },
    {
        "code": "find Path -newermt Regex",
        "text": "find all file and director i that be mod if i after februari regex under file director i tree ..",
        "id": 342,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'mt', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -depth -name Regex -exec rename Regex {} +",
        "text": "c hang ext en of all file file in folder file to file and not c hang in sub director i ..",
        "id": 343,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'depth', '-', 'name', 'regex', '-', 'exec', 'rename', 'regex', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 0, 0, 8, 9, 20, 21]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 21, 11, 13, 16, 20], [1, 2, 3, 4, 5, 6, 7, 20, 8, 12, 14, 17, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 22]]"
        }
    },
    {
        "code": "find Path -type f -mtime -Timespan -daystart -exec ls -l {} \\;",
        "text": "find all regular file in current folder which be mod if i in time span and display a long list of them ..",
        "id": 344,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'm', 'time', '-', 'timespan', '-', 'day', 'start', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 9, 9, 0, 0, 10, 10, 11, 29, 30]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 30, 13, 16, 17, 19, 21, 22, 24, 27, 29, 31], [1, 2, 3, 4, 5, 6, 7, 8, 9, 29, 10, 14, 17, 18, 20, 22, 23, 25, 28, 30, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 31], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 31, 32]]"
        }
    },
    {
        "code": "find Path -nouser -or -nogroup",
        "text": "find file and director i that no owner or group under file ..",
        "id": 345,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'no', 'user', '-', 'or', '-', 'no', 'group', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 10, 12, 13], [1, 2, 3, 4, 8, 9, 11, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 6, 7, 8, 9, 10, 11, 12, 13], [6, 7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "hostname -I | awk -F Regex Program",
        "text": "print ip address for current host name ..",
        "id": 346,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'i', 'word', '-', 'f', 'regex', 'program', 'host', 'name', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 2, 2, 0, 3, 3, 4, 5, 6, 6, 9, 9]]",
            "sibling_edges": "[[2, 1, 6, 9, 3, 4, 7, 10, 14, 16], [1, 9, 2, 3, 4, 5, 8, 11, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 15, 7, 8, 1, 16, 17, 10, 11, 12], [15, 7, 8, 1, 16, 17, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rename Regex {} \\;",
        "text": "recur search current director i for all file with name end with file c hang to file ..",
        "id": 347,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rename', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 0, 0, 7, 7, 8, 17, 18]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 18, 10, 13, 17, 19], [1, 2, 3, 4, 5, 6, 17, 7, 11, 14, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19], [9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19, 20]]"
        }
    },
    {
        "code": "find /path -iname *.txt | perl -lane $sum += -s $_; END {print $sum}",
        "text": "get disk space use by all file file and director i under file director i ..",
        "id": 348,
        "graph": {
            "nodes": "['program', ';', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'path', '-', 'i', 'name', '*', '.', 'txt', 'word', '-', 'lane', '$', 'variable_name', '+', '=', '-', 's', '$', 'special_variable_name', 'end', '{', 'print', '$', 'variable_name', '}', 'find', 'perl', 'sum', '_', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 4, 5, 5, 5, 0, 6, 6, 0, 0, 7, 7, 8, 8, 0, 0, 9, 10, 11, 0, 0, 12, 13, 22, 26, 32, 37]]",
            "sibling_edges": "[[32, 1, 5, 2, 9, 11, 13, 3, 4, 22, 6, 26, 7, 8, 10, 37, 14, 16, 17, 19, 20, 23, 25, 27, 29, 31, 36], [1, 9, 2, 22, 10, 36, 3, 4, 5, 6, 25, 7, 8, 31, 11, 12, 15, 17, 18, 20, 21, 24, 26, 28, 30, 32, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 14, 15, 16, 17, 18, 19, 20, 21, 2, 40, 23, 24, 25, 41, 27, 28, 29, 30, 31, 42, 1, 33, 34, 35, 36, 43], [14, 15, 16, 17, 18, 19, 20, 21, 2, 40, 23, 24, 25, 41, 27, 28, 29, 30, 31, 42, 1, 33, 34, 35, 36, 43, 38]]"
        }
    },
    {
        "code": "cat File | xargs -I {} dig Regex {}",
        "text": "get domain name from file file and request file dns record for each one ..",
        "id": 349,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'i', 'word', 'word', 'dig', 'regex', 'word', 'word', 'cat', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 5, 0, 0, 6, 8, 8, 11, 12, 15, 16]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 12, 4, 5, 9, 11, 15, 18], [1, 8, 2, 3, 11, 4, 5, 15, 10, 12, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 7, 1, 18, 19, 9, 10, 20, 21, 13, 14, 22], [7, 1, 18, 19, 9, 10, 20, 21, 13, 14, 22, 23]]"
        }
    },
    {
        "code": "find Path -type f ! -perm -Permission -ls",
        "text": "find file under file that be not exe cut by owner ..",
        "id": 350,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '!', '-', 'perm', '-', 'permission', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 14, 16, 18], [1, 2, 3, 4, 5, 6, 7, 11, 15, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -exec grep -q Regex {} \\; -exec grep -q Regex {} \\; -ls",
        "text": "display a long list of file in current folder which word fi ddl in all file in current folder and search for word fi ddl in previous match file ..",
        "id": 351,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'grep', '-', 'q', 'regex', 'word', 'word', '\\\\', ';', '-', 'exec', 'grep', '-', 'q', 'regex', 'word', 'word', '\\\\', ';', '-', 'ls', 'find', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 7, 8, 9, 9, 10, 0, 0, 11, 11, 12, 12, 13, 21, 22, 31, 32]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 22, 6, 7, 8, 9, 10, 32, 11, 15, 18, 21, 23, 25, 28, 31, 33, 35], [1, 2, 3, 4, 5, 21, 6, 7, 8, 9, 10, 31, 11, 12, 16, 19, 22, 24, 26, 29, 32, 34, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 14, 15, 16, 17, 18, 19, 20, 38, 39, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 33, 34, 35], [14, 15, 16, 17, 18, 19, 20, 38, 39, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 33, 34, 35, 36]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -or -name Regex -or -name Regex \\) -exec rm {} \\;",
        "text": "find all tool genus t file file file and core dump file which not re qui r to us t he be e all junk file regex de let from current director i ..",
        "id": 352,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 0, 0, 14, 14, 15, 37, 38]]",
            "sibling_edges": "[[15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 17, 19, 22, 24, 27, 29, 32, 34, 37, 39], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 37, 14, 18, 20, 23, 25, 28, 30, 33, 35, 38, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 39], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 39, 40]]"
        }
    },
    {
        "code": "date -ujf%s $(($(date -jf%T 10:36:10 +%s) - $(date -jf%T 10:33:56 +%s))) +%T",
        "text": "comput differ between number date ..",
        "id": 353,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'ujf', '%', 's', '$((', '))', '+', '%', 't', 'date', '-', '$(', ')', '$(', ')', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'jf', '%', 't', '<number>', ':', '<number>', ':', '<number>', '+', '%', 's', 'word', '-', 'jf', '%', 't', '<number>', ':', '<number>', ':', '<number>', '+', '%', 's', 'date', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 0, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 38]]",
            "sibling_edges": "[[3, 1, 9, 4, 5, 6, 8, 18, 10, 11, 16, 14, 15, 21, 17, 24, 25, 19, 20, 38, 22, 23, 26, 27, 28, 30, 31, 32, 33, 35, 36, 39, 40, 41, 43, 44, 45, 46, 48, 49], [1, 8, 2, 5, 6, 7, 15, 9, 11, 12, 14, 17, 25, 16, 38, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 31, 32, 33, 34, 36, 37, 40, 41, 42, 44, 45, 46, 47, 49, 50]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 4, 5, 6, 7, 8, 15, 51, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 16, 14, 17, 52, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 18, 9, 10, 11], [4, 5, 6, 7, 8, 15, 51, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 16, 14, 17, 52, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 18, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "cp -a File File",
        "text": "cop i file or director i regex from director i regex in current director i to file pre serv ownership and per miss ..",
        "id": 354,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'a', 'file', 'file', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "echo <( true )",
        "text": "print path to pipe c re at for process sub ti tut ..",
        "id": 355,
        "graph": {
            "nodes": "['command', 'word', '<(', ')', 'echo', 'word', 'true']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 0, 5]]",
            "sibling_edges": "[[1, 2, 5], [2, 5, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 6], [2, 6, 3]]"
        }
    },
    {
        "code": "find -L Path -maxdepth Quantity -type l",
        "text": "find all break s ym link in maximum number level down regex director i ..",
        "id": 356,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'l', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 3, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 11, 12, 15], [1, 2, 3, 4, 5, 6, 9, 12, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "split -l Quantity File Regex",
        "text": "split regex into file of at most regex line each with a prefix regex ..",
        "id": 357,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'quantity', 'file', 'regex', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6], [1, 2, 3, 4, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "du -h --max-depth Quantity File | sort -h -r",
        "text": "list each file or director i in current director i prefix by it human read a bl file and sort from large to small ..",
        "id": 358,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'h', '--', 'max', '-', 'depth', 'quantity', 'file', 'word', '-', 'h', '-', 'r', 'du', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 4, 5, 0, 6, 6, 7, 7, 8, 17]]",
            "sibling_edges": "[[5, 1, 8, 2, 3, 4, 17, 6, 9, 11, 12, 13, 18, 20], [1, 17, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 1, 23, 18, 19, 20], [9, 10, 11, 12, 13, 14, 15, 16, 1, 23, 18, 19, 20, 21]]"
        }
    },
    {
        "code": "find -L /target -type l | while read -r file; do echo $file is orphaned; done",
        "text": "search for all link in a folder and display all break link ..",
        "id": 359,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'while', ';', 'word', '-', 'l', '/', 'target', '-', 'type', 'l', 'word', 'word', 'do', ';', 'done', 'find', 'word', '-', 'r', 'file', 'word', 'word', 'read', 'word', '$', 'variable_name', 'be', 'orphan', 'echo', 'file']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 4, 5, 0, 0, 0, 0, 0, 8, 0, 16, 16, 17, 0, 0, 22, 0, 0, 0, 26, 27, 29, 31]]",
            "sibling_edges": "[[5, 1, 8, 2, 3, 4, 6, 17, 7, 9, 11, 13, 22, 16, 18, 27, 19, 23, 29, 31, 26, 30], [1, 6, 2, 3, 4, 5, 22, 7, 18, 10, 12, 14, 16, 17, 29, 19, 20, 24, 30, 26, 27, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 1, 6, 28, 23, 24, 25, 7, 18, 34, 30, 35, 32, 33, 19], [9, 10, 11, 12, 13, 14, 15, 1, 6, 28, 23, 24, 25, 7, 18, 34, 30, 35, 32, 33, 19, 20]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rm -r -f {} +",
        "text": "recur r emo v all file and folder like regex from current folder ..",
        "id": 360,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rm', '-', 'r', '-', 'f', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 0, 0, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 14, 17, 19, 21], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 15, 18, 20, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 23]]"
        }
    },
    {
        "code": "split -l Quantity File",
        "text": "split file into file of at most number line each ..",
        "id": 361,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'l', 'quantity', 'file', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -maxdepth Quantity -name Regex",
        "text": "find password file between sub director i level number and number ..",
        "id": 362,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 14, 15, 18], [1, 2, 3, 4, 5, 6, 7, 11, 12, 15, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "find Path -depth -type f -not -name Regex -and -not -name Regex -and -not -name Regex -exec rm {} +",
        "text": "recur find all file not like file file file in a current folder and r emo v them ..",
        "id": 363,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'depth', '-', 'type', 'f', '-', 'not', '-', 'name', 'regex', '-', 'and', '-', 'not', '-', 'name', 'regex', '-', 'and', '-', 'not', '-', 'name', 'regex', '-', 'exec', 'rm', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 14, 15, 16, 16, 17, 0, 0, 18, 19, 48, 49]]",
            "sibling_edges": "[[19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 49, 21, 23, 26, 28, 31, 33, 35, 38, 40, 42, 45, 48], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 48, 18, 22, 24, 27, 29, 32, 34, 36, 39, 41, 43, 46, 49]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[51, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 50]]"
        }
    },
    {
        "code": "find .. -type d -print0 | xargs -0 tar cf dirstructure.tar --no-recursion",
        "text": "archiv director i str uctu r under regex director i into file ..",
        "id": 364,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', '..', '-', 'type', 'd', '-', 'print', '<number>', 'word', '-', '<number>', 'tar', 'cf', 'dir', 'structure', '.', 'tar', '--', 'no', '-', 'recursion', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 19, 19]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 19, 6, 7, 8, 9, 13, 16, 17, 20, 24, 25, 26, 28, 29, 30, 33], [1, 19, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 18, 21, 25, 26, 27, 29, 30, 31, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 1, 33, 34, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [12, 13, 14, 15, 16, 17, 18, 1, 33, 34, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "TIMEFORMAT=%R && time ls -l",
        "text": "make regex build in to show on li real exe cut time ..",
        "id": 365,
        "graph": {
            "nodes": "['list', '&&', 'variable_name', '=', 'word', 'word', 'word', 'time', 'format', '%', 'r', 'word', 'ls', '-', 'l', 'time']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 0, 5, 6, 6, 11]]",
            "sibling_edges": "[[4, 1, 2, 3, 11, 5, 7, 9, 13], [1, 11, 3, 4, 5, 6, 8, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 3, 9, 10, 1, 15, 12, 13], [8, 3, 9, 10, 1, 15, 12, 13, 14]]"
        }
    },
    {
        "code": "set | sed -n Program",
        "text": "display bash function def init of regex ..",
        "id": 366,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'n', 'program', 'set', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 2, 2, 3, 4, 5, 5]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 10], [1, 5, 2, 3, 7, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 1, 10, 11, 6, 7], [1, 10, 11, 6, 7, 8]]"
        }
    },
    {
        "code": "cat File",
        "text": "print content of file ..",
        "id": 367,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'cat']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "sleep Timespan",
        "text": "sleep for time span ..",
        "id": 368,
        "graph": {
            "nodes": "['command', 'word', 'word', 'timespan', 'sleep']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -type d -name Regex",
        "text": "search for director i regex in en ti r file system ..",
        "id": 369,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find . -iname *.jpg -type f -printf %b\\t%D:%i\\n | sort -u | cut -f1 | paste -sd+ - | bc",
        "text": "find total size of file file within current director i tree ..",
        "id": 370,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'i', 'name', '*', '.', 'jpg', '-', 'type', 'f', '-', 'print', 'f', '%', 'b', '\\\\', 't', '%', 'd', ':', '%', 'i', 'word', '-', 'u', 'word', '-', 'f', '<number>', 'word', '-', 'sd', '+', '-', 'word', 'find', 'sort', 'cut', 'paste', 'bc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 0, 12, 12, 0, 13, 13, 13, 0, 14, 14, 14, 15, 0, 16, 39, 42, 46, 51]]",
            "sibling_edges": "[[11, 1, 12, 2, 13, 3, 15, 4, 16, 5, 6, 7, 8, 9, 10, 39, 42, 46, 14, 18, 19, 21, 22, 24, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 40, 43, 44, 47, 48], [1, 39, 2, 42, 3, 46, 4, 51, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 44, 45, 48, 49]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[52, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 53, 40, 41, 2, 54, 43, 44, 45, 3, 55, 47, 48, 49, 50, 4], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 53, 40, 41, 2, 54, 43, 44, 45, 3, 55, 47, 48, 49, 50, 4, 56]]"
        }
    },
    {
        "code": "find Path -print | grep Regex",
        "text": "find file with name regex in current folder ..",
        "id": 371,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'path', '-', 'print', 'word', 'regex', 'find', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 3, 3, 0, 4, 5, 9]]",
            "sibling_edges": "[[3, 1, 5, 2, 9, 7], [1, 9, 2, 3, 4, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 1, 12], [6, 7, 8, 1, 12, 10]]"
        }
    },
    {
        "code": "rsync --recursive --prune-empty-dirs --include Regex --filter Program File File",
        "text": "recur cop i all file with name end with file from regex to same loc at within regex ..",
        "id": 372,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '--', 'recursive', '--', 'prune', '-', 'empty', '-', 'dir', '--', 'include', 'regex', '--', 'filter', 'program', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 18, 21, 26], [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 19, 22, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 27, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [27, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path \\( -iname Regex -or -iname Regex -or -iname Regex \\) -ls | awk Program",
        "text": "search all file png file file in current folder and cal cu l total size of them ..",
        "id": 373,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'i', 'name', 'regex', '-', 'or', '-', 'i', 'name', 'regex', '-', 'or', '-', 'i', 'name', 'regex', '\\\\', ')', '-', 'ls', 'word', 'program', 'find', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 5, 6, 6, 7, 7, 7, 8, 9, 9, 10, 10, 10, 11, 12, 12, 13, 13, 0, 14, 15, 39, 39]]",
            "sibling_edges": "[[13, 1, 15, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 39, 17, 19, 20, 23, 25, 26, 29, 31, 32, 35, 37, 42], [1, 39, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 20, 21, 24, 26, 27, 30, 32, 33, 36, 38, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 42, 43], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 42, 43, 40]]"
        }
    },
    {
        "code": "head -c Quantity File",
        "text": "print first n byte of file ..",
        "id": 374,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'c', 'quantity', 'file', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type d",
        "text": "find all director i under file ..",
        "id": 375,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "ssh -L Regex -p Regex Regex",
        "text": "setup a local ssh tunnel from port number to regex port number via connect to regex as regex on port number ..",
        "id": 376,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'regex', '-', 'p', 'regex', 'regex', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 10], [1, 2, 3, 4, 5, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "kill - Regex $( jobs -p )",
        "text": "kill all background process ..",
        "id": 377,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'regex', '$(', ')', 'kill', 'word', 'word', '-', 'p', 'job']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 1, 2, 0, 0, 3, 0, 0, 9, 9, 10]]",
            "sibling_edges": "[[3, 1, 2, 6, 9, 10, 11], [1, 2, 6, 10, 7, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 4, 5, 6, 13, 11, 12], [4, 5, 6, 13, 11, 12, 7]]"
        }
    },
    {
        "code": "find Path -type d -mtime +Timespan -exec compress File {} \\;",
        "text": "compress all director i find in regex wherein a file 's data be mod if i within time span ..",
        "id": 378,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'm', 'time', '+', 'timespan', '-', 'exec', 'compress', 'file', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 0, 0, 9, 9, 10, 24, 25]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 25, 12, 15, 16, 18, 20, 24, 26], [1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 13, 16, 17, 19, 21, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26, 27]]"
        }
    },
    {
        "code": "find Path -path Regex -prune -or -print",
        "text": "find file and director i under current director i excl ud path file ..",
        "id": 379,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14, 16], [1, 2, 3, 4, 5, 6, 10, 13, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path $( pwd ) -name Regex -printf '%f\\n'",
        "text": "find all file name file under current work director i tree and print it file n be ..",
        "id": 380,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '$(', ')', '-', 'name', 'regex', '-', 'print', 'f', \"'\", '%', 'f', \"'\", 'find', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 6, 0, 21]]",
            "sibling_edges": "[[6, 1, 9, 2, 3, 4, 8, 21, 10, 13, 14, 16, 17, 18], [1, 8, 2, 3, 4, 5, 21, 9, 11, 14, 15, 17, 18, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 7, 8, 22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [7, 8, 22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -user Regex",
        "text": "find all file in directory director i tree that be own by bob ..",
        "id": 381,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "sed -n Program",
        "text": "de let e mp ti line from standard input ..",
        "id": 382,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'n', 'program', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "gunzip -c Regex | tar -x -v -f File",
        "text": "unzip and un tar file to standard output ..",
        "id": 383,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'c', 'regex', 'word', '-', 'x', '-', 'v', '-', 'f', 'file', 'g', 'unzip', 'tar']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 4, 4, 5, 5, 6, 6, 7, 8, 8, 12]]",
            "sibling_edges": "[[3, 1, 8, 2, 12, 4, 5, 6, 9, 13, 15, 17, 20], [1, 12, 2, 3, 4, 5, 6, 7, 10, 14, 16, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 21, 9, 10, 11, 1, 22, 13, 14, 15, 16, 17, 18], [21, 9, 10, 11, 1, 22, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "cal DateTime DateTime | awk Program",
        "text": "print posit number of day number in fourth line of calendar output for se pt em b number ..",
        "id": 384,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'date', 'time', 'date', 'time', 'word', 'program', 'cal', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 4, 5, 10, 10]]",
            "sibling_edges": "[[3, 1, 5, 2, 10, 6, 8, 13], [1, 10, 2, 3, 4, 7, 9, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 1, 13, 14], [6, 7, 8, 9, 1, 13, 14, 11]]"
        }
    },
    {
        "code": "find /target/path -type f -print0 | xargs -0 your_command_here",
        "text": "exe cut script regex pas all regular file from director i tree file as argument to it ..",
        "id": 385,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', '/', 'target', '/', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', 'your', 'command', 'here', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 7, 8, 19, 19]]",
            "sibling_edges": "[[5, 1, 8, 2, 3, 4, 19, 6, 9, 10, 11, 13, 16, 17, 20, 22, 23, 26], [1, 19, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 17, 18, 21, 23, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 26, 27, 20, 21, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 26, 27, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find -d Path -name Regex -type d -exec rm -r -f {} \\;",
        "text": "search director i tree file for director i who be e name be regex and de let them ..",
        "id": 386,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', 'path', '-', 'name', 'regex', '-', 'type', 'd', '-', 'exec', 'rm', '-', 'r', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 0, 0, 11, 11, 12, 29, 30]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 13, 16, 19, 22, 25, 27, 29, 31], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 11, 14, 17, 20, 23, 26, 28, 30, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 31], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 31, 32]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i file ..",
        "id": 387,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "find Path -iwholename Regex",
        "text": "find all file and director i under current director i tree who be e path match pattern regex ..",
        "id": 388,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'whole', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 8], [1, 2, 3, 7, 8, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -type f -exec md5sum {} +",
        "text": "find regular file under current director i and exe cut an regex command on each one ..",
        "id": 389,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'md', '<number>', 'sum', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 0, 0, 6, 7, 17, 18]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 18, 9, 12, 14, 15, 17], [1, 2, 3, 4, 5, 17, 6, 10, 13, 15, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22], [8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 19]]"
        }
    },
    {
        "code": "od -t x2 -N File File | cut -c Number | grep -E -m Quantity -q Regex",
        "text": "check if regex contain do line end ..",
        "id": 390,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', 'x', '<number>', '-', 'n', 'file', 'file', 'word', '-', 'c', 'number', 'word', '-', 'e', '-', 'm', 'quantity', '-', 'q', 'regex', 'od', 'cut', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 5, 6, 7, 0, 8, 8, 9, 0, 10, 10, 11, 11, 12, 13, 13, 14, 15, 24, 28]]",
            "sibling_edges": "[[7, 1, 9, 2, 15, 3, 4, 5, 6, 24, 8, 28, 10, 11, 12, 13, 16, 18, 20, 25, 29, 31, 34], [1, 24, 2, 28, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 19, 21, 26, 30, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 16, 17, 18, 19, 20, 21, 22, 23, 1, 38, 25, 26, 27, 2, 39, 29, 30, 31, 32, 33, 34, 35], [16, 17, 18, 19, 20, 21, 22, 23, 1, 38, 25, 26, 27, 2, 39, 29, 30, 31, 32, 33, 34, 35, 36]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} grep -l -E Regex {}",
        "text": "find all file under file that match regex file in content ..",
        "id": 391,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', '-', 'l', '-', 'e', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 10, 10, 11, 0, 0, 12, 20, 20, 25, 26, 33, 34]]",
            "sibling_edges": "[[5, 1, 12, 2, 3, 4, 20, 6, 7, 26, 8, 9, 10, 11, 14, 17, 18, 21, 23, 25, 28, 30, 33, 36], [1, 20, 2, 3, 4, 5, 6, 7, 25, 8, 9, 10, 11, 33, 15, 18, 19, 22, 24, 26, 29, 31, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 13, 14, 15, 16, 17, 18, 19, 1, 36, 37, 21, 22, 23, 24, 38, 39, 27, 28, 29, 30, 31, 32, 40], [13, 14, 15, 16, 17, 18, 19, 1, 36, 37, 21, 22, 23, 24, 38, 39, 27, 28, 29, 30, 31, 32, 40, 41]]"
        }
    },
    {
        "code": "readlink -f $( which Regex ) | sed Program",
        "text": "save file home in v aria bl regex ..",
        "id": 392,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '-', 'f', '$(', ')', 'word', 'program', 'read', 'link', 'word', 's', 'ed', 'word', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 4, 4, 0, 9, 9, 0, 13, 16]]",
            "sibling_edges": "[[8, 1, 4, 2, 9, 5, 7, 13, 11, 16, 14], [1, 9, 2, 7, 3, 6, 16, 8, 12, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 5, 6, 7, 18, 17, 8, 1, 14, 15], [12, 5, 6, 7, 18, 17, 8, 1, 14, 15, 10]]"
        }
    },
    {
        "code": "find Path -type d -maxdepth Quantity -mindepth Quantity -exec basename {} \\;",
        "text": "display name of all director i in current folder and not search in sub director i ..",
        "id": 393,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'max', 'depth', 'quantity', '-', 'min', 'depth', 'quantity', '-', 'exec', 'base', 'name', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9, 0, 0, 10, 10, 11, 28, 29]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 29, 13, 16, 17, 20, 21, 24, 26, 28, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 14, 17, 18, 21, 22, 25, 27, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 30], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 30, 31]]"
        }
    },
    {
        "code": "find Path | grep -E -Z Regex | xargs -0 -I {} echo {}",
        "text": "find all file in folder music and display them in a sing l line null se par ..",
        "id": 394,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', 'word', '-', 'e', '-', 'z', 'regex', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'echo', 'word', 'word', 'find', 'grep', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 5, 6, 0, 7, 7, 8, 8, 0, 0, 9, 0, 0, 10, 12, 18, 18, 23, 24, 26, 27]]",
            "sibling_edges": "[[3, 1, 6, 2, 10, 12, 4, 5, 18, 7, 8, 24, 9, 13, 15, 19, 21, 23, 26, 30], [1, 12, 2, 18, 3, 4, 5, 6, 7, 8, 23, 9, 26, 14, 16, 20, 22, 24, 27, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 1, 29, 13, 14, 15, 16, 17, 2, 30, 31, 19, 20, 21, 22, 32, 33, 25, 34], [11, 1, 29, 13, 14, 15, 16, 17, 2, 30, 31, 19, 20, 21, 22, 32, 33, 25, 34, 35]]"
        }
    },
    {
        "code": "find Path -name Regex -print",
        "text": "find all file and director i name regex under current director i tree ..",
        "id": 395,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "$( echo Regex | tr Regex Regex )",
        "text": "convert content of regex v aria bl to low ca ..",
        "id": 396,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', '|', 'word', 'word', 'word', 'word', 'regex', 'word', 'regex', 'regex', 'echo', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 6, 7, 9]]",
            "sibling_edges": "[[1, 6, 4, 3, 7, 9, 5], [7, 2, 3, 9, 4, 5, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 12, 8, 3, 13, 10, 11], [12, 8, 3, 13, 10, 11, 2]]"
        }
    },
    {
        "code": "find Path -mmin -Quantity",
        "text": "find file mod if i in time span start from current director i ..",
        "id": 397,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'mm', 'in', '-', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file under current director i ..",
        "id": 398,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "pushd",
        "text": "exc hang top number director i in dir stack ..",
        "id": 399,
        "graph": {
            "nodes": "['word', 'push', 'd']",
            "base_edges": "[[1, 2], [0, 0]]",
            "sibling_edges": "[[1], [2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1], [2]]"
        }
    },
    {
        "code": "find Path -type f -not -name Regex",
        "text": "find all file who be e file n be not end with file ..",
        "id": 400,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'not', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14], [1, 2, 3, 4, 5, 6, 10, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "chgrp -R Regex File",
        "text": "recur c hang group ownership of every th in regex to regex ..",
        "id": 401,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'chg', 'rp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "read -r Regex",
        "text": "read a line from standard input into v aria bl regex without backslash es cap ..",
        "id": 402,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'r', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
        "text": "r emo v all file file under current director i en ur white space safe ti ..",
        "id": 403,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 0, 0, 9, 17, 17, 22, 23, 25, 26]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 17, 6, 7, 23, 8, 11, 14, 15, 18, 20, 22, 25, 28], [1, 17, 2, 3, 4, 5, 6, 7, 22, 8, 25, 12, 15, 16, 19, 21, 23, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 15, 16, 1, 28, 29, 18, 19, 20, 21, 30, 31, 24, 32], [10, 11, 12, 13, 14, 15, 16, 1, 28, 29, 18, 19, 20, 21, 30, 31, 24, 32, 33]]"
        }
    },
    {
        "code": "ifconfig Regex | awk Program",
        "text": "get ip address of regex network inter fa c ..",
        "id": 404,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', 'program', 'if', 'config', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 2, 0, 3, 4, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 8, 10], [1, 6, 2, 3, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 9, 5, 1, 10, 11], [9, 5, 1, 10, 11, 7]]"
        }
    },
    {
        "code": "split -a Quantity -d -l Quantity File Regex",
        "text": "split file into file of at most number line each with a num er suffix of length number and prefix of regex ..",
        "id": 405,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', 'quantity', '-', 'd', '-', 'l', 'quantity', 'file', 'regex', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 12, 14], [1, 2, 3, 4, 5, 6, 7, 10, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -iname Regex -exec mv {} File \\;",
        "text": "search for all file file in file system and move them to folder file ..",
        "id": 406,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'exec', 'mv', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 0, 0, 6, 7, 7, 8, 17, 18]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 18, 6, 10, 11, 14, 17, 20], [1, 2, 3, 4, 5, 17, 6, 7, 11, 12, 15, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 19, 20], [9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 19, 20, 21]]"
        }
    },
    {
        "code": "find Path -perm Permission -type f -exec ls -l {} \\;",
        "text": "use octal form to find and print detail inform about all regular file in home director i and below that on li group per miss set ..",
        "id": 407,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', '-', 'type', 'f', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -regextype posix-egrep -regex Regex",
        "text": "search current director i tree for file who be e name end in regex or file ..",
        "id": 408,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'type', 'po', 'ix', '-', 'e', 'grep', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 11, 12, 13, 14, 16], [1, 2, 3, 4, 5, 9, 10, 12, 13, 14, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "kill -9 `pgrep -f cps_build`",
        "text": "send sig ki l signal to all process who be e command match regex ..",
        "id": 409,
        "graph": {
            "nodes": "['command', 'number', 'word', '-', '<number>', '`', '`', 'kill', 'word', 'word', 'word', '-', 'f', 'cps', 'build', 'p', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 8, 8, 9, 9, 10, 10]]",
            "sibling_edges": "[[2, 1, 3, 5, 9, 10, 8, 11, 13, 15], [1, 5, 4, 10, 6, 8, 9, 12, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 3, 4, 5, 15, 16, 11, 12, 13, 14], [3, 4, 5, 15, 16, 11, 12, 13, 14, 6]]"
        }
    },
    {
        "code": "head -16482 in.sql | tail -258 > out.sql",
        "text": "extract number line begin from line number of file and save them to file ..",
        "id": 410,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'number', 'word', 'number', 'out', '.', 'sql', 'word', '-', '<number>', 'in', '.', 'sql', 'word', '-', '<number>', 'head', 'tail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 4, 4, 5, 5, 5, 0, 6, 6, 10, 16]]",
            "sibling_edges": "[[6, 5, 1, 2, 10, 4, 16, 7, 8, 11, 13, 14, 17], [2, 1, 16, 3, 4, 5, 6, 8, 9, 12, 14, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 11, 12, 13, 14, 15, 1, 20, 17, 18, 2, 7, 8], [11, 12, 13, 14, 15, 1, 20, 17, 18, 2, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -type f -name Regex | xargs -I {} sed -i Program {}",
        "text": "rep lac all occur r of regex with regex in all regular file with file ext en under current director i tree ..",
        "id": 411,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', 'program', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 0, 7, 7, 0, 0, 8, 8, 9, 9, 10, 0, 0, 11, 19, 19, 22, 23, 29, 30]]",
            "sibling_edges": "[[6, 1, 11, 2, 3, 4, 5, 19, 7, 23, 8, 9, 10, 13, 16, 20, 22, 24, 26, 29, 32], [1, 19, 2, 3, 4, 5, 6, 7, 22, 8, 9, 10, 29, 14, 17, 21, 23, 25, 27, 30, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 1, 32, 33, 20, 21, 34, 35, 24, 25, 26, 27, 28, 36], [12, 13, 14, 15, 16, 17, 18, 1, 32, 33, 20, 21, 34, 35, 24, 25, 26, 27, 28, 36, 37]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} cat {} | wc -l",
        "text": "count all line of all file file in current director i recur ..",
        "id": 412,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'cat', 'word', 'word', 'word', '-', 'l', 'find', 'x', 'arg', '{', '}', '{', '}', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 0, 7, 7, 8, 8, 0, 0, 9, 0, 0, 0, 10, 10, 11, 19, 19, 24, 25, 27, 28, 29]]",
            "sibling_edges": "[[6, 1, 28, 2, 11, 3, 4, 5, 19, 7, 8, 25, 9, 29, 13, 16, 17, 20, 22, 24, 27, 30, 33], [1, 19, 2, 29, 3, 4, 5, 6, 7, 8, 24, 9, 27, 10, 14, 17, 18, 21, 23, 25, 28, 31, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 1, 33, 34, 20, 21, 22, 23, 35, 36, 26, 37, 38, 2, 39, 30], [12, 13, 14, 15, 16, 17, 18, 1, 33, 34, 20, 21, 22, 23, 35, 36, 26, 37, 38, 2, 39, 30, 31]]"
        }
    },
    {
        "code": "find Path -type d -name Regex -ok cp File {} \\;",
        "text": "cop i a file from one folder to all folder in file which an ext en regex ..",
        "id": 413,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', '-', 'ok', 'cp', 'file', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 0, 0, 9, 9, 10, 22, 23]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 23, 12, 15, 18, 22, 24], [1, 2, 3, 4, 5, 6, 7, 8, 22, 9, 13, 16, 19, 23, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24, 25]]"
        }
    },
    {
        "code": "find Path -exec rm {} \\;",
        "text": "de let all file in current director i ..",
        "id": 414,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 1, 2, 2, 3, 0, 0, 4, 4, 5, 10, 11]]",
            "sibling_edges": "[[5, 1, 2, 3, 11, 7, 10, 12], [1, 2, 3, 10, 4, 8, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 15, 16, 12], [6, 7, 8, 9, 15, 16, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file and director i name regex under current director i ..",
        "id": 415,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -size +Size -size -Size",
        "text": "find on li file under file with size of regex ..",
        "id": 416,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'size', '-', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 10, 12, 14], [1, 2, 3, 4, 5, 9, 11, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "cp -a File File File",
        "text": "cop i file and file to directory pre serv all attr i but and cop i s ym link as s ym link without follow in sour c file ..",
        "id": 417,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'a', 'file', 'file', 'file', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6], [1, 2, 3, 4, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
        "text": "c hang per miss of all regular file in current director i regex be use for hand l file with new l in in file name ..",
        "id": 418,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'ch', 'mod', 'permission', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 8, 9, 0, 0, 10, 18, 18, 23, 24, 28, 29]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 18, 6, 7, 24, 8, 9, 12, 15, 16, 19, 21, 23, 25, 28, 31], [1, 18, 2, 3, 4, 5, 6, 7, 23, 8, 9, 28, 13, 16, 17, 20, 22, 24, 26, 29, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 1, 31, 32, 19, 20, 21, 22, 33, 34, 25, 26, 27, 35], [11, 12, 13, 14, 15, 16, 17, 1, 31, 32, 19, 20, 21, 22, 33, 34, 25, 26, 27, 35, 36]]"
        }
    },
    {
        "code": "ls -t -p | grep -v Regex | tail -n +Quantity | tr Regex Regex | xargs -0 -I {} rm -- {}",
        "text": "r emo v all file but number new one from current folder ..",
        "id": 419,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', '-', 't', '-', 'p', 'word', '-', 'v', 'regex', 'word', '-', 'n', '+', 'quantity', 'word', 'regex', 'regex', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', '--', 'word', 'word', 'ls', 'grep', 'tail', 'tr', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 6, 0, 7, 7, 8, 0, 9, 9, 10, 10, 0, 11, 12, 0, 13, 13, 14, 14, 0, 0, 15, 16, 0, 0, 17, 22, 26, 31, 34, 34, 39, 40, 43, 44]]",
            "sibling_edges": "[[6, 1, 8, 2, 10, 3, 12, 4, 17, 5, 22, 7, 26, 9, 31, 11, 34, 13, 14, 40, 15, 16, 18, 20, 23, 27, 29, 35, 37, 39, 43, 49], [1, 22, 2, 26, 3, 31, 4, 34, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 39, 15, 16, 43, 19, 21, 24, 28, 30, 36, 38, 40, 44, 50]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[45, 18, 19, 20, 21, 1, 46, 23, 24, 25, 2, 47, 27, 28, 29, 30, 3, 48, 32, 33, 4, 49, 50, 35, 36, 37, 38, 51, 52, 41, 42, 53], [18, 19, 20, 21, 1, 46, 23, 24, 25, 2, 47, 27, 28, 29, 30, 3, 48, 32, 33, 4, 49, 50, 35, 36, 37, 38, 51, 52, 41, 42, 53, 54]]"
        }
    },
    {
        "code": "find Path -type f | grep -P Regex | xargs -I {} rm {}",
        "text": "r emo v regular file who be e name match perl regular express file from current director i tree ..",
        "id": 420,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'p', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'grep', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 6, 7, 0, 8, 8, 0, 0, 9, 0, 0, 10, 15, 19, 19, 22, 23, 25, 26]]",
            "sibling_edges": "[[5, 1, 7, 2, 10, 3, 4, 15, 6, 19, 8, 23, 9, 12, 16, 20, 22, 25, 29], [1, 15, 2, 19, 3, 4, 5, 6, 7, 8, 22, 9, 25, 13, 17, 21, 23, 26, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 1, 28, 16, 17, 18, 2, 29, 30, 20, 21, 31, 32, 24, 33], [11, 12, 13, 14, 1, 28, 16, 17, 18, 2, 29, 30, 20, 21, 31, 32, 24, 33, 34]]"
        }
    },
    {
        "code": "find -x data -name filepattern-*2009* -print0 | tar --null --no-recursion -uf 2009.tar --files-from -",
        "text": "archiv all regex file and director i under directory into regex ..",
        "id": 421,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'x', 'data', '-', 'name', 'file', 'pattern', '-', '*', '<number>', '*', '-', 'print', '<number>', 'word', '--', 'null', '--', 'no', '-', 'recursion', '-', 'uf', '<number>', '.', 'tar', '--', 'file', '-', 'from', '-', 'find', 'tar']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 0, 7, 7, 8, 8, 8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 13, 28]]",
            "sibling_edges": "[[6, 1, 13, 2, 3, 4, 5, 28, 7, 8, 9, 10, 11, 14, 17, 19, 20, 21, 22, 23, 25, 26, 29, 31, 32, 33, 35, 37, 38, 40, 41, 42], [1, 28, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 18, 20, 21, 22, 23, 24, 26, 27, 30, 32, 33, 34, 36, 38, 39, 41, 42, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[45, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 46, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 46, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} grep -E Regex {}",
        "text": "search for regex in all file file under current director i ..",
        "id": 422,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'e', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 8, 0, 0, 9, 14, 14, 17, 18, 23, 24]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 18, 6, 7, 8, 11, 15, 17, 20, 23, 26], [1, 14, 2, 3, 4, 5, 17, 6, 7, 8, 23, 12, 16, 18, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30], [10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30, 31]]"
        }
    },
    {
        "code": "find Path -type f -name Regex | awk -F Regex Program",
        "text": "find all file file under current director i and print c hang name by append number level of p be not director i name at begin and mod if i actual name to dd nnn format ..",
        "id": 423,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'word', '-', 'f', 'regex', 'program', 'find', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 0, 7, 7, 8, 9, 10, 18, 18]]",
            "sibling_edges": "[[6, 1, 10, 2, 3, 4, 5, 18, 7, 8, 12, 15, 19, 24], [1, 18, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 20, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 11, 12, 13, 14, 15, 16, 17, 1, 24, 25, 19, 20, 21], [11, 12, 13, 14, 15, 16, 17, 1, 24, 25, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -type f -regex Regex",
        "text": "search current director i tree for regular file who be e name end in file or file ..",
        "id": 424,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search system for file file ..",
        "id": 425,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "sort -k Number -k Number -t Regex --stable --unique File",
        "text": "sort regex by first and second regex delimit en tr i output uni qu line and s ta bi l sort ..",
        "id": 426,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'k', 'number', '-', 'k', 'number', '-', 't', 'regex', '--', 'stable', '--', 'unique', 'file', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 11, 14, 17, 20, 22], [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 18, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "unset array[`shuf -i 0-3 -n1`]",
        "text": "unset random one from first number array member ..",
        "id": 427,
        "graph": {
            "nodes": "['unset_command', 'unset', 'variable_name', 'word', 'array', '[', 'word', '`', '`', ']', 'word', 'word', 'word', 'word', '-', 'i', '<number>', '-', '<number>', '-', 'n', '<number>', 'sh', 'uf']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 2, 3, 0, 0, 0, 6, 0, 0, 0, 0, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13]]",
            "sibling_edges": "[[1, 2, 3, 8, 7, 12, 13, 10, 11, 14, 16, 17, 19, 20, 22], [2, 3, 7, 6, 13, 8, 10, 11, 12, 15, 17, 18, 20, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 4, 5, 7, 22, 23, 14, 15, 16, 17, 18, 19, 20, 21, 8], [4, 5, 7, 22, 23, 14, 15, 16, 17, 18, 19, 20, 21, 8, 9]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -or -name Regex -or -name Regex",
        "text": "find all file java script and text file in current folder ..",
        "id": 428,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 20, 22, 25, 27], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 18, 21, 23, 26, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\;",
        "text": "c hang per miss to permission regex for all director i in current director i tree ..",
        "id": 429,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -iname Regex",
        "text": "find all file in current director i with regex in name ..",
        "id": 430,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12, 13], [1, 2, 3, 4, 5, 9, 10, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -mmin Quantity -type f",
        "text": "display all regular file in current folder which be mod if i exact time span be for ..",
        "id": 431,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'mm', 'in', 'quantity', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12], [1, 2, 3, 4, 5, 9, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "awk Program Program Program",
        "text": "display input fi l all on one line ..",
        "id": 432,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'program', 'program', 'program', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 8], [1, 2, 3, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 9, 5, 6], [9, 5, 6, 7]]"
        }
    },
    {
        "code": "uname -s -r -v",
        "text": "display kernel name re lea and version ..",
        "id": 433,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 's', '-', 'r', '-', 'v', 'u', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 9, 11], [1, 2, 3, 6, 8, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 5, 6, 7, 8, 9], [12, 5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} wc -l {}",
        "text": "find recur all python file in current director i tree and count number of line in them ..",
        "id": 434,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'wc', '-', 'l', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 0, 0, 8, 13, 13, 16, 17, 21, 22]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 17, 6, 7, 10, 14, 16, 19, 21, 24], [1, 13, 2, 3, 4, 5, 16, 6, 7, 21, 11, 15, 17, 20, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 11, 12, 1, 24, 25, 14, 15, 26, 27, 18, 19, 20, 28], [9, 10, 11, 12, 1, 24, 25, 14, 15, 26, 27, 18, 19, 20, 28, 29]]"
        }
    },
    {
        "code": "rpm2cpio php-5.1.4-1.esp1.x86_64.rpm | cpio -idmv",
        "text": "extract content of file file ..",
        "id": 435,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'php', '-', '<number>', '.', '<number>', '.', '<number>', '-', '<number>', '.', 'esp', '<number>', '.', 'x', '<number>', '.', 'rpm', 'word', '-', 'id', 'mv', 'rpm', '<number>', 'cp', 'io', 'cp', 'io']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 4, 4, 4, 4, 22, 22]]",
            "sibling_edges": "[[2, 1, 4, 22, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 27, 28, 30], [1, 22, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 28, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 27, 28, 29, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 30, 31, 23, 24], [27, 28, 29, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 30, 31, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -print0 | xargs -0 -I {} rm {}",
        "text": "r emo v all file file in file director i but not in it 's sub director i ..",
        "id": 436,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 0, 0, 11, 23, 23, 28, 29, 31, 32]]",
            "sibling_edges": "[[7, 1, 11, 2, 3, 4, 5, 6, 23, 8, 9, 29, 10, 13, 14, 17, 20, 21, 24, 26, 28, 31, 34], [1, 23, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 31, 14, 15, 18, 21, 22, 25, 27, 29, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 34, 35, 24, 25, 26, 27, 36, 37, 30, 38], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 34, 35, 24, 25, 26, 27, 36, 37, 30, 38, 39]]"
        }
    },
    {
        "code": "chown -R Regex File",
        "text": "recur c hang user and group of all file in file to regex ..",
        "id": 437,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type d -name Regex -delete",
        "text": "search for folder file and r emo v it from folder regex ..",
        "id": 438,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -ctime -Timespan",
        "text": "find all file that be c hang within time span ..",
        "id": 439,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'c', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "read -p Regex -n Quantity",
        "text": "read a sing l char act from standard input with prompt regex ..",
        "id": 440,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'p', 'regex', '-', 'n', 'quantity', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 9], [1, 2, 3, 4, 7, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file and director i that contain string liter regex in name under current director i tree ..",
        "id": 441,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find . -exec printf %s\\t {} ; -exec uuidgen ; | awk -F \\t { sub(/.+\\//,'', $1); print $2, $1 } | sort -k2",
        "text": "genus t u uid for file from current director i tree ..",
        "id": 442,
        "graph": {
            "nodes": "['program', ';', ';', ';', ';', 'word', 'word', 'word', 'word', 'word', '|', 'word', 'word', 'word', 'word', '(', ')', '|', 'word', '.', '-', 'exec', 'print', 'f', '%', 's', '\\\\', 't', 'word', 'word', 'word', 'u', 'uid', 'gen', 'word', '-', 'f', '\\\\', 't', '{', 'sub', 'word', 'word', 'find', '{', '}', '-', 'exec', 'a', 'wk', '$', 'variable_name', 'word', 'word', '$', 'variable_name', '}', 'word', '-', 'k', '<number>', 'word', 'raw_string', 'word', '<number>', 'print', '$', 'variable_name', ',', '<number>', 'sort', '/', '.', '+', '\\\\', '/', '/', ',', \"''\", ',', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 7, 7, 8, 8, 8, 8, 0, 0, 0, 9, 9, 9, 0, 11, 11, 12, 12, 13, 14, 0, 0, 18, 28, 29, 30, 30, 34, 34, 0, 0, 0, 0, 0, 0, 41, 0, 42, 42, 42, 0, 0, 0, 51, 52, 0, 0, 53, 55, 57, 61, 61, 61, 61, 61, 61, 61, 62, 63, 67]]",
            "sibling_edges": "[[29, 1, 9, 2, 10, 14, 3, 16, 4, 18, 5, 6, 7, 8, 30, 34, 11, 12, 13, 15, 51, 41, 17, 20, 22, 24, 25, 26, 28, 31, 32, 35, 37, 63, 52, 53, 55, 57, 46, 48, 50, 67, 54, 58, 59, 61, 62, 66, 71, 72, 73, 74, 75, 76], [1, 30, 2, 10, 34, 3, 15, 4, 52, 5, 6, 7, 8, 28, 9, 11, 12, 13, 14, 61, 16, 17, 57, 21, 23, 25, 26, 27, 29, 32, 33, 36, 38, 50, 66, 54, 41, 42, 47, 49, 51, 53, 55, 59, 60, 62, 63, 67, 72, 73, 74, 75, 76, 77]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 19, 20, 21, 22, 23, 24, 25, 26, 27, 44, 45, 1, 46, 47, 31, 32, 33, 2, 10, 48, 49, 35, 36, 37, 38, 39, 40, 3, 15, 71, 72, 73, 74, 75, 76, 77, 78, 79, 50, 64, 16, 4, 65, 66, 80, 68, 54, 69, 56, 17, 70, 58, 59], [19, 20, 21, 22, 23, 24, 25, 26, 27, 44, 45, 1, 46, 47, 31, 32, 33, 2, 10, 48, 49, 35, 36, 37, 38, 39, 40, 3, 15, 71, 72, 73, 74, 75, 76, 77, 78, 79, 50, 64, 16, 4, 65, 66, 80, 68, 54, 69, 56, 17, 70, 58, 59, 60]]"
        }
    },
    {
        "code": "find Path -user Regex -perm -Permission",
        "text": "find all file and director i that read write exe cut per miss for user and belong to user regex under current director i tree ..",
        "id": 443,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 13], [1, 2, 3, 4, 5, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -type f | xargs -I {} head -v -n Quantity {} | grep -B Quantity -A Quantity -e Regex",
        "text": "search for regex regex in first line of each file under current director i ..",
        "id": 444,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'i', 'word', 'word', 'head', '-', 'v', '-', 'n', 'quantity', 'word', 'word', 'word', '-', 'b', 'quantity', '-', 'a', 'quantity', '-', 'e', 'regex', 'find', 'x', 'arg', '{', '}', '{', '}', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 6, 0, 0, 7, 8, 8, 9, 9, 10, 0, 0, 0, 11, 11, 12, 13, 13, 14, 15, 15, 16, 17, 22, 22, 25, 26, 33, 34, 35]]",
            "sibling_edges": "[[5, 1, 34, 2, 17, 3, 4, 22, 6, 26, 7, 8, 9, 10, 35, 11, 12, 13, 14, 15, 19, 23, 25, 28, 30, 33, 36, 39, 42, 46], [1, 22, 2, 35, 3, 4, 5, 6, 25, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 16, 20, 24, 26, 29, 31, 34, 37, 40, 43, 47]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[45, 18, 19, 20, 21, 1, 46, 47, 23, 24, 48, 49, 27, 28, 29, 30, 31, 32, 50, 51, 2, 52, 36, 37, 38, 39, 40, 41, 42, 43], [18, 19, 20, 21, 1, 46, 47, 23, 24, 48, 49, 27, 28, 29, 30, 31, 32, 50, 51, 2, 52, 36, 37, 38, 39, 40, 41, 42, 43, 44]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file in current folder ..",
        "id": 445,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find . -maxdepth 1 -name *.sql -exec sed -e 's/ , );/1,1);/g' '{}' | /usr/bin/mysql -D ootp ;",
        "text": "find all file file in maximum number level down current director i process it with s ed and send output to a my sql command ..",
        "id": 446,
        "graph": {
            "nodes": "['program', ';', '|', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'raw_string', 'word', 'word', 'word', '.', '-', 'max', 'depth', '<number>', '-', 'name', '*', '.', 'sql', '-', 'exec', 's', 'ed', '-', 'e', \"'s\", '/', ',', ')', ';', '/', '<number>', ',', '<number>', ')', ';', '/', 'g', \"'\", \"'\", '{', '}', \"'\", 'word', '-', 'd', 'ootp', 'find', '/', 'us', 'r', '/', 'bin', '/', 'my', 'sql']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 0, 13, 13, 14, 15, 50, 50, 50, 50, 50, 50, 50, 50]]",
            "sibling_edges": "[[14, 12, 2, 15, 3, 4, 5, 6, 7, 8, 9, 10, 11, 50, 13, 17, 18, 21, 23, 24, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 51, 55, 56, 57, 58, 59, 60, 61], [1, 2, 50, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 22, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 56, 57, 58, 59, 60, 61, 62]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[54, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 2, 55, 56, 57, 58, 59, 60, 61, 62, 51, 52, 53], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 2, 55, 56, 57, 58, 59, 60, 61, 62, 51, 52, 53, 1]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -mmin +Quantity -delete",
        "text": "de let file under regex that match regex in name and be mod if i more than time span ago ..",
        "id": 447,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'mm', 'in', '+', 'quantity', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 14, 17, 18, 20, 22], [1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 18, 19, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "sort -u -o File File",
        "text": "sort a file regex pre serv on li uni qu line and c hang file in p lac ..",
        "id": 448,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'u', '-', 'o', 'file', 'file', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "cal DateTime DateTime | tee File | more",
        "text": "print calendar of date time of number and redirect output to regex file and regex pager tool ..",
        "id": 449,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'date', 'time', 'date', 'time', 'word', 'file', 'word', 'cal', 'tee', 'more']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 0, 5, 0, 6, 11, 13]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 3, 11, 7, 9], [1, 11, 2, 13, 3, 4, 5, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 1, 15, 12, 2], [7, 8, 9, 10, 1, 15, 12, 2, 16]]"
        }
    },
    {
        "code": "find Path -atime -Timespan -amin +Quantity",
        "text": "find file on system access du re time span but not within time span ..",
        "id": 450,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'a', 'time', '-', 'timespan', '-', 'be', 'in', '+', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 11, 13, 14, 16], [1, 2, 3, 4, 5, 9, 10, 12, 14, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find / -type f -name your_pattern 2>/dev/null",
        "text": "find regular file who be e file n be be regex suppress all error me sag ..",
        "id": 451,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', 'file_descriptor', '>', 'word', 'word', '/', '-', 'type', 'f', '-', 'name', 'your', 'pattern', '<number>', '/', 'dev', '/', 'null', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 8, 8, 8, 8, 9]]",
            "sibling_edges": "[[5, 9, 1, 2, 3, 4, 6, 7, 11, 14, 16, 19, 20, 21], [6, 1, 2, 3, 4, 5, 7, 8, 12, 15, 17, 20, 21, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 7, 19, 20, 21], [10, 11, 12, 13, 14, 15, 16, 17, 18, 7, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -uid Regex -uid Regex -type f",
        "text": "find all regular file in current folder which belong to user with user id 's between number and number ..",
        "id": 452,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'uid', 'regex', '-', 'uid', 'regex', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 13, 16], [1, 2, 3, 4, 5, 6, 7, 11, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -name Regex -prune -or -type f -and -perm Permission -print | sed Program | sort | uniq | tr -d Regex | sed Program",
        "text": "find all file under file that be exe cut by owner without descend into hide director i and print p be not director i append with at begin and r emo v all new l in and ..",
        "id": 453,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'type', 'f', '-', 'and', '-', 'perm', 'permission', '-', 'print', 'word', 'program', 'word', 'word', 'word', '-', 'd', 'regex', 'word', 'program', 'find', 's', 'ed', 'sort', 'uni', 'q', 'tr', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 16, 16, 0, 17, 0, 0, 0, 18, 18, 19, 0, 20, 21, 40, 40, 42, 43, 43, 44, 48, 48]]",
            "sibling_edges": "[[16, 1, 17, 2, 42, 3, 43, 4, 19, 5, 21, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 40, 44, 18, 48, 23, 26, 28, 30, 33, 35, 38, 45, 51, 54, 57], [1, 40, 2, 42, 3, 43, 4, 44, 5, 48, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 27, 29, 31, 34, 36, 39, 46, 52, 55, 58]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[50, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 1, 51, 52, 41, 2, 53, 3, 54, 55, 4, 56, 45, 46, 47, 5, 57, 58], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 1, 51, 52, 41, 2, 53, 3, 54, 55, 4, 56, 45, 46, 47, 5, 57, 58, 49]]"
        }
    },
    {
        "code": "echo Regex | od -x -c -b",
        "text": "print a size hex a dec im val u print a bl char act and octal val u of regex ..",
        "id": 454,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'x', '-', 'c', '-', 'b', 'echo', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 5, 5, 6, 8]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 4, 9, 11, 13], [1, 8, 2, 3, 4, 5, 10, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 1, 16, 9, 10, 11, 12, 13], [7, 1, 16, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "/usr/bin/time -f%e ls >/dev/null",
        "text": "use time util to report on li real exe cut time of regex command ..",
        "id": 455,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', '>', 'word', 'word', '-', 'f', '%', 'e', 'ls', '/', 'dev', '/', 'null', '/', 'us', 'r', '/', 'bin', '/', 'time']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5]]",
            "sibling_edges": "[[2, 5, 1, 3, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20], [3, 1, 2, 4, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 16, 17, 18, 19, 20, 21, 6, 7, 8, 9, 10, 3, 11, 12, 13], [16, 17, 18, 19, 20, 21, 6, 7, 8, 9, 10, 3, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -and -type d \\)",
        "text": "find director i name file in file and below ..",
        "id": 456,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'and', '-', 'type', 'd', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 13, 16, 18, 21], [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 17, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} +",
        "text": "c hang per miss of all regular file in current folder ..",
        "id": 457,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 20]]"
        }
    },
    {
        "code": "find Path -cmin -Quantity | head",
        "text": "find all file which be c hang in time span in en ti r file system and show a few line of output from begin ..",
        "id": 458,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'path', '-', 'cm', 'in', '-', 'quantity', 'word', 'find', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 0, 5, 12]]",
            "sibling_edges": "[[4, 1, 5, 2, 3, 7, 8, 10], [1, 12, 2, 3, 4, 8, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11, 1], [6, 7, 8, 9, 10, 11, 1, 14]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type d | xargs -I {} mkdir Directory",
        "text": "find all director i in current folder excl ud search in sub director i and c re at t he be e director i in a not h path ..",
        "id": 459,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'd', 'word', '-', 'i', 'word', 'word', 'mk', 'dir', 'directory', 'find', 'x', 'arg', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 0, 7, 7, 0, 0, 8, 8, 9, 10, 19, 19, 22, 23]]",
            "sibling_edges": "[[6, 1, 10, 2, 3, 4, 5, 19, 7, 23, 8, 12, 13, 16, 20, 22, 24, 28], [1, 19, 2, 3, 4, 5, 6, 7, 22, 8, 9, 13, 14, 17, 21, 23, 25, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 1, 28, 29, 20, 21, 30, 31, 24, 25], [11, 12, 13, 14, 15, 16, 17, 18, 1, 28, 29, 20, 21, 30, 31, 24, 25, 26]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i regex ..",
        "id": 460,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec tail -n +Quantity -q File {} + | tee File",
        "text": "find file file recur in current director i print line start on line number to con sol and save to file ..",
        "id": 461,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'tail', '-', 'n', '+', 'quantity', '-', 'q', 'file', 'word', 'word', '+', 'word', 'file', 'find', '{', '}', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12, 0, 0, 13, 0, 14, 15, 33, 34, 36]]",
            "sibling_edges": "[[13, 1, 15, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 34, 36, 17, 20, 23, 26, 28, 30, 33], [1, 36, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 33, 13, 14, 18, 21, 24, 27, 29, 31, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 35, 1, 41], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 35, 1, 41, 37]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file and director i name regex under file ..",
        "id": 462,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -print | sed -e Program | grep Regex | wc -l",
        "text": "count number of regular file in director i tree regex that contain a vowel in name ..",
        "id": 463,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'word', '-', 'e', 'program', 'word', 'regex', 'word', '-', 'l', 'find', 's', 'ed', 'grep', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 0, 8, 8, 9, 0, 10, 0, 11, 11, 12, 19, 19, 23, 25]]",
            "sibling_edges": "[[7, 1, 9, 2, 10, 3, 12, 4, 5, 6, 19, 8, 23, 25, 14, 17, 20, 26, 29], [1, 19, 2, 23, 3, 25, 4, 5, 6, 7, 8, 9, 10, 11, 15, 18, 21, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 13, 14, 15, 16, 17, 18, 1, 29, 30, 20, 21, 22, 2, 31, 24, 3, 32, 26], [13, 14, 15, 16, 17, 18, 1, 29, 30, 20, 21, 22, 2, 31, 24, 3, 32, 26, 27]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod +Permission {} \\;",
        "text": "add regex to per miss of all director i in home director i tree ..",
        "id": 464,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', '+', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 0, 0, 7, 7, 8, 19, 20]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 20, 10, 13, 15, 17, 19, 21], [1, 2, 3, 4, 5, 6, 19, 7, 11, 14, 16, 18, 20, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 21], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 21, 22]]"
        }
    },
    {
        "code": "find Path -type d | paste -d Regex -s",
        "text": "save all director i under current director i as a comma se par list in v aria bl regex ..",
        "id": 465,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', 'word', '-', 'd', 'regex', '-', 's', 'find', 'paste']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 7, 7, 8, 13]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 6, 10, 14, 17], [1, 13, 2, 3, 4, 5, 6, 7, 11, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 1, 20, 14, 15, 16, 17], [9, 10, 11, 12, 1, 20, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "tree",
        "text": "print current director i tree ..",
        "id": 466,
        "graph": {
            "nodes": "['program', 'pipeline', 'command', '|', 'command', 'command_name', 'word', 'word', 'word', 'command_name', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', 'word', '-', 'd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 7, 7, 8, 13]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 6, 10, 14, 17], [1, 13, 2, 3, 4, 5, 6, 7, 11, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 1, 20, 14, 15, 16, 17], [9, 10, 11, 12, 1, 20, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan",
        "text": "display all file in current folder that be mod if i in time span ..",
        "id": 467,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find path/ -name *.log -print0 | xargs -r0 -I {} bash -c grep -q 'string that should not occur' '{}' || echo '{}'",
        "text": "find all file file under directory that not contain regex ..",
        "id": 468,
        "graph": {
            "nodes": "['list', '||', '|', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'raw_string', 'word', \"'\", '{', '}', \"'\", 'word', 'path', '/', '-', 'name', '*', '.', 'log', '-', 'print', '<number>', 'word', '-', 'r', '<number>', '-', 'i', 'word', 'word', 'bash', '-', 'c', 'grep', '-', 'q', \"'\", 'string', 'that', 'should', 'not', 'occur', \"'\", \"'\", '{', '}', \"'\", 'echo', 'find', 'x', 'arg', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 0, 8, 8, 8, 9, 9, 0, 0, 10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 21, 32, 32, 38, 39]]",
            "sibling_edges": "[[15, 1, 7, 2, 16, 21, 4, 5, 6, 32, 8, 9, 39, 10, 11, 12, 13, 14, 17, 18, 19, 22, 24, 26, 27, 29, 30, 33, 34, 36, 38, 41, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 59], [1, 16, 2, 32, 3, 4, 5, 6, 7, 8, 9, 38, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 25, 27, 28, 30, 31, 34, 35, 37, 39, 42, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 60]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[58, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 2, 59, 60, 33, 34, 35, 36, 37, 61, 62, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 1, 57, 17, 18, 19], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 2, 59, 60, 33, 34, 35, 36, 37, 61, 62, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 1, 57, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "find -L Path -name Regex -print0 | xargs -0 -r -I {} rm {}",
        "text": "find all file who be e name end with regex in file director i tree follow s ym link and de let them ..",
        "id": 469,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', '-', 'l', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'r', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 5, 6, 6, 6, 0, 7, 7, 8, 8, 9, 9, 0, 0, 10, 0, 0, 11, 21, 21, 28, 29, 31, 32]]",
            "sibling_edges": "[[6, 1, 11, 2, 3, 4, 5, 21, 7, 8, 9, 29, 10, 12, 15, 18, 19, 22, 24, 26, 28, 31, 34], [1, 21, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 31, 13, 16, 19, 20, 23, 25, 27, 29, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 34, 35, 22, 23, 24, 25, 26, 27, 36, 37, 30, 38], [12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 34, 35, 22, 23, 24, 25, 26, 27, 36, 37, 30, 38, 39]]"
        }
    },
    {
        "code": "find Path -type f | sort",
        "text": "find all file under file and sort them ..",
        "id": 470,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', 'find', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 10]]",
            "sibling_edges": "[[4, 1, 5, 2, 3, 7], [1, 10, 2, 3, 4, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9, 1], [6, 7, 8, 9, 1, 12]]"
        }
    },
    {
        "code": "echo $( cal DateTime DateTime )",
        "text": "save calendar of regex regex in regex v aria bl ..",
        "id": 471,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'echo', 'word', 'word', 'word', 'date', 'time', 'date', 'time', 'cal']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 1, 0, 0, 0, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[1, 2, 6, 7, 5, 8, 10], [2, 7, 3, 5, 6, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 12, 8, 9, 10, 11], [2, 12, 8, 9, 10, 11, 3]]"
        }
    },
    {
        "code": "find . -name *.txt -print0 | xargs -0 process",
        "text": "find all file file and director i under current director i and exe cut process on c with all of them as argument ..",
        "id": 472,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', '.', '-', 'name', '*', '.', 'txt', '-', 'print', '<number>', 'word', '-', '<number>', 'process', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 5, 5, 5, 0, 6, 6, 7, 8, 18, 18]]",
            "sibling_edges": "[[5, 1, 8, 2, 3, 4, 18, 6, 10, 12, 13, 15, 16, 19, 23], [1, 18, 2, 3, 4, 5, 6, 7, 11, 13, 14, 16, 17, 20, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 23, 24, 19, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 23, 24, 19, 20, 21]]"
        }
    },
    {
        "code": "echo Regex | awk Program Program Program Program | od -t x1c",
        "text": "convert regex into char act and print hex a dec im and print a bl char act of each byte ..",
        "id": 473,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', 'program', 'program', 'program', 'program', 'word', '-', 't', 'x', '<number>', 'c', 'echo', 'a', 'wk', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 5, 6, 7, 0, 8, 8, 9, 9, 9, 10, 12, 12, 17]]",
            "sibling_edges": "[[3, 1, 7, 2, 10, 12, 4, 5, 6, 17, 8, 18, 20, 21, 24], [1, 12, 2, 17, 3, 4, 5, 6, 7, 8, 9, 19, 21, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 11, 1, 24, 25, 13, 14, 15, 16, 2, 26, 18, 19, 20, 21], [11, 1, 24, 25, 13, 14, 15, 16, 2, 26, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "fold -b16 | sed s/../& /g",
        "text": "print ever i size of standard input in group of number follow by a space ..",
        "id": 474,
        "graph": {
            "nodes": "['program', '&', '|', 'word', 'word', 'word', 'word', '-', 'b', '<number>', 'word', 's', '/', '.', '.', '/', '/', 'g', 'fold', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 4, 4, 4, 4, 4, 5, 5, 6, 10, 10]]",
            "sibling_edges": "[[4, 1, 3, 2, 6, 10, 7, 8, 11, 12, 13, 14, 16, 19], [1, 5, 2, 10, 3, 4, 8, 9, 12, 13, 14, 15, 17, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 2, 19, 20, 11, 12, 13, 14, 15, 1, 16], [7, 8, 9, 2, 19, 20, 11, 12, 13, 14, 15, 1, 16, 17]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rm {} \\;",
        "text": "r emo v all file file in and below current director i ..",
        "id": 475,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    },
    {
        "code": "watch wc -l <filename>",
        "text": "display line count in regex ever i time span ..",
        "id": 476,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', '<', 'word', '>', 'word', 'word', 'wc', '-', 'l', 'filename', 'watch']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 4, 7]]",
            "sibling_edges": "[[2, 4, 7, 1, 3, 5, 9], [3, 5, 1, 2, 4, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 8, 9, 10, 3, 11, 5], [8, 9, 10, 3, 11, 5, 6]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} rm -r -f {}",
        "text": "recur r emo v all file like file in a current folder ..",
        "id": 477,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', '-', 'r', '-', 'f', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 8, 8, 0, 0, 9, 14, 14, 17, 18, 24, 25]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 18, 6, 7, 8, 11, 15, 17, 20, 22, 24, 27], [1, 14, 2, 3, 4, 5, 17, 6, 7, 8, 24, 12, 16, 18, 21, 23, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 1, 27, 28, 15, 16, 29, 30, 19, 20, 21, 22, 23, 31], [10, 11, 12, 13, 1, 27, 28, 15, 16, 29, 30, 19, 20, 21, 22, 23, 31, 32]]"
        }
    },
    {
        "code": "echo $( date ) Regex",
        "text": "print current date follow by regex ..",
        "id": 478,
        "graph": {
            "nodes": "['command', 'word', 'word', '$(', ')', 'regex', 'echo', 'word', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 1, 2, 0, 7]]",
            "sibling_edges": "[[2, 4, 3, 7], [3, 1, 7, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 8, 4], [3, 8, 4, 5]]"
        }
    },
    {
        "code": "chown Regex File",
        "text": "c hang owner to regex and group to regex of file ..",
        "id": 479,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find . -maxdepth 1 -type d -print0 | (cd /SomeWhere/Else; xargs -0 mkdir)",
        "text": "find all director i in current folder and not search in sub director i and c re at same director i str uctu r in a not h folder ..",
        "id": 480,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'number', 'word', 'word', 'word', '(', ';', ')', 'word', '.', '-', 'max', 'depth', '<number>', '-', 'type', 'd', '-', 'print', '<number>', 'word', 'number', 'word', 'find', 'word', '/', 'somewhere', '/', 'else', 'word', '-', '<number>', 'mk', 'dir', 'cd', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 0, 0, 0, 11, 0, 23, 23, 23, 23, 0, 24, 24, 25, 25, 27, 32, 32]]",
            "sibling_edges": "[[7, 1, 11, 2, 3, 4, 5, 6, 8, 23, 9, 25, 13, 14, 17, 20, 21, 27, 32, 24, 28, 29, 30, 33, 35, 38], [1, 8, 2, 3, 4, 5, 6, 7, 27, 9, 32, 10, 14, 15, 18, 21, 22, 23, 24, 25, 29, 30, 31, 34, 36, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 8, 37, 28, 29, 30, 31, 9, 38, 39, 33, 34, 35, 36], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 8, 37, 28, 29, 30, 31, 9, 38, 39, 33, 34, 35, 36, 10]]"
        }
    },
    {
        "code": "ssh someone@somehost cd /export/home/someone && find . -name '*' -print| xargs -n1 curl -u someone:password ftp://somehost/tmp/ -vT",
        "text": "find all file and director i under file director i in a re mot host and upload file and director i to directory ..",
        "id": 481,
        "graph": {
            "nodes": "['list', '&&', 'word', 'word', 'word', '|', 'word', 'someone', '@', 'some', 'host', 'cd', '/', 'export', '/', 'home', '/', 'someone', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'ssh', 'word', '.', '-', 'name', \"'\", '*', \"'\", '-', 'print', 'word', '-', 'n', '<number>', 'curl', '-', 'u', 'someone', ':', 'password', 'ftp', ':', '/', '/', 'some', 'host', '/', 'tmp', '/', '-', 'v', 't', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 18, 19, 19, 20, 20, 20, 21, 21, 0, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 29, 38, 38]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 21, 5, 7, 8, 9, 12, 13, 14, 15, 16, 29, 18, 19, 20, 38, 22, 23, 24, 25, 26, 31, 33, 34, 36, 39, 40, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61], [1, 29, 2, 3, 4, 5, 38, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 37, 40, 41, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 60, 30, 31, 32, 33, 34, 35, 36, 37, 5, 61, 62, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 60, 30, 31, 32, 33, 34, 35, 36, 37, 5, 61, 62, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]]"
        }
    },
    {
        "code": "find Path -type f -not -name Regex | xargs -I {} rm {}",
        "text": "recur r emo v all file in a regex folder but regex file ..",
        "id": 482,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'not', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 7, 0, 8, 8, 0, 0, 9, 0, 0, 10, 20, 20, 23, 24, 26, 27]]",
            "sibling_edges": "[[7, 1, 10, 2, 3, 4, 5, 6, 20, 8, 24, 9, 12, 15, 17, 21, 23, 26, 29], [1, 20, 2, 3, 4, 5, 6, 7, 8, 23, 9, 26, 13, 16, 18, 22, 24, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 29, 30, 21, 22, 31, 32, 25, 33], [11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 29, 30, 21, 22, 31, 32, 25, 33, 34]]"
        }
    },
    {
        "code": "find Path -type f -printf %P\\\\n | sort | comm -3 File File | xargs -I {} rm {}",
        "text": "r emo v all file except one list in regex ..",
        "id": 483,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'f', '%', 'p', '\\\\', 'word', 'word', '-', '<number>', 'file', 'file', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'sort', 'comm', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 7, 8, 8, 8, 0, 0, 9, 9, 10, 11, 0, 12, 12, 0, 0, 13, 0, 0, 14, 25, 26, 31, 31, 34, 35, 37, 38]]",
            "sibling_edges": "[[8, 1, 25, 2, 11, 3, 14, 4, 5, 6, 7, 26, 9, 10, 31, 12, 35, 13, 16, 19, 20, 22, 23, 27, 32, 34, 37, 42], [1, 25, 2, 26, 3, 31, 4, 5, 6, 7, 8, 9, 10, 11, 12, 34, 13, 37, 17, 20, 21, 23, 24, 28, 33, 35, 38, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 40, 2, 41, 27, 28, 29, 30, 3, 42, 43, 32, 33, 44, 45, 36, 46], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 40, 2, 41, 27, 28, 29, 30, 3, 42, 43, 32, 33, 44, 45, 36, 46, 47]]"
        }
    },
    {
        "code": "yes 1 | command",
        "text": "answer number repeat until regex exit ..",
        "id": 484,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'word', '<number>', 'word', 'yes', 'command']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 2, 0, 3, 5]]",
            "sibling_edges": "[[2, 1, 3], [1, 5, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4, 1], [4, 1, 7]]"
        }
    },
    {
        "code": "sed --in-place Regex Program",
        "text": "de let all line match regex in regex ..",
        "id": 485,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'in', '-', 'place', 'regex', 'program', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 1, 1, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 6, 7, 11], [1, 2, 3, 6, 7, 8, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 5, 6, 7, 8, 9], [12, 5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "yes Regex | head -n Quantity | tr -d Regex",
        "text": "print number regex char act in a row ..",
        "id": 486,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'n', 'quantity', 'word', '-', 'd', 'regex', 'yes', 'head', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 0, 6, 6, 7, 8, 10, 14]]",
            "sibling_edges": "[[3, 1, 5, 2, 8, 10, 4, 14, 6, 11, 15], [1, 10, 2, 14, 3, 4, 5, 6, 7, 12, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 9, 1, 19, 11, 12, 13, 2, 20, 15, 16], [9, 1, 19, 11, 12, 13, 2, 20, 15, 16, 17]]"
        }
    },
    {
        "code": "alias 12np=ssh mydomain\\\\stephencheng@userxyz@host.com",
        "text": "set alia regex for command file ..",
        "id": 487,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '<number>', 'np', '=', 'ssh', 'my', 'domain', '\\\\\\\\', 'step', 'hen', 'ch', 'en', 'g', '@', 'user', 'xy', 'z', '@', 'host', '.', 'com', 'alias']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3]]",
            "sibling_edges": "[[3, 1, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex -exec chmod Permission {} \\;",
        "text": "c hang per miss of all file file in folder directory to number ..",
        "id": 488,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 24, 25]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 25, 12, 15, 16, 19, 21, 24, 26], [1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 13, 16, 17, 20, 22, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26, 27]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "find all file and director i in en ti r file system that regex bite set for either owner group or other ..",
        "id": 489,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec sed --in-place Regex {} +",
        "text": "r emo v trail white spa c from all regular non hide file in current director i tree ..",
        "id": 490,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 's', 'ed', '--', 'in', '-', 'place', 'regex', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 0, 0, 10, 11, 28, 29]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 29, 13, 16, 19, 21, 23, 24, 25, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 14, 17, 20, 22, 24, 25, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 30]]"
        }
    },
    {
        "code": "find . -name '*.jsp' -exec sh -c 'echo '==> $1' >> out.txt; grep TODO $1 >> out.txt' sh {} \\;",
        "text": "search file 's for regex line and append them all to a file with a header show what file come from ..",
        "id": 491,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'raw_string', 'word', 'word', 'word', '>', 'word', 'word', 'word', '.', '-', 'name', \"'\", '*', '.', 'jsp', \"'\", '-', 'exec', 'sh', '-', 'c', 'raw_string', 'word', 'raw_string', 'sh', 'word', 'word', '\\\\', ';', 'find', \"'\", 'echo', \"'\", '=', '=', '$', 'variable_name', \"'\", '>>', 'out', '.', 'txt', ';', 'grep', 'to', 'do', '$', '<number>', '>>', 'out', '.', 'txt', \"'\", '{', '}', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 6, 6, 0, 0, 0, 8, 0, 0, 9, 9, 10, 24, 24, 24, 25, 25, 0, 0, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 28, 29, 39]]",
            "sibling_edges": "[[25, 10, 1, 2, 3, 4, 5, 6, 7, 26, 8, 29, 12, 14, 15, 16, 17, 19, 22, 24, 39, 28, 30, 33, 34, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [7, 1, 2, 3, 4, 5, 6, 24, 38, 8, 28, 9, 13, 15, 16, 17, 18, 20, 23, 25, 26, 29, 31, 34, 35, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 33, 34, 35, 36, 37, 7, 38, 58, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 27, 56, 57, 30], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 33, 34, 35, 36, 37, 7, 38, 58, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 27, 56, 57, 30, 31]]"
        }
    },
    {
        "code": "find <directory_name> -type d -exec sh -c cd {} && [ -d live ] && [ -d test ] && cd ../ && echo 'Deleting {}' && rm -rvi {}  {} ;",
        "text": "de let all director i under regex that contain director i name regex and regex ..",
        "id": 492,
        "graph": {
            "nodes": "['program', ';', '&&', '&&', 'word', '&&', 'raw_string', 'word', '-', 'r', 'vi', 'word', 'word', 'word', 'word', '&&', 'word', 'word', \"'\", 'delete', '{', '}', \"'\", 'rm', '{', '}', '{', '}', '&&', '[', ']', 'word', '.', '.', '/', 'echo', '[', ']', 'test_operator', 'word', 'cd', '<', 'word', '>', 'word', 'word', 'word', 'word', 'word', 'word', 'test_operator', 'word', '-', 'd', 'test', 'word', 'directory', 'name', '-', 'type', 'd', '-', 'exec', 'sh', '-', 'c', 'cd', 'word', 'word', '-', 'd', 'live', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 7, 11, 12, 13, 14, 0, 0, 0, 0, 16, 16, 16, 17, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 38, 39, 0, 42, 42, 44, 44, 45, 46, 46, 47, 48, 48, 49, 0, 0, 50, 50, 51, 55, 67, 68]]",
            "sibling_edges": "[[14, 6, 2, 16, 3, 7, 4, 12, 30, 5, 17, 8, 9, 11, 13, 37, 15, 31, 18, 19, 20, 21, 68, 28, 29, 39, 32, 33, 55, 42, 36, 51, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 58, 61, 64, 67, 69], [1, 2, 7, 3, 17, 4, 11, 13, 5, 31, 6, 9, 10, 12, 14, 15, 29, 16, 19, 20, 21, 22, 28, 36, 38, 30, 33, 34, 41, 43, 50, 37, 39, 42, 44, 45, 46, 47, 48, 49, 67, 51, 53, 57, 59, 62, 65, 68, 70]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[72, 41, 56, 57, 43, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 28, 36, 69, 70, 71, 37, 15, 29, 52, 53, 54, 30, 5, 40, 32, 33, 34, 3, 35, 18, 19, 20, 21, 22, 2, 23, 8, 9, 10, 24, 25, 26, 27], [41, 56, 57, 43, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 28, 36, 69, 70, 71, 37, 15, 29, 52, 53, 54, 30, 5, 40, 32, 33, 34, 3, 35, 18, 19, 20, 21, 22, 2, 23, 8, 9, 10, 24, 25, 26, 27, 1]]"
        }
    },
    {
        "code": "mkdir -p Directory",
        "text": "make director i to regex as need without ca us an error if it exist ..",
        "id": 493,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'p', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "find Path Path -name Regex",
        "text": "search director i tree file and file for file who be e name begin with regex ..",
        "id": 494,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 8], [1, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -iname Regex -type f -print | xargs -I {} rm -f {}",
        "text": "find all file file start from current director i and de let them ..",
        "id": 495,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'type', 'f', '-', 'print', 'word', '-', 'i', 'word', 'word', 'rm', '-', 'f', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 0, 8, 8, 0, 0, 9, 10, 10, 0, 0, 11, 22, 22, 25, 26, 30, 31]]",
            "sibling_edges": "[[7, 1, 11, 2, 3, 4, 5, 6, 22, 8, 26, 9, 10, 13, 14, 17, 20, 23, 25, 28, 30, 33], [1, 22, 2, 3, 4, 5, 6, 7, 8, 25, 9, 10, 30, 14, 15, 18, 21, 24, 26, 29, 31, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 33, 34, 23, 24, 35, 36, 27, 28, 29, 37], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 33, 34, 23, 24, 35, 36, 27, 28, 29, 37, 38]]"
        }
    },
    {
        "code": "find /user/directory/ -name *txt -mtime 0 -type f -exec printf %s:  {} ; -exec tail -1 {} ;",
        "text": "find all text file in directory which be mod if i date time and display last line of t he be e file ..",
        "id": 496,
        "graph": {
            "nodes": "['program', ';', ';', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', '/', 'user', '/', 'directory', '/', '-', 'name', '*', 'txt', '-', 'm', 'time', '<number>', '-', 'type', 'f', '-', 'exec', 'print', 'f', '%', 's', ':', 'word', 'word', 'word', 'tail', '-', '<number>', 'word', 'word', 'find', '{', '}', '-', 'exec', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 12, 0, 0, 0, 13, 14, 14, 0, 0, 15, 39, 40, 41, 41, 45, 46]]",
            "sibling_edges": "[[40, 1, 46, 15, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 41, 13, 14, 16, 17, 18, 19, 21, 23, 25, 26, 29, 32, 34, 36, 37, 39, 43, 45, 50], [1, 41, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 39, 13, 14, 45, 17, 18, 19, 20, 22, 24, 26, 27, 30, 33, 35, 37, 38, 40, 44, 46, 51]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[47, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 48, 49, 1, 50, 51, 42, 43, 44, 52, 53], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 48, 49, 1, 50, 51, 42, 43, 44, 52, 53, 2]]"
        }
    },
    {
        "code": "find Path $( pwd ) -name Regex | xargs -l Quantity -I {} dirname {}",
        "text": "find all file name file in current director i tree and print path name of director i be in ..",
        "id": 497,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '$(', ')', '-', 'name', 'regex', 'word', '-', 'l', 'quantity', '-', 'i', 'word', 'word', 'dir', 'name', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 3, 4, 0, 5, 5, 6, 7, 7, 0, 0, 8, 8, 0, 0, 9, 16, 16, 22, 23, 26, 27, 0, 35]]",
            "sibling_edges": "[[4, 1, 9, 2, 12, 3, 16, 5, 6, 7, 23, 8, 11, 35, 13, 17, 20, 22, 24, 26, 29], [1, 16, 2, 11, 3, 4, 5, 6, 7, 22, 8, 26, 35, 12, 14, 18, 21, 23, 25, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 10, 11, 36, 12, 13, 14, 15, 1, 29, 30, 17, 18, 19, 20, 21, 31, 32, 24, 25, 33], [10, 11, 36, 12, 13, 14, 15, 1, 29, 30, 17, 18, 19, 20, 21, 31, 32, 24, 25, 33, 34]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex -print",
        "text": "find all perl file in file ..",
        "id": 498,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 13, 16], [1, 2, 3, 4, 5, 6, 10, 13, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -perm -Permission -perm Permission ! -perm Permission",
        "text": "search for file that be read a bl for every bod i at least on write bite set but be not exe cut for any bod i ..",
        "id": 499,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'perm', '-', 'permission', '-', 'perm', 'permission', '!', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 7, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 13, 15, 19], [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 16, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]]"
        }
    },
    {
        "code": "shopt -s nocaseglob",
        "text": "en a bl shell option regex ..",
        "id": 500,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 's', 'no', 'case', 'glob', 'shop', 't']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 1, 2, 2, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 6, 7, 9], [1, 2, 5, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 4, 5, 6, 7], [10, 4, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "find /path/to/dir -type l -exec sh -c cp --remove-destination '$(readlink '{}')' '{}' ;",
        "text": "find all s ym link under file and rep lac them with actual file be point at ..",
        "id": 501,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', '/', 'path', '/', 'to', '/', 'dir', '-', 'type', 'l', '-', 'exec', 'sh', '-', 'c', 'cp', '--', 'remove', '-', 'destination', 'raw_string', 'word', 'word', 'raw_string', \"'\", '{', '}', \"'\", 'find', \"'\", '$', '(', 'read', 'link', \"'\", '{', '}', \"'\", ')', \"'\"]",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 9, 9, 0, 0, 0, 0, 10, 10, 10, 10, 11, 31, 31, 31, 31, 31, 31, 32, 33, 34, 34, 34]]",
            "sibling_edges": "[[10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 34, 12, 13, 14, 15, 16, 18, 21, 24, 27, 28, 29, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 48, 49], [1, 2, 3, 4, 5, 6, 7, 8, 9, 31, 10, 13, 14, 15, 16, 17, 19, 22, 25, 28, 29, 30, 32, 33, 34, 36, 37, 38, 41, 42, 43, 44, 45, 49, 50]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 35, 36, 37, 38], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 35, 36, 37, 38, 1]]"
        }
    },
    {
        "code": "ping Regex -c Quantity | grep -E -o Regex | grep -E -o Regex",
        "text": "set v aria bl packet loss to first digit of percent ag of packet loss occur when ping host specif i by test ip ..",
        "id": 502,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', '-', 'c', 'quantity', 'word', '-', 'e', '-', 'o', 'regex', 'word', '-', 'e', '-', 'o', 'regex', 'ping', 'grep', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 6, 7, 7, 8, 0, 9, 9, 10, 10, 11, 12, 17, 23]]",
            "sibling_edges": "[[5, 1, 8, 2, 12, 3, 4, 17, 6, 7, 23, 9, 10, 14, 18, 20, 24, 26], [1, 17, 2, 23, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 19, 21, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 13, 14, 15, 16, 1, 30, 18, 19, 20, 21, 22, 2, 31, 24, 25, 26, 27], [13, 14, 15, 16, 1, 30, 18, 19, 20, 21, 22, 2, 31, 24, 25, 26, 27, 28]]"
        }
    },
    {
        "code": "$( hostname )",
        "text": "set prompt to system host name and hist or i number ..",
        "id": 503,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', 'word', 'host', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 0, 3, 3]]",
            "sibling_edges": "[[1, 3, 4], [3, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 4, 5], [4, 5, 2]]"
        }
    },
    {
        "code": "find Path -printf '%f\\n'",
        "text": "display all file in cat folder ..",
        "id": 504,
        "graph": {
            "nodes": "['command', 'word', 'word', 'raw_string', 'word', 'path', '-', 'print', 'f', \"'\", '%', 'f', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9, 10, 11], [1, 2, 3, 7, 8, 10, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 5, 6, 7, 8, 9, 10, 11], [5, 6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find . -name *.jpg -execdir bash -c d='${PWD##*/}'; [[ '$1' != '$d-'* ]] && mv '$1' './$d-$1' - {} ;",
        "text": "r en be all file file under current director i by append p be not director i name at begin of name if name do n 't al read i contain p be not director i name ..",
        "id": 505,
        "graph": {
            "nodes": "['program', ';', ';', 'word', 'word', 'word', 'word', 'word', 'word', '&&', 'word', '.', '-', 'name', '*', '.', 'jpg', '-', 'exec', 'dir', 'bash', '-', 'c', 'word', 'raw_string', '[[', ']]', 'raw_string', 'raw_string', 'word', 'find', 'd', '=', \"'\", '$', '{', 'pwd', '#', '#', '*', '/', '}', \"'\", 'raw_string', '!=', 'word', \"'\", '$', '<number>', \"'\", \"'\", '.', '/', '$', 'd', '-', '$', '<number>', \"'\", '-', 'word', 'word', \"'\", '$', '<number>', \"'\", 'raw_string', 'word', 'mv', '{', '}', \"'\", '$', 'd', '-', \"'\", '*']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 10, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 0, 0, 43, 43, 43, 43, 0, 0, 45, 60, 61, 66, 66, 66, 66, 66, 67]]",
            "sibling_edges": "[[24, 1, 61, 10, 3, 4, 5, 6, 7, 8, 26, 9, 12, 14, 15, 17, 18, 21, 23, 25, 67, 45, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 64, 66, 71, 72, 73, 74], [1, 25, 2, 3, 4, 5, 6, 7, 8, 23, 9, 45, 13, 15, 16, 18, 19, 22, 24, 43, 26, 27, 28, 29, 60, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 66, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 67, 72, 73, 74, 75]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 1, 25, 62, 63, 64, 65, 44, 71, 72, 73, 74, 75, 76, 26, 9, 68, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 70], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 1, 25, 62, 63, 64, 65, 44, 71, 72, 73, 74, 75, 76, 26, 9, 68, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 70, 2]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "find all file and director i in en ti r file system with number per miss ..",
        "id": 506,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "bind Regex",
        "text": "bind key regex to insert ..",
        "id": 507,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'bind']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} \\;",
        "text": "find all regular file in current director and set per miss to number ..",
        "id": 508,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -name Regex -prune -or -name Regex -print",
        "text": "find recur file name regex in current director i ig nor all file director i ..",
        "id": 509,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 14, 16, 18, 21], [1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 17, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "join -t Regex File File",
        "text": "run regex on regex and regex use a liter tab char act as field se par ..",
        "id": 510,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 't', 'regex', 'file', 'file', 'join']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6], [1, 2, 3, 4, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "cd $(node app)",
        "text": "run java script program regex with node output name of a director i go into that director i ..",
        "id": 511,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'cd', 'word', 'word', 'app', 'node']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 0, 0, 5, 6]]",
            "sibling_edges": "[[1, 2, 5, 6], [2, 6, 3, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 8, 7], [2, 8, 7, 3]]"
        }
    },
    {
        "code": "echo -e $( echo -n -e Regex | wc -m )",
        "text": "report count of char act in val u of regex v aria bl as follow regex ..",
        "id": 512,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'e', '$(', ')', 'echo', '|', 'word', 'word', 'word', 'word', 'word', '-', 'n', '-', 'e', 'regex', 'word', '-', 'm', 'echo', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 9, 9, 10, 10, 11, 0, 12, 12, 13, 19]]",
            "sibling_edges": "[[2, 1, 3, 5, 12, 11, 8, 13, 9, 10, 19, 14, 16, 20], [1, 5, 4, 13, 6, 8, 19, 9, 10, 11, 12, 15, 17, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 3, 4, 5, 22, 14, 15, 16, 17, 18, 8, 23, 20, 21], [3, 4, 5, 22, 14, 15, 16, 17, 18, 8, 23, 20, 21, 6]]"
        }
    },
    {
        "code": "echo -n teststring | gzip -1 | pigz -lv",
        "text": "cal cu l regex of regex ..",
        "id": 513,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'number', 'word', 'word', '-', 'n', 'test', 'string', 'word', '-', '<number>', 'word', '-', 'lv', 'echo', 'g', 'zip', 'pig', 'z']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 0, 5, 5, 0, 6, 6, 7, 12, 12, 15, 15]]",
            "sibling_edges": "[[4, 1, 5, 2, 7, 3, 12, 15, 8, 10, 13, 16, 19, 21], [1, 12, 2, 15, 3, 4, 5, 6, 9, 11, 14, 17, 20, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 1, 19, 20, 13, 14, 2, 21, 22, 16], [8, 9, 10, 11, 1, 19, 20, 13, 14, 2, 21, 22, 16, 17]]"
        }
    },
    {
        "code": "scp -c blowfish -r File File",
        "text": "connect via ssh to file and recur cop i director i file on host to dire co tr i file on local host use regex cipher algorithm ..",
        "id": 514,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'c', 'blow', 'fish', '-', 'r', 'file', 'file', 's', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 9, 11, 15], [1, 2, 3, 4, 5, 8, 10, 12, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 16, 7, 8, 9, 10, 11, 12, 13], [16, 7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "shopt -s checkwinsize",
        "text": "set shell option regex ..",
        "id": 515,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 's', 'check', 'win', 'size', 'shop', 't']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 1, 2, 2, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 6, 7, 9], [1, 2, 5, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 4, 5, 6, 7], [10, 4, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "history Quantity | grep Regex | grep Regex",
        "text": "search first number command in hist or i contain regex and end in regex ..",
        "id": 516,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'quantity', 'word', 'regex', 'word', 'regex', 'history', 'grep', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 6, 8, 10]]",
            "sibling_edges": "[[3, 1, 4, 2, 6, 8, 10], [1, 8, 2, 10, 3, 4, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 7, 1, 13, 9, 2, 14], [7, 1, 13, 9, 2, 14, 11]]"
        }
    },
    {
        "code": "find Path -name Regex -ctime +Timespan -exec rm -f {} \\;",
        "text": "search current director i tree for file with ext en regex and r emo v them if be more than time span old ..",
        "id": 517,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'c', 'time', '+', 'timespan', '-', 'exec', 'rm', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 25, 26]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 26, 12, 15, 16, 18, 20, 23, 25, 27], [1, 2, 3, 4, 5, 6, 7, 8, 25, 9, 13, 16, 17, 19, 21, 24, 26, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 27], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 27, 28]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan -type d",
        "text": "find all director i that be mod if i in time span ..",
        "id": 518,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 11, 13], [1, 2, 3, 4, 5, 9, 10, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "ls -a -l -F -t $( find Path -name Regex ) | rev | cut -d Regex -f Number | rev | head - Quantity",
        "text": "print file if at least one file with such name be present below current director i ..",
        "id": 519,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'l', '-', 'f', '-', 't', '$(', ')', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'word', '-', 'quantity', 'ls', 'word', 'word', 'word', 'rev', 'cut', 'rev', 'head', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 6, 7, 7, 8, 8, 0, 0, 0, 0, 9, 9, 10, 11, 11, 12, 0, 0, 13, 14, 15, 0, 0, 0, 26, 27, 34, 35, 0, 39, 40, 40, 41, 46]]",
            "sibling_edges": "[[25, 1, 26, 2, 12, 3, 34, 4, 15, 5, 6, 7, 8, 27, 9, 10, 11, 35, 13, 16, 18, 20, 22, 24, 41, 28, 31, 46, 39, 40, 48], [1, 26, 2, 27, 3, 34, 4, 35, 5, 6, 7, 8, 24, 9, 10, 11, 12, 13, 14, 17, 19, 21, 23, 46, 25, 29, 32, 39, 40, 41, 49]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 16, 17, 18, 19, 20, 21, 22, 23, 24, 51, 47, 48, 49, 50, 25, 1, 42, 2, 43, 28, 29, 30, 31, 32, 33, 3, 44, 4, 45, 36], [16, 17, 18, 19, 20, 21, 22, 23, 24, 51, 47, 48, 49, 50, 25, 1, 42, 2, 43, 28, 29, 30, 31, 32, 33, 3, 44, 4, 45, 36, 37]]"
        }
    },
    {
        "code": "find . -perm +220 -exec ls -l {} ; 2> /dev/null",
        "text": "find file that be writ a bl by user group or both ..",
        "id": 520,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'perm', '+', '<number>', '-', 'exec', 'ls', '-', 'l', 'word', 'word', 'file_descriptor', '>', 'word', 'find', '{', '}', '<number>', '/', 'dev', '/', 'null']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 0, 0, 0, 0, 0, 8, 19, 20, 21, 23, 23, 23, 23]]",
            "sibling_edges": "[[20, 1, 8, 2, 3, 4, 5, 6, 7, 10, 12, 14, 17, 19, 21, 22, 28, 29, 30], [1, 21, 2, 3, 4, 5, 6, 7, 19, 11, 13, 15, 18, 20, 22, 23, 29, 30, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 25, 26, 1, 27, 22, 28, 29, 30], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 25, 26, 1, 27, 22, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "echo Regex | rev | cut -c Number | rev",
        "text": "cut off number last symbol from string regex ..",
        "id": 521,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'regex', 'word', 'word', '-', 'c', 'number', 'word', 'echo', 'rev', 'cut', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 5, 6, 0, 7, 9, 10, 14]]",
            "sibling_edges": "[[4, 1, 9, 2, 6, 3, 7, 10, 5, 11], [1, 9, 2, 10, 3, 14, 4, 5, 6, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 8, 1, 16, 2, 17, 11, 12, 13, 3], [8, 1, 16, 2, 17, 11, 12, 13, 3, 18]]"
        }
    },
    {
        "code": "find $(pwd)/* -type f -exec stat -c f%15s %n {} +",
        "text": "print name and size of regular file re id in current director i tree ..",
        "id": 522,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'type', 'f', '-', 'exec', 'stat', '-', 'c', 'f', '%', '<number>', 's', '%', 'n', 'word', 'word', '+', 'find', '$(', ')', '/', '*', '{', '}', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 6, 6, 7, 7, 0, 0, 8, 9, 0, 0, 10, 10, 25, 26, 0, 35]]",
            "sibling_edges": "[[9, 10, 1, 2, 3, 4, 5, 6, 7, 26, 30, 11, 14, 17, 19, 20, 21, 23, 25, 29, 35, 31], [29, 1, 2, 3, 4, 5, 6, 7, 25, 8, 10, 12, 15, 18, 20, 21, 22, 24, 26, 35, 30, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 29, 36, 30, 31, 32, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34], [29, 36, 30, 31, 32, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34, 27]]"
        }
    },
    {
        "code": "shopt -s progcomp",
        "text": "en a bl shell option regex ..",
        "id": 523,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 's', 'pro', 'g', 'comp', 'shop', 't']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 1, 2, 2, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 6, 7, 9], [1, 2, 5, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 4, 5, 6, 7], [10, 4, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -l Regex {} \\; | wc -l",
        "text": "count file file re id in file director i tree and contain string regex ..",
        "id": 524,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'l', 'regex', 'word', 'word', '\\\\', ';', 'word', '-', 'l', 'find', '{', '}', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 0, 0, 9, 9, 0, 10, 10, 11, 22, 23, 26]]",
            "sibling_edges": "[[9, 1, 11, 2, 3, 4, 5, 6, 7, 8, 23, 26, 13, 16, 19, 22, 24, 27], [1, 26, 2, 3, 4, 5, 6, 7, 8, 22, 9, 10, 14, 17, 20, 23, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 30, 31, 24, 25, 1, 32, 27], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 30, 31, 24, 25, 1, 32, 27, 28]]"
        }
    },
    {
        "code": "dirname $( readlink File )",
        "text": "save folder path where target of symbol link regex file be loc at in regex v aria bl ..",
        "id": 525,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'dir', 'name', 'word', 'word', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 1, 0, 0, 6, 7, 7]]",
            "sibling_edges": "[[1, 2, 6, 4, 7, 9], [2, 7, 3, 5, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 2, 9, 10, 8], [5, 2, 9, 10, 8, 3]]"
        }
    },
    {
        "code": "find Path -type f -execdir sort -o File {} \\;",
        "text": "sort each file in bill director i lea v output in that file name with file append ..",
        "id": 526,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'dir', 'sort', '-', 'o', 'file', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 14, 15, 18, 21, 23], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 15, 16, 19, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23, 24]]"
        }
    },
    {
        "code": "sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}",
        "text": "recur c hang owner of n pm 's director i to current user ..",
        "id": 527,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'chow', 'n', '-', 'r', '$(', ')', 'word', 'word', 'word', 'word', 'su', 'do', '$(', ')', '/', '{', 'lib', '/', 'node', 'module', ',', 'bin', ',', 'share', '}', 'word', 'word', 'word', 'word', 'whoa', 'mi', 'word', 'config', 'get', 'prefix', 'n', 'pm']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 0, 0, 0, 0, 29, 29, 0, 30, 31, 32, 35, 35]]",
            "sibling_edges": "[[3, 1, 2, 9, 4, 6, 8, 29, 17, 10, 11, 12, 14, 16, 32, 20, 21, 22, 23, 24, 25, 26, 35, 30, 31, 33, 39], [1, 2, 8, 16, 5, 7, 29, 9, 10, 11, 12, 13, 15, 35, 17, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 15, 4, 5, 6, 7, 8, 33, 34, 9, 16, 39, 40, 36, 37, 38, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [15, 4, 5, 6, 7, 8, 33, 34, 9, 16, 39, 40, 36, 37, 38, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]]"
        }
    },
    {
        "code": "cp -n",
        "text": "cop i def in file to target folder without over writ exist file ..",
        "id": 528,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'n', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "echo Regex Regex Regex Regex | tr Regex Regex | tac | tr Regex Regex",
        "text": "revers space se par word in regex ..",
        "id": 529,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'regex', 'regex', 'regex', 'word', 'regex', 'regex', 'word', 'word', 'regex', 'regex', 'echo', 'tr', 'ta', 'c', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 0, 8, 9, 0, 0, 10, 11, 12, 17, 20, 20, 21]]",
            "sibling_edges": "[[7, 1, 9, 2, 20, 3, 12, 4, 5, 6, 17, 8, 21, 10, 26], [1, 17, 2, 20, 3, 21, 4, 5, 6, 7, 8, 9, 10, 11, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 13, 14, 15, 16, 1, 25, 18, 19, 2, 26, 27, 3, 28, 22], [13, 14, 15, 16, 1, 25, 18, 19, 2, 26, 27, 3, 28, 22, 23]]"
        }
    },
    {
        "code": "diff -N -a -u Quantity File File",
        "text": "com par file in file and file treat absent file as e mp ti and all file as text and print number line of un if i context ..",
        "id": 530,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', '-', 'a', '-', 'u', 'quantity', 'file', 'file', 'diff']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 10, 12], [1, 2, 3, 4, 5, 6, 9, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "seq 1 10 | perl -e @x=('')x3;while(<>){print shift @x;push @x,$_}",
        "text": "print all line of regex except last number ..",
        "id": 531,
        "graph": {
            "nodes": "['program', ';', '|', '(', ')', 'word', '}', 'number', 'number', 'word', 'word', 'x', '<number>', ';', 'while', '(', '<', '>', ')', '{', 'print', 'shift', '@', 'x', ';', 'push', '@', 'x', ',', '$', '_', 'word', '<number>', '<number>', 'word', '-', 'e', '@', 'x', '=', 'raw_string', 'seq', 'perl', \"''\"]",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 7, 8, 0, 9, 9, 10, 10, 10, 0, 31, 34, 40]]",
            "sibling_edges": "[[10, 1, 4, 8, 2, 3, 40, 5, 31, 7, 34, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 37, 38], [1, 3, 5, 2, 34, 40, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 38, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 32, 33, 2, 42, 35, 36, 37, 38, 39, 1, 3, 43, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [32, 33, 2, 42, 35, 36, 37, 38, 39, 1, 3, 43, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 6]]"
        }
    },
    {
        "code": "find Path | xargs -I {} sed -i Program {}",
        "text": "rep lac regex with regex in all file in current director i tree ..",
        "id": 532,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'word', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', 'program', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 4, 5, 5, 6, 0, 0, 7, 9, 9, 12, 13, 19, 20]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 13, 4, 5, 6, 10, 12, 14, 16, 19, 22], [1, 9, 2, 3, 12, 4, 5, 6, 19, 11, 13, 15, 17, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 8, 1, 22, 23, 10, 11, 24, 25, 14, 15, 16, 17, 18, 26], [8, 1, 22, 23, 10, 11, 24, 25, 14, 15, 16, 17, 18, 26, 27]]"
        }
    },
    {
        "code": "cat File | sed -e Program",
        "text": "print file regex rep lac each space with a new l in ..",
        "id": 533,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'e', 'program', 'cat', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 7, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 8, 12], [1, 7, 2, 3, 4, 9, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 1, 12, 13, 8, 9], [6, 1, 12, 13, 8, 9, 10]]"
        }
    },
    {
        "code": "find . -name sqlite.db | xargs your_script.sh",
        "text": "exe cut file pas all file file from current director i tree as argument to it ..",
        "id": 534,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', 'sq', 'lite', '.', 'db', 'word', 'your', 'script', '.', 'sh', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 4, 0, 5, 5, 5, 5, 6, 14, 14]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 14, 8, 10, 11, 12, 15, 16, 17, 20], [1, 14, 2, 3, 4, 5, 9, 11, 12, 13, 16, 17, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 7, 8, 9, 10, 11, 12, 13, 1, 20, 21, 15, 16, 17], [7, 8, 9, 10, 11, 12, 13, 1, 20, 21, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
        "text": "set per miss for all regular file under file to number ..",
        "id": 535,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'ch', 'mod', 'permission', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 8, 9, 0, 0, 10, 18, 18, 23, 24, 28, 29]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 18, 6, 7, 24, 8, 9, 12, 15, 16, 19, 21, 23, 25, 28, 31], [1, 18, 2, 3, 4, 5, 6, 7, 23, 8, 9, 28, 13, 16, 17, 20, 22, 24, 26, 29, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 1, 31, 32, 19, 20, 21, 22, 33, 34, 25, 26, 27, 35], [11, 12, 13, 14, 15, 16, 17, 1, 31, 32, 19, 20, 21, 22, 33, 34, 25, 26, 27, 35, 36]]"
        }
    },
    {
        "code": "rsync -r -v -z -e ssh -p Regex --progress File File",
        "text": "archiv file to file via ssh on port number and display progress ..",
        "id": 536,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'v', '-', 'z', '-', 'e', 'ssh', '-', 'p', 'regex', '--', 'progress', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 16, 18, 21, 24, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 17, 19, 22, 25, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "ls -l File",
        "text": "list long format inform about file file ..",
        "id": 537,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'l', 'file', 'ls']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -type f -not -newermt Regex",
        "text": "find file under current director i that be not new than regex in regard of mod if time ..",
        "id": 538,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'not', '-', 'new', 'mt', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14, 15], [1, 2, 3, 4, 5, 6, 10, 13, 15, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} find Path -type f -exec diff -q -s --from-file File {} +",
        "text": "com par file in regex and regex and show which one be i dent and which one differ ..",
        "id": 539,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'find', 'path', '-', 'type', 'f', '-', 'exec', 'diff', '-', 'q', '-', 's', '--', 'from', '-', 'file', 'file', 'word', 'word', '+', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 15, 16, 16, 16, 16, 17, 0, 0, 18, 19, 27, 27, 32, 33, 51, 52]]",
            "sibling_edges": "[[5, 1, 19, 2, 3, 4, 27, 6, 7, 33, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 52, 21, 24, 25, 28, 30, 32, 36, 39, 42, 44, 46, 47, 48, 51, 55], [1, 27, 2, 3, 4, 5, 6, 7, 32, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 51, 18, 22, 25, 26, 29, 31, 33, 37, 40, 43, 45, 47, 48, 49, 52, 56]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[54, 20, 21, 22, 23, 24, 25, 26, 1, 55, 56, 28, 29, 30, 31, 57, 58, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 59, 60], [20, 21, 22, 23, 24, 25, 26, 1, 55, 56, 28, 29, 30, 31, 57, 58, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 59, 60, 53]]"
        }
    },
    {
        "code": "cat File File File File | split -n Quantity -d File Regex",
        "text": "split content of regex into number file in a round robin fashion with prefix regex and num er suffix ..",
        "id": 540,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'file', 'file', 'file', 'word', '-', 'n', 'quantity', '-', 'd', 'file', 'regex', 'cat', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 0, 6, 6, 7, 8, 8, 9, 10, 11, 16]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 16, 6, 7, 8, 9, 17, 20], [1, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 12, 13, 14, 15, 1, 25, 17, 18, 19, 20, 21, 22], [12, 13, 14, 15, 1, 25, 17, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path -type f -perm Permission",
        "text": "find all file who be e per miss be number ..",
        "id": 541,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "chown -R $( whoami ) File",
        "text": "recur c hang ownership of file to current user ..",
        "id": 542,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'r', '$(', ')', 'file', 'chow', 'n', 'word', 'whoa', 'mi']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 1, 1, 0, 0, 2, 3, 3, 0, 11, 11]]",
            "sibling_edges": "[[3, 1, 7, 4, 6, 11, 9, 12], [1, 6, 2, 5, 11, 7, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 4, 5, 6, 12, 13, 7], [10, 4, 5, 6, 12, 13, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} gzip -l {} | tail -n +Quantity | head -n -Quantity | sort -k Number | tail -n Quantity | awk Program",
        "text": "find large origin file file in current director i tree ..",
        "id": 543,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'g', 'zip', '-', 'l', 'word', 'word', 'word', '-', 'n', '+', 'quantity', 'word', '-', 'n', '-', 'quantity', 'word', '-', 'k', 'number', 'word', '-', 'n', 'quantity', 'word', 'program', 'find', 'x', 'arg', '{', '}', '{', '}', 'tail', 'head', 'sort', 'tail', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 9, 0, 10, 10, 0, 0, 11, 11, 12, 12, 0, 0, 0, 13, 13, 14, 14, 0, 15, 15, 16, 16, 0, 17, 17, 18, 0, 19, 19, 20, 0, 21, 22, 27, 27, 30, 31, 36, 37, 38, 43, 48, 52, 56, 56]]",
            "sibling_edges": "[[9, 1, 37, 2, 14, 3, 16, 4, 18, 5, 20, 6, 22, 7, 8, 27, 10, 31, 11, 12, 38, 13, 43, 15, 48, 17, 52, 19, 56, 24, 28, 30, 32, 34, 36, 39, 41, 44, 46, 49, 53, 59, 69], [1, 27, 2, 38, 3, 43, 4, 48, 5, 52, 6, 56, 7, 8, 9, 10, 30, 11, 12, 36, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 29, 31, 33, 35, 37, 40, 42, 45, 47, 50, 54, 60, 70]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[58, 23, 24, 25, 26, 1, 59, 60, 28, 29, 61, 62, 32, 33, 34, 35, 63, 64, 2, 65, 39, 40, 41, 42, 3, 66, 44, 45, 46, 47, 4, 67, 49, 50, 51, 5, 68, 53, 54, 55, 6, 69, 70], [23, 24, 25, 26, 1, 59, 60, 28, 29, 61, 62, 32, 33, 34, 35, 63, 64, 2, 65, 39, 40, 41, 42, 3, 66, 44, 45, 46, 47, 4, 67, 49, 50, 51, 5, 68, 53, 54, 55, 6, 69, 70, 57]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "look in file and below for file with regex in name ..",
        "id": 544,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type -f Path Path -print0 | xargs -0 -I {} ls -1 -h -s -S {}",
        "text": "display a list of file with size in dec re as order of size of all regular file under regex director i tree that be big than regex in size ..",
        "id": 545,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'type', '-', 'f', 'path', 'path', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'ls', '-', '<number>', '-', 'h', '-', 's', '-', 's', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 11, 11, 12, 12, 13, 13, 14, 14, 0, 0, 15, 26, 26, 31, 32, 42, 43]]",
            "sibling_edges": "[[7, 1, 15, 2, 3, 4, 5, 6, 26, 8, 9, 32, 10, 11, 12, 13, 14, 17, 19, 23, 24, 27, 29, 31, 34, 36, 38, 40, 42, 45], [1, 26, 2, 3, 4, 5, 6, 7, 8, 9, 31, 10, 11, 12, 13, 14, 42, 18, 20, 24, 25, 28, 30, 32, 35, 37, 39, 41, 43, 46]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[44, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 45, 46, 27, 28, 29, 30, 47, 48, 33, 34, 35, 36, 37, 38, 39, 40, 41, 49], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 45, 46, 27, 28, 29, 30, 47, 48, 33, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50]]"
        }
    },
    {
        "code": "split --numeric-suffixes=1 --additional-suffix=.csv -l100 data.csv data_",
        "text": "split file into file with at most number line each and use a prefix regex and num er suffix start with number and end with file ..",
        "id": 546,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '--', 'numeric', '-', 'suffix', '=', '<number>', '--', 'additional', '-', 'suffix', '=', '.', 'csv', '-', 'l', '<number>', 'data', '.', 'csv', 'data', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24], [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "find Path -not -regex Regex",
        "text": "search current director i tree for file without regex in path name ..",
        "id": 547,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'not', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9], [1, 2, 3, 4, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -size -Size -print",
        "text": "find file in current director i and below that be le than size in size ..",
        "id": 548,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '-', 'size', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9, 11], [1, 2, 3, 4, 8, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "echo | ssh-keygen -P Regex",
        "text": "r emo v pas p hr as from user 's ssh key without prompt ..",
        "id": 549,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'p', 'regex', 'echo', 'ssh', '-', 'key', 'gen']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 2, 3, 4, 5, 5, 5, 5]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 10, 11, 12], [1, 5, 2, 3, 7, 11, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 1, 10, 11, 12, 13, 6, 7], [1, 10, 11, 12, 13, 6, 7, 8]]"
        }
    },
    {
        "code": "read -r Regex",
        "text": "read a line from standard input into v aria bl regex without backslash es cap ..",
        "id": 550,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'r', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -iname Regex -exec ls {} +",
        "text": "display a long list of all file file in home folder ..",
        "id": 551,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'exec', 'ls', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 0, 0, 6, 7, 16, 17]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 17, 9, 10, 13, 16], [1, 2, 3, 4, 5, 16, 6, 10, 11, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21], [8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 18]]"
        }
    },
    {
        "code": "find Path -exec basename {} \\;",
        "text": "print name of all file from file director i tree ..",
        "id": 552,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'base', 'name', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 0, 0, 4, 4, 5, 11, 12]]",
            "sibling_edges": "[[5, 1, 2, 3, 12, 7, 9, 11, 13], [1, 2, 3, 11, 4, 8, 10, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 6, 7, 8, 9, 10, 16, 17, 13], [6, 7, 8, 9, 10, 16, 17, 13, 14]]"
        }
    },
    {
        "code": "ls File | wc -l",
        "text": "save number of line of current director i list in regex v aria bl ..",
        "id": 553,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'file', 'word', '-', 'l', 'ls', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 3, 4, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 7], [1, 6, 2, 3, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 1, 10, 7], [5, 1, 10, 7, 8]]"
        }
    },
    {
        "code": "find /path/to/inputfiles -name *.txt -exec /path/to/myprogram.sh {} ; > Out.txt",
        "text": "search for all text file in director i file and pas them as input to shell script in exec command and save output to file file ..",
        "id": 554,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'path', '/', 'to', '/', 'input', 'file', '-', 'name', '*', '.', 'txt', '-', 'exec', '/', 'path', '/', 'to', '/', 'my', 'program', '.', 'sh', 'word', 'word', '>', 'word', 'find', '{', '}', 'out', '.', 'txt']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 7, 31, 32, 34, 34, 34]]",
            "sibling_edges": "[[32, 1, 7, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 38, 39], [1, 33, 2, 3, 4, 5, 6, 31, 9, 10, 11, 12, 13, 14, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 39, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 1, 33, 38, 39], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 1, 33, 38, 39, 40]]"
        }
    },
    {
        "code": "tree --help",
        "text": "print help me sag for tree ..",
        "id": 555,
        "graph": {
            "nodes": "['command', 'word', 'word', '--', 'help', 'tree']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "find Path -iname Regex -type f -exec cp {} -r -v File \\;",
        "text": "search for all file file in folder directory and cop i t he be e file to folder file name as find regex ..",
        "id": 556,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'type', 'f', '-', 'exec', 'cp', 'word', 'word', '-', 'r', '-', 'v', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 9, 10, 11, 11, 12, 24, 25]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 25, 8, 9, 10, 14, 15, 18, 21, 24, 26, 28, 31], [1, 2, 3, 4, 5, 6, 7, 24, 8, 9, 10, 11, 15, 16, 19, 22, 25, 27, 29, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 26, 27, 28, 29, 30, 31], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 26, 27, 28, 29, 30, 31, 32]]"
        }
    },
    {
        "code": "find Path -type f -mtime -Timespan -exec cp {} File \\;",
        "text": "cop i all regular file from temp folder which be mod if i in time span to file ..",
        "id": 557,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'm', 'time', '-', 'timespan', '-', 'exec', 'cp', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 0, 0, 8, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 24, 8, 12, 15, 16, 18, 20, 23, 26], [1, 2, 3, 4, 5, 6, 7, 23, 8, 9, 13, 16, 17, 19, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 29, 30, 25, 26], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 29, 30, 25, 26, 27]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file in current director i tree that contain regex in name ..",
        "id": 558,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file in current director i tree ..",
        "id": 559,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -name Regex ! -name Regex",
        "text": "find with comb in multi pl search criterion in command s era ch file that begin with ab c in name and do not file ext en ..",
        "id": 560,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '!', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 14, 18], [1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "which Regex | file -f File",
        "text": "print file type of exe cut file of command regex ..",
        "id": 561,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'f', 'file', 'which', 'file']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 8], [1, 7, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 1, 12, 8, 9], [6, 1, 12, 8, 9, 10]]"
        }
    },
    {
        "code": "cp -R -p File File",
        "text": "recur cop i file pre serv s ym link as s ym link to regex director i ..",
        "id": 562,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'p', 'file', 'file', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find file which name like file in current director i ..",
        "id": 563,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "rsync -a -v File File",
        "text": "archiv file to file ..",
        "id": 564,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'v', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 12], [1, 2, 3, 4, 7, 9, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 13, 6, 7, 8, 9, 10], [13, 6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -exec grep -i Regex {} \\;",
        "text": "find all file in current director i and search for word regex in them ..",
        "id": 565,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'grep', '-', 'i', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan -print",
        "text": "find all file in current folder that be not mod if i in time span ..",
        "id": 566,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 10, 12], [1, 2, 3, 4, 8, 9, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "echo Regex | tee -a File",
        "text": "write file to standard output and append to file as root ..",
        "id": 567,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'a', 'file', 'echo', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 8], [1, 7, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 1, 12, 8, 9], [6, 1, 12, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -maxdepth Quantity | xargs -n Quantity -I {} rm {}",
        "text": "r emo v all file file in file director i but not in it 's sub director i ..",
        "id": 568,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'max', 'depth', 'quantity', 'word', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 8, 0, 9, 9, 10, 11, 11, 0, 0, 12, 0, 0, 13, 26, 26, 32, 33, 35, 36]]",
            "sibling_edges": "[[8, 1, 13, 2, 3, 4, 5, 6, 7, 26, 9, 10, 11, 33, 12, 15, 16, 19, 22, 23, 27, 30, 32, 35, 38], [1, 26, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 12, 35, 16, 17, 20, 23, 24, 28, 31, 33, 36, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 38, 39, 27, 28, 29, 30, 31, 40, 41, 34, 42], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 38, 39, 27, 28, 29, 30, 31, 40, 41, 34, 42, 43]]"
        }
    },
    {
        "code": "date -d Regex +%s",
        "text": "print epoch second for give time string date time ..",
        "id": 569,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'd', 'regex', '+', '%', 's', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 1, 2, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 8, 9], [1, 2, 3, 6, 9, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} rename Regex {}",
        "text": "r en be all file file under and below current director i to file ..",
        "id": 570,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rename', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 0, 0, 10, 18, 18, 23, 24, 27, 28]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 18, 6, 7, 24, 8, 9, 12, 15, 16, 19, 21, 23, 27, 30], [1, 18, 2, 3, 4, 5, 6, 7, 23, 8, 9, 27, 13, 16, 17, 20, 22, 24, 28, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 17, 1, 30, 31, 19, 20, 21, 22, 32, 33, 25, 26, 34], [11, 12, 13, 14, 15, 16, 17, 1, 30, 31, 19, 20, 21, 22, 32, 33, 25, 26, 34, 35]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rm -f {} \\;",
        "text": "de let all file name regex under current director i ..",
        "id": 571,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rm', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find . -type d |xargs tar rf /somewhereelse/whatever-dirsonly.tar --no-recursion",
        "text": "archiv director i str uctu r under current director i into file ..",
        "id": 572,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'd', 'word', 'tar', 'rf', '/', 'somewhere', 'else', '/', 'whatever', '-', 'dir', 's', 'only', '.', 'tar', '--', 'no', '-', 'recursion', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 14, 14]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 6, 7, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33], [1, 14, 2, 3, 4, 5, 6, 7, 8, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 10, 11, 12, 13, 1, 33, 34, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [10, 11, 12, 13, 1, 33, 34, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "LANG=en_US cal",
        "text": "set lang v aria bl to regex and print calendar for a current month ..",
        "id": 573,
        "graph": {
            "nodes": "['command', 'variable_name', '=', 'word', 'word', 'lang', 'en', 'us', 'cal']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 1, 3, 3, 4]]",
            "sibling_edges": "[[3, 1, 2, 6], [4, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 2, 6, 7], [2, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -prune -or -name Regex -prune -or -type f -print | xargs -I {} grep -E -i -l Regex {}",
        "text": "list file from current director i tree that contain line match regular express regex ig nor file and file ..",
        "id": 574,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'type', 'f', '-', 'print', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'e', '-', 'i', '-', 'l', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 0, 14, 14, 0, 0, 15, 16, 16, 17, 17, 18, 18, 19, 0, 0, 20, 41, 41, 44, 45, 54, 55]]",
            "sibling_edges": "[[13, 1, 20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 41, 14, 45, 15, 16, 17, 18, 19, 22, 25, 27, 29, 32, 34, 36, 39, 42, 44, 47, 49, 51, 54, 57], [1, 41, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 44, 15, 16, 17, 18, 19, 54, 23, 26, 28, 30, 33, 35, 37, 40, 43, 45, 48, 50, 52, 55, 58]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[56, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 1, 57, 58, 42, 43, 59, 60, 46, 47, 48, 49, 50, 51, 52, 53, 61], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 1, 57, 58, 42, 43, 59, 60, 46, 47, 48, 49, 50, 51, 52, 53, 61, 62]]"
        }
    },
    {
        "code": "find Path -size Size -printf '%M %n %u %g %s %Tb %Td %Tk:%TM %p\\n'",
        "text": "list all file and director i under regex with size regex and print them accord to format string regex ..",
        "id": 575,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'size', 'size', '-', 'print', 'f', \"'\", '%', 'm', '%', 'n', '%', 'u', '%', 'g', '%', 's', '%', 'tb', '%', 'td', '%', 'tk', ':', '%', 'tm', '%', 'p', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [1, 2, 3, 4, 5, 9, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]]"
        }
    },
    {
        "code": "ssh -f Regex -p Regex -L Regex -N",
        "text": "forward port number on local host to port number on file via regex on port number ..",
        "id": 576,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'f', 'regex', '-', 'p', 'regex', '-', 'l', 'regex', '-', 'n', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 12, 15, 18], [1, 2, 3, 4, 5, 6, 7, 10, 13, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "sed Program File | split -C Size File",
        "text": "split first number line of regex into file with at most size each pre serv line ..",
        "id": 577,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'program', 'file', 'word', '-', 'c', 'size', 'file', 's', 'ed', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 6, 7, 7, 10]]",
            "sibling_edges": "[[3, 1, 7, 2, 10, 4, 5, 11, 15], [1, 10, 2, 3, 4, 5, 6, 12, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 16, 8, 9, 1, 17, 11, 12, 13], [16, 8, 9, 1, 17, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -type f -wholename Regex -print0",
        "text": "list regular file under current director i end in file put a null between each file find ..",
        "id": 578,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'whole', 'name', 'regex', '-', 'print', '<number>', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 13, 16, 17], [1, 2, 3, 4, 5, 6, 10, 13, 14, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path Path Path Path",
        "text": "find all file in current director i regex and it sub director i with option constraint of regex regex file regex ..",
        "id": 579,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', 'path', 'path', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 0, 1, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3], [1, 2, 3, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 6, 7, 8], [6, 7, 8, 9]]"
        }
    },
    {
        "code": "cat <( grep -F -i -v Regex <( crontab -l ) ) <( echo Regex ) | crontab File",
        "text": "c re at new cron tab set incl ud regex and on li job from current cron tab that regex contain regex ..",
        "id": 580,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', '<(', ')', '<(', ')', 'word', 'file', 'cat', 'word', 'word', 'word', 'word', 'word', 'cron', 'tab', 'word', '-', 'f', '-', 'i', '-', 'v', 'regex', '<(', ')', 'word', 'regex', 'grep', 'word', 'echo', 'word', '-', 'l', 'cron', 'tab']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 8, 8, 0, 11, 11, 12, 12, 13, 13, 14, 0, 0, 0, 15, 18, 0, 28, 0, 31, 31, 33, 33]]",
            "sibling_edges": "[[7, 1, 3, 5, 8, 4, 27, 6, 15, 18, 11, 12, 13, 14, 28, 16, 19, 21, 23, 26, 31, 33, 34, 36], [1, 8, 4, 6, 2, 18, 5, 28, 7, 11, 12, 13, 14, 26, 15, 17, 20, 22, 24, 33, 27, 31, 35, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 4, 30, 19, 20, 21, 22, 23, 24, 25, 26, 36, 37, 34, 35, 27, 5, 6, 32, 29, 7, 1, 16, 17], [4, 30, 19, 20, 21, 22, 23, 24, 25, 26, 36, 37, 34, 35, 27, 5, 6, 32, 29, 7, 1, 16, 17, 9]]"
        }
    },
    {
        "code": "find Path -name Regex -printf 'mv '%h/%f' '%h/lib%f'\\n' | bash",
        "text": "r en be file file in current director i tree prep end name with regex ..",
        "id": 581,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'f', 'raw_string', 'word', 'raw_string', 'word', 'raw_string', 'word', 'find', \"'\", 'mv', \"'\", '%', 'h', '/', '%', 'f', \"'\", \"'\", '%', 'h', '/', 'lib', '%', 'f', \"'\", \"'\", 'bash']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 0, 0, 0, 0, 0, 6, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 19]]",
            "sibling_edges": "[[18, 1, 6, 2, 3, 4, 5, 8, 11, 12, 14, 15, 16, 17, 21, 22, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 37], [1, 19, 2, 3, 4, 5, 14, 9, 12, 13, 15, 16, 17, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 7, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1], [7, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 39]]"
        }
    },
    {
        "code": "find Path -type f -exec grep -i Regex {} \\; -print",
        "text": "search for word regex in all regular file in current folder ..",
        "id": 582,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'grep', '-', 'i', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 9, 10, 21, 22]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 15, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 21, 8, 9, 13, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 23, 24, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "watch -n 300 -t /usr/bin/fbi -noverbose -a -t 4 -u `find -type f | egrep -i '(jpg|bmp|png|gif)$'`",
        "text": "exe cut regex regex f regex e grep regex regex ever i time span and display without tit l ..",
        "id": 583,
        "graph": {
            "nodes": "['command', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', '-', 'n', '<number>', '-', 't', '/', 'us', 'r', '/', 'bin', '/', 'f', 'bi', '-', 'no', 'verbose', '-', 'a', '-', 't', '<number>', '-', 'u', '`', '`', 'watch', '|', 'word', 'word', 'word', 'raw_string', 'word', '-', 'type', 'f', 'word', '-', 'i', \"'\", '(', 'jpg', '|', 'b', 'mp', '|', 'png', '|', 'gif', ')', '$', \"'\", 'find', 'e', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 9, 9, 0, 0, 10, 0, 0, 0, 0, 0, 0, 38, 38, 39, 0, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 46, 46]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 32, 34, 41, 39, 37, 42, 38, 46, 40, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63], [1, 2, 3, 4, 5, 6, 7, 8, 9, 34, 12, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 33, 42, 35, 37, 46, 38, 39, 40, 41, 44, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 62, 43, 44, 45, 37, 63, 64, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 62, 43, 44, 45, 37, 63, 64, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 35]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -maxdepth Quantity -type d -name Regex -printf '*' | wc -c",
        "text": "find all director i in number level down file director i that number con ecu t vowel in name and count them ..",
        "id": 584,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'max', 'depth', 'quantity', '-', 'type', 'd', '-', 'name', 'regex', '-', 'print', 'f', \"'\", '*', \"'\", 'word', '-', 'c', 'find', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 11, 12, 12, 12, 0, 13, 13, 14, 36]]",
            "sibling_edges": "[[12, 1, 14, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 16, 17, 20, 21, 24, 27, 30, 31, 33, 34, 37], [1, 36, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 21, 22, 25, 28, 31, 32, 34, 35, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 1, 40, 37], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 1, 40, 37, 38]]"
        }
    },
    {
        "code": "any_command_what_produces_relative_path_names | cpio -pamVd /new/parent/dir",
        "text": "cop i file print by regex to file pre serv director i hi er arch i ..",
        "id": 585,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'pam', 'vd', '/', 'new', '/', 'p', 'be', 'not', '/', 'dir', 'any', 'command', 'what', 'produce', 'relative', 'path', 'name', 'cp', 'io']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24], [1, 5, 2, 3, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 18, 19, 20, 21, 22, 23, 1, 24, 25, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [18, 19, 20, 21, 22, 23, 1, 24, 25, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "paste -s -d+ infile | bc",
        "text": "ma them at sum each line in regex ..",
        "id": 586,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 's', '-', 'd', '+', 'in', 'file', 'word', 'paste', 'bc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 4, 4, 0, 5, 13]]",
            "sibling_edges": "[[4, 1, 5, 2, 3, 6, 8, 9, 11], [1, 13, 2, 3, 4, 7, 9, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12, 1], [6, 7, 8, 9, 10, 11, 12, 1, 15]]"
        }
    },
    {
        "code": "apropos Regex Regex Regex | grep Regex",
        "text": "search manual page with de script in section number that name begin with low ca letter ..",
        "id": 587,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'regex', 'regex', 'regex', 'word', 'regex', 'apropos', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 5, 6, 10]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 10], [1, 10, 2, 3, 4, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 7, 8, 9, 1, 13], [7, 8, 9, 1, 13, 11]]"
        }
    },
    {
        "code": "DIR=$( cd $( dirname ${BASH_SOURCE[0]} ) && pwd )",
        "text": "store ab sol ut path of exe cut script ..",
        "id": 588,
        "graph": {
            "nodes": "['variable_assignment', 'variable_name', '=', 'dir', '$(', ')', '&&', 'word', '$(', ')', 'word', 'cd', 'pwd', 'word', '${', '}', 'dir', 'name', 'variable_name', '[', 'number', ']', 'bash', 'source', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 10, 0, 0, 0, 13, 13, 0, 0, 0, 0, 18, 18, 20]]",
            "sibling_edges": "[[1, 2, 4, 10, 9, 6, 7, 8, 15, 13, 14, 21, 16, 18, 19, 20, 22], [2, 4, 7, 5, 6, 10, 8, 13, 9, 14, 18, 15, 17, 19, 20, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 2, 4, 11, 8, 16, 17, 14, 22, 23, 19, 24, 21, 15, 9, 6, 12], [2, 4, 11, 8, 16, 17, 14, 22, 23, 19, 24, 21, 15, 9, 6, 12, 5]]"
        }
    },
    {
        "code": "find Path -exec echo {} \\;",
        "text": "list file in current director i tree use echo ..",
        "id": 589,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'echo', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 1, 2, 2, 3, 0, 0, 4, 4, 5, 10, 11]]",
            "sibling_edges": "[[5, 1, 2, 3, 11, 7, 10, 12], [1, 2, 3, 10, 4, 8, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 15, 16, 12], [6, 7, 8, 9, 15, 16, 12, 13]]"
        }
    },
    {
        "code": "find Path -type f -exec ls -s {} + | sort -n -r | head - Quantity",
        "text": "display number large file by size in current folder ..",
        "id": 590,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ls', '-', 's', 'word', 'word', '+', 'word', '-', 'n', '-', 'r', 'word', '-', 'quantity', 'find', '{', '}', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 0, 10, 10, 11, 11, 0, 12, 13, 14, 24, 25, 27, 32]]",
            "sibling_edges": "[[9, 1, 11, 2, 14, 3, 4, 5, 6, 7, 8, 25, 27, 10, 32, 12, 16, 19, 22, 24, 28, 30], [1, 27, 2, 32, 3, 4, 5, 6, 7, 8, 24, 9, 10, 11, 12, 13, 17, 20, 23, 25, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 15, 16, 17, 18, 19, 20, 21, 22, 23, 36, 37, 26, 1, 38, 28, 29, 30, 31, 2, 39, 33], [15, 16, 17, 18, 19, 20, 21, 22, 23, 36, 37, 26, 1, 38, 28, 29, 30, 31, 2, 39, 33, 34]]"
        }
    },
    {
        "code": "find Path -name Regex -exec ls -l {} \\;",
        "text": "list all file file and director i under file ..",
        "id": 591,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -mtime Timespan -print",
        "text": "get all file that be exact time span old ..",
        "id": 592,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', 'timespan', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 11], [1, 2, 3, 4, 8, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep Regex {} File \\;",
        "text": "find all file file under and below current director i that contain regex ..",
        "id": 593,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', 'regex', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 0, 0, 7, 8, 8, 9, 18, 19]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 19, 7, 11, 14, 18, 21], [1, 2, 3, 4, 5, 6, 18, 7, 8, 12, 15, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 24, 25, 20, 21], [10, 11, 12, 13, 14, 15, 16, 17, 24, 25, 20, 21, 22]]"
        }
    },
    {
        "code": "{ time ls; } 2>&1 | cat > time.txt",
        "text": "save regex output to get h with time report to a file file ..",
        "id": 594,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'time', '.', 'txt', '{', ';', '}', 'file_descriptor', '>&', 'number', 'word', 'word', '<number>', '<number>', 'cat', 'word', 'ls', 'time']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 10, 12, 13, 0, 14, 18]]",
            "sibling_edges": "[[13, 12, 1, 2, 9, 4, 5, 7, 14, 8, 10, 11, 18], [2, 1, 13, 3, 10, 5, 6, 18, 8, 9, 11, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 20, 19, 8, 9, 15, 11, 16, 1, 17, 2, 4, 5], [20, 19, 8, 9, 15, 11, 16, 1, 17, 2, 4, 5, 6]]"
        }
    },
    {
        "code": "find Path -size +Size",
        "text": "find file in current director i tree who be e size be great than size ..",
        "id": 595,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 8], [1, 2, 3, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "dig Regex",
        "text": "get a record for domain regex ..",
        "id": 596,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'dig']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "chown -R Regex File",
        "text": "recur c hang owner to regex and group to regex of all file in current director i ..",
        "id": 597,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path \\( -perm -Permission -fprintf File '%#m %u %p\\n' \\) -and Path \\( -size +Size -fprintf File '%-10s %p\\n' \\)",
        "text": "find permission file and director i write detail to file and find l arg file write detail to file t raver file system just on c ..",
        "id": 598,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'path', '\\\\', '(', '-', 'perm', '-', 'permission', '-', 'f', 'print', 'f', 'file', \"'\", '%', '#', 'm', '%', 'u', '%', 'p', \"'\", '\\\\', ')', '-', 'and', 'path', '\\\\', '(', '-', 'size', '+', 'size', '-', 'f', 'print', 'f', 'file', \"'\", '%', '-', '<number>', 's', '%', 'p', \"'\", '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 14, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 18]]",
            "sibling_edges": "[[18, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 22, 24, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 45, 47, 49, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 25, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 46, 48, 50, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 65]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[66, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type d -print0",
        "text": "find all director i in current folder and not search in sub director i ..",
        "id": 599,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'd', '-', 'print', '<number>', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 10, 13, 16, 17], [1, 2, 3, 4, 5, 6, 10, 11, 14, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "export PS1=$(whoami)@$(hostname):",
        "text": "export v aria bl regex as current user n be regex ho tn be ..",
        "id": 600,
        "graph": {
            "nodes": "['declaration_command', 'export', 'variable_name', '=', 'ps', '<number>', 'word', 'word', '$(', ')', '@', '$(', ')', ':', 'word', 'word', 'whoa', 'mi', 'host', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 2, 2, 0, 0, 0, 0, 6, 0, 0, 7, 0, 0, 14, 14, 15, 15]]",
            "sibling_edges": "[[1, 2, 3, 4, 9, 6, 12, 8, 14, 11, 15, 16, 18], [2, 3, 8, 5, 6, 11, 7, 14, 9, 15, 12, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 4, 5, 3, 8, 16, 17, 9, 10, 11, 18, 19, 12], [4, 5, 3, 8, 16, 17, 9, 10, 11, 18, 19, 12, 13]]"
        }
    },
    {
        "code": "basename $( pwd )",
        "text": "get current director i name without full path ie part after last directory ..",
        "id": 601,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'base', 'name', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 0, 6]]",
            "sibling_edges": "[[1, 2, 6, 4], [2, 6, 3, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 2, 7], [5, 2, 7, 3]]"
        }
    },
    {
        "code": "fold -w Quantity File | sed -e Program -e Program",
        "text": "wrap each line in regex to fit in number char act and right pad an i line short with space ..",
        "id": 602,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'w', 'quantity', 'file', 'word', '-', 'e', 'program', '-', 'e', 'program', 'fold', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 0, 5, 5, 6, 7, 7, 8, 9, 14, 14]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 6, 7, 10, 15, 18, 22], [1, 14, 2, 3, 4, 5, 6, 7, 8, 11, 16, 19, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 13, 1, 22, 23, 15, 16, 17, 18, 19], [10, 11, 12, 13, 1, 22, 23, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "sort File File | uniq -u",
        "text": "print uni qu line in regex and regex ..",
        "id": 603,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'file', 'file', 'word', '-', 'u', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 8, 8]]",
            "sibling_edges": "[[3, 1, 5, 2, 8, 9, 12], [1, 8, 2, 3, 4, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 1, 12, 13, 9], [6, 7, 1, 12, 13, 9, 10]]"
        }
    },
    {
        "code": "find Path -inum Quantity -print",
        "text": "search all director i from file downward for file who be e i nod number be number and print them ..",
        "id": 604,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'in', 'um', 'quantity', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 11], [1, 2, 3, 4, 8, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "ls -C -1 -t | awk Program | xargs -I {} rm {}",
        "text": "r emo v all file from current folder but number new one ..",
        "id": 605,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'number', 'word', 'word', 'word', 'word', 'word', '-', 'c', '-', '<number>', '-', 't', 'word', 'program', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'ls', 'a', 'wk', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 5, 0, 6, 0, 7, 7, 0, 0, 8, 0, 0, 9, 16, 16, 18, 18, 21, 22, 24, 25]]",
            "sibling_edges": "[[5, 1, 6, 2, 9, 3, 4, 16, 18, 7, 22, 8, 10, 12, 14, 19, 21, 24, 27, 29], [1, 16, 2, 18, 3, 4, 5, 6, 7, 21, 8, 24, 11, 13, 15, 20, 22, 25, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 15, 1, 27, 28, 17, 2, 29, 30, 19, 20, 31, 32, 23, 33], [10, 11, 12, 13, 14, 15, 1, 27, 28, 17, 2, 29, 30, 19, 20, 31, 32, 23, 33, 34]]"
        }
    },
    {
        "code": "shopt nullglob",
        "text": "show status of a shell option regex ..",
        "id": 606,
        "graph": {
            "nodes": "['command', 'word', 'word', 'null', 'glob', 'shop', 't']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 1, 1, 2, 2]]",
            "sibling_edges": "[[2, 3, 5], [1, 4, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 6, 3], [6, 3, 4]]"
        }
    },
    {
        "code": "sort --random-sort File | head -n Quantity",
        "text": "print a random line from regex ..",
        "id": 607,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '--', 'random', '-', 'sort', 'file', 'word', '-', 'n', 'quantity', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 0, 4, 4, 5, 6, 12]]",
            "sibling_edges": "[[3, 1, 6, 2, 12, 4, 7, 8, 9, 13], [1, 12, 2, 3, 4, 5, 8, 9, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 1, 17, 13, 14], [7, 8, 9, 10, 11, 1, 17, 13, 14, 15]]"
        }
    },
    {
        "code": "find -type f -exec printf \\n ; | wc -l",
        "text": "count all file in a current folder and sub fold ..",
        "id": 608,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', '|', 'word', 'word', '-', 'type', 'f', '-', 'exec', 'print', 'f', 'word', '-', 'l', 'find', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 5, 5, 0, 7, 7, 8, 16]]",
            "sibling_edges": "[[5, 1, 6, 8, 2, 3, 4, 16, 9, 12, 14, 17], [1, 6, 16, 2, 3, 4, 5, 7, 10, 13, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 1, 6, 20, 17], [9, 10, 11, 12, 13, 14, 15, 1, 6, 20, 17, 18]]"
        }
    },
    {
        "code": "rm $( find Path -name Regex ) -r -f",
        "text": "recur r emo v all file like file from current folder ..",
        "id": 609,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '$(', ')', '-', 'r', '-', 'f', 'rm', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 0, 0, 0, 0, 11, 12, 12, 13, 14]]",
            "sibling_edges": "[[3, 5, 1, 4, 13, 6, 8, 14, 11, 12, 16], [4, 1, 2, 14, 5, 7, 9, 11, 12, 13, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 4, 19, 15, 16, 17, 18, 5, 6, 7, 8], [4, 19, 15, 16, 17, 18, 5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find ./ -type d -exec rmdir --ignore-fail-on-non-empty {} 2>/dev/null ;",
        "text": "find and de let all e mp ti folder ..",
        "id": 610,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'file_descriptor', '>', 'word', 'word', '.', '/', '-', 'type', 'd', '-', 'exec', 'rm', 'dir', '--', 'ignore', '-', 'fail', '-', 'on', '-', 'non', '-', 'empty', 'word', 'word', '<number>', '/', 'dev', '/', 'null', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 8, 10, 10, 10, 10, 11, 31, 32]]",
            "sibling_edges": "[[10, 32, 11, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36], [1, 8, 2, 3, 4, 5, 6, 7, 31, 9, 10, 13, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 35, 36, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 39, 40, 33, 9, 34, 35, 36, 37], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 39, 40, 33, 9, 34, 35, 36, 37, 1]]"
        }
    },
    {
        "code": "dirname $( pwd -P )",
        "text": "print director i name of physic current work director i ..",
        "id": 611,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'dir', 'name', 'word', 'word', '-', 'p', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 1, 0, 0, 6, 6, 7]]",
            "sibling_edges": "[[1, 2, 6, 4, 7, 8], [2, 7, 3, 5, 6, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 2, 10, 8, 9], [5, 2, 10, 8, 9, 3]]"
        }
    },
    {
        "code": "mount --bind /tmp/fakerandom /dev/random",
        "text": "bind mount file on file ..",
        "id": 612,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'bind', '/', 'tmp', '/', 'fake', 'random', '/', 'dev', '/', 'random', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 6, 8, 9, 10, 11, 13, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -l -R Regex {} \\; | xargs -I {} grep -L Regex {}",
        "text": "list file file in current director i tree that contain string regex but not contain string regex ..",
        "id": 613,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'l', '-', 'r', 'regex', 'word', 'word', '\\\\', ';', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'l', 'regex', 'word', 'word', 'find', '{', '}', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 0, 0, 10, 10, 0, 11, 11, 0, 0, 12, 13, 13, 14, 0, 0, 15, 28, 29, 32, 32, 35, 36, 41, 42]]",
            "sibling_edges": "[[10, 1, 15, 2, 3, 4, 5, 6, 7, 8, 9, 29, 32, 11, 36, 12, 13, 14, 17, 20, 23, 25, 28, 30, 33, 35, 38, 41, 46], [1, 32, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 11, 35, 12, 13, 14, 41, 18, 21, 24, 26, 29, 31, 34, 36, 39, 42, 47]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 44, 45, 30, 31, 1, 46, 47, 33, 34, 48, 49, 37, 38, 39, 40, 50], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 44, 45, 30, 31, 1, 46, 47, 33, 34, 48, 49, 37, 38, 39, 40, 50, 51]]"
        }
    },
    {
        "code": "date -d Regex",
        "text": "format time string regex accord to default time format ..",
        "id": 614,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'd', 'regex', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -type f -size -Size",
        "text": "display all regular file in current folder that be le than size ..",
        "id": 615,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'size', '-', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 13], [1, 2, 3, 4, 5, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull ;",
        "text": "run regex in ever i sub director i of current director i ..",
        "id": 616,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'number', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'min', 'depth', '<number>', '-', 'max', 'depth', '<number>', '-', 'type', 'd', '-', 'print', '-', 'exec', 'git', '-', 'c', 'word', 'word', 'pull', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 0, 0, 13, 14, 34, 35]]",
            "sibling_edges": "[[13, 14, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 35, 16, 17, 20, 21, 24, 27, 29, 32, 34], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 34, 13, 17, 18, 21, 22, 25, 28, 30, 33, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 36], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 36, 1]]"
        }
    },
    {
        "code": "read Regex",
        "text": "read a line from standard input into v aria bl regex ..",
        "id": 617,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -print0 | xargs -0 -I {} mv --target-directory Directory {}",
        "text": "move all file from regex director i tree to regex director i ..",
        "id": 618,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'mv', '--', 'target', '-', 'directory', 'directory', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 9, 9, 10, 0, 0, 11, 20, 20, 25, 26, 33, 34]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 20, 6, 7, 26, 8, 9, 10, 13, 14, 17, 18, 21, 23, 25, 28, 29, 30, 33, 36], [1, 20, 2, 3, 4, 5, 6, 7, 25, 8, 9, 10, 33, 14, 15, 18, 19, 22, 24, 26, 29, 30, 31, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 12, 13, 14, 15, 16, 17, 18, 19, 1, 36, 37, 21, 22, 23, 24, 38, 39, 27, 28, 29, 30, 31, 32, 40], [12, 13, 14, 15, 16, 17, 18, 19, 1, 36, 37, 21, 22, 23, 24, 38, 39, 27, 28, 29, 30, 31, 32, 40, 41]]"
        }
    },
    {
        "code": "command 2>&1 | tee /path/to/logfile",
        "text": "write output and error of regex to standard output and to file ..",
        "id": 619,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'file_descriptor', '>&', 'number', 'word', '/', 'path', '/', 'to', '/', 'log', 'file', 'word', '<number>', '<number>', 'tee', 'command']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 5, 6, 14]]",
            "sibling_edges": "[[5, 1, 14, 6, 3, 4, 7, 8, 9, 10, 11, 12], [1, 6, 3, 2, 4, 5, 8, 9, 10, 11, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 15, 4, 16, 1, 17, 7, 8, 9, 10, 11, 12], [15, 4, 16, 1, 17, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path \\( ! -regex Regex \\) -type f -name Regex",
        "text": "find all regular file name regex under current director i tree excl ud all path that contain an i hide director i ..",
        "id": 620,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '!', '-', 'regex', 'regex', '\\\\', ')', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 19, 21, 24], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 20, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "tree -i -f | grep Regex | xargs -n Quantity -I {} grep -H Regex {}",
        "text": "find file and file file in current director i tree and print line contain regex ..",
        "id": 621,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'i', '-', 'f', 'word', 'regex', 'word', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'grep', '-', 'h', 'regex', 'word', 'word', 'tree', 'grep', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 0, 5, 0, 6, 6, 7, 8, 8, 0, 0, 9, 10, 10, 11, 0, 0, 12, 17, 19, 19, 25, 26, 31, 32]]",
            "sibling_edges": "[[4, 1, 5, 2, 12, 3, 17, 19, 6, 7, 8, 26, 9, 10, 11, 13, 15, 20, 23, 25, 28, 31, 35], [1, 17, 2, 19, 3, 4, 5, 6, 7, 8, 25, 9, 10, 11, 31, 14, 16, 21, 24, 26, 29, 32, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 15, 16, 1, 34, 18, 2, 35, 36, 20, 21, 22, 23, 24, 37, 38, 27, 28, 29, 30, 39], [13, 14, 15, 16, 1, 34, 18, 2, 35, 36, 20, 21, 22, 23, 24, 37, 38, 27, 28, 29, 30, 39, 40]]"
        }
    },
    {
        "code": "echo -n -e Regex | sort -V -r | head -n Quantity",
        "text": "save great version number of regex and regex into v aria bl regex ..",
        "id": 622,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', '-', 'e', 'regex', 'word', '-', 'v', '-', 'r', 'word', '-', 'n', 'quantity', 'echo', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 0, 6, 6, 7, 7, 0, 8, 8, 9, 10, 16, 21]]",
            "sibling_edges": "[[5, 1, 7, 2, 10, 3, 4, 16, 6, 21, 8, 11, 13, 17, 19, 22], [1, 16, 2, 21, 3, 4, 5, 6, 7, 8, 9, 12, 14, 18, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 11, 12, 13, 14, 15, 1, 26, 17, 18, 19, 20, 2, 27, 22, 23], [11, 12, 13, 14, 15, 1, 26, 17, 18, 19, 20, 2, 27, 22, 23, 24]]"
        }
    },
    {
        "code": "for f in $(find -name '*company*'); do\n    mv '$f' '$(echo '$f' | sed 's/company/nemcompany/')'\ndone",
        "text": "r en be all regex file and director i under current director i to regex file and director i ..",
        "id": 623,
        "graph": {
            "nodes": "['program', 'pipeline', 'command', '|', 'command', '|', 'command', 'command_name', 'word', 'word', 'word', 'command_name', 'word', 'word', 'command_name', 'word', 'word', 'word', '-', 'n', '-', 'e', 'regex', 'word', '-', 'v', '-', 'r']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 0, 6, 6, 7, 7, 0, 8, 8, 9, 10, 16, 21]]",
            "sibling_edges": "[[5, 1, 7, 2, 10, 3, 4, 16, 6, 21, 8, 11, 13, 17, 19, 22], [1, 16, 2, 21, 3, 4, 5, 6, 7, 8, 9, 12, 14, 18, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 11, 12, 13, 14, 15, 1, 26, 17, 18, 19, 20, 2, 27, 22, 23], [11, 12, 13, 14, 15, 1, 26, 17, 18, 19, 20, 2, 27, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path -user Regex -iname Regex | head",
        "text": "find all file file of user root under directory director i and show a few line of output from begin ..",
        "id": 624,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'i', 'name', 'regex', 'word', 'find', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 0, 7, 16]]",
            "sibling_edges": "[[6, 1, 7, 2, 3, 4, 5, 9, 12, 13], [1, 16, 2, 3, 4, 5, 6, 10, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15, 1], [8, 9, 10, 11, 12, 13, 14, 15, 1, 18]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file on system who be e name be file ..",
        "id": 625,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find {} -name Regex -type f -or -type l -maxdepth Quantity -perm +Permission",
        "text": "find all exe cut s ym link or regex file under maximum number level down regex director i ..",
        "id": 626,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'name', 'regex', '-', 'type', 'f', '-', 'or', '-', 'type', 'l', '-', 'max', 'depth', 'quantity', '-', 'perm', '+', 'permission', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 8, 9, 10, 10, 11, 11, 12, 13, 14]]",
            "sibling_edges": "[[12, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 18, 21, 23, 26, 27, 30, 32], [13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 19, 22, 24, 27, 28, 31, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 35, 36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [35, 36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]]"
        }
    },
    {
        "code": "cat File | grep -c Regex",
        "text": "save number of string with regex pattern in file to regex v aria bl ..",
        "id": 627,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'c', 'regex', 'cat', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 8], [1, 7, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 1, 12, 8, 9], [6, 1, 12, 8, 9, 10]]"
        }
    },
    {
        "code": "find . -name *.txt | parallel -j1 --tty vim",
        "text": "find all file file in current director i tree and edit them with regex ..",
        "id": 628,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', '*', '.', 'txt', 'word', '-', 'j', '<number>', '--', 'tt', 'y', 'vim', 'find', 'parallel']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 0, 5, 5, 5, 6, 6, 6, 7, 8, 15]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 15, 5, 6, 10, 12, 13, 16, 17, 19, 20], [1, 15, 2, 3, 4, 5, 6, 7, 11, 13, 14, 17, 18, 20, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 11, 12, 13, 14, 1, 24, 16, 17, 18, 19, 20, 21], [9, 10, 11, 12, 13, 14, 1, 24, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "echo Regex | awk Program",
        "text": "set v aria bl regex to first word of regex convert to low ca ..",
        "id": 629,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', 'program', 'echo', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 9], [1, 6, 2, 3, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 1, 9, 10], [5, 1, 9, 10, 7]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search for all file in current folder which start with gen and end with regex and assign output list to v aria bl var ..",
        "id": 630,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity",
        "text": "find all file in and below all sub director i of current director i ..",
        "id": 631,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rm -R {} \\;",
        "text": "r emo v all file and director i call regex from current director i tree ..",
        "id": 632,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rm', '-', 'r', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -iname Regex | xargs -I {} grep -i Regex {}",
        "text": "search for word regex in all file in current contain word regex in name ..",
        "id": 633,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'i', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 8, 0, 0, 9, 15, 15, 18, 19, 24, 25]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 15, 5, 19, 6, 7, 8, 11, 12, 16, 18, 21, 24, 27], [1, 15, 2, 3, 4, 5, 18, 6, 7, 8, 24, 12, 13, 17, 19, 22, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 1, 27, 28, 16, 17, 29, 30, 20, 21, 22, 23, 31], [10, 11, 12, 13, 14, 1, 27, 28, 16, 17, 29, 30, 20, 21, 22, 23, 31, 32]]"
        }
    },
    {
        "code": "find . -name *.txt -exec process {} ;",
        "text": "find all file file and director i under current director i and exe cut process command for each of them ..",
        "id": 634,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', '*', '.', 'txt', '-', 'exec', 'process', 'word', 'word', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 5, 5, 6, 0, 0, 7, 17, 18]]",
            "sibling_edges": "[[18, 7, 2, 3, 4, 5, 6, 9, 11, 12, 14, 17], [1, 2, 3, 4, 5, 6, 17, 10, 12, 13, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21], [8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 1]]"
        }
    },
    {
        "code": "find Path -type d",
        "text": "find all director i in director i tree regex ..",
        "id": 635,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "hostname -I",
        "text": "print ip address for current host name ..",
        "id": 636,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'i', 'host', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 1, 1, 2, 2]]",
            "sibling_edges": "[[2, 3, 5], [1, 4, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 6, 3], [6, 3, 4]]"
        }
    },
    {
        "code": "tac File | sort -u -t Regex -r -k Number | tac",
        "text": "filter uni qu line by match against first column of a file file ..",
        "id": 637,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'u', '-', 't', 'regex', '-', 'r', '-', 'k', 'number', 'word', 'ta', 'c', 'sort', 'ta', 'c']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 0, 10, 10, 12, 23, 23]]",
            "sibling_edges": "[[3, 1, 9, 2, 10, 12, 4, 5, 6, 7, 8, 13, 15, 18, 20, 24, 27], [1, 12, 2, 23, 3, 4, 5, 6, 7, 8, 9, 14, 16, 19, 21, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 25, 11, 1, 26, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2, 27], [25, 11, 1, 26, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2, 27, 28]]"
        }
    },
    {
        "code": "grep -R -i -l Regex File",
        "text": "find recur and follow s ym link from root folder all file that contain regex and print file name ..",
        "id": 638,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'i', '-', 'l', 'regex', 'file', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 9, 11], [1, 2, 3, 4, 5, 8, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "ln -s -n File Regex",
        "text": "c re at a symbol link name file to file without de refer enc file ..",
        "id": 639,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 's', '-', 'n', 'file', 'regex', 'ln']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "cd Directory",
        "text": "go to director i file ..",
        "id": 640,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'cd']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find . -lname `pwd`* -exec sh -c ln -snvf `python -c 'from os.path import *; print relpath(\\'$(readlink {})\\',dirname(\\'{}\\'))'` {} ;",
        "text": "convert all ab sol ut symbol link to rel at symbol link ..",
        "id": 641,
        "graph": {
            "nodes": "['program', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '`', ';', ')', 'ERROR', 'word', '.', '-', 'l', 'name', 'word', '-', 'exec', 'sh', '-', 'c', 'ln', '-', 'snvf', 'word', '(', ')', \"'\", '`', '{', '}', ';', 'find', '`', '`', '*', 'word', '-', 'c', 'raw_string', 'word', 'python', \"'\", 'from', 'os', '.', 'path', 'import', '*', ';', 'print', 'rel', 'path', '(', '\\\\', \"'\", '$(', ')', '\\\\', \"'\", ',', 'dir', 'name', 'word', 'word', 'word', 'word', 'word', 'pwd', 'word', 'word', 'word', '\\\\', \"'\", '{', '}', '\\\\', \"'\", 'read', 'link', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 0, 3, 3, 4, 5, 5, 6, 7, 7, 0, 0, 0, 11, 11, 11, 11, 11, 12, 0, 0, 17, 0, 26, 26, 0, 0, 38, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0, 65, 0, 0, 0, 66, 66, 67, 68, 69, 69, 71, 71, 72, 73]]",
            "sibling_edges": "[[7, 12, 1, 2, 17, 3, 4, 5, 6, 8, 42, 9, 28, 10, 14, 15, 36, 18, 21, 24, 38, 26, 27, 69, 29, 30, 31, 32, 35, 65, 39, 41, 59, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 73, 60, 61, 62, 63, 71, 66, 67, 68, 72, 74, 78, 80], [8, 1, 2, 35, 3, 4, 5, 6, 7, 38, 9, 27, 10, 11, 15, 16, 17, 19, 22, 25, 26, 41, 66, 28, 30, 31, 32, 33, 65, 36, 40, 58, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 71, 59, 61, 62, 63, 64, 72, 67, 68, 69, 73, 75, 79, 81]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 13, 14, 15, 16, 35, 70, 36, 37, 18, 19, 20, 21, 22, 23, 24, 25, 8, 43, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 80, 81, 82, 83, 59, 60, 61, 62, 63, 64, 9, 27, 74, 75, 76, 77, 78, 79, 28, 10, 29, 30, 31, 32], [13, 14, 15, 16, 35, 70, 36, 37, 18, 19, 20, 21, 22, 23, 24, 25, 8, 43, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 80, 81, 82, 83, 59, 60, 61, 62, 63, 64, 9, 27, 74, 75, 76, 77, 78, 79, 28, 10, 29, 30, 31, 32, 33]]"
        }
    },
    {
        "code": "find Path -type f -exec ls -1 {} \\;",
        "text": "display a long list of all file in current folder ..",
        "id": 642,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ls', '-', '<number>', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan",
        "text": "search home director i tree for file last mod if i more than time span ago ..",
        "id": 643,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -type f \\( -iname Regex -or -iname Regex \\) ! -path Regex",
        "text": "find all file and file file under file excl ud file path ..",
        "id": 644,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'i', 'name', 'regex', '-', 'or', '-', 'i', 'name', 'regex', '\\\\', ')', '!', '-', 'path', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14]]",
            "sibling_edges": "[[14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 19, 21, 22, 25, 27, 28, 31, 34], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 20, 22, 23, 26, 28, 29, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]]"
        }
    },
    {
        "code": "find Path -name Regex -and -name Regex -and -not -name Regex",
        "text": "search current director i tree for file contain regex and regex in name and not contain number ..",
        "id": 645,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'and', '-', 'name', 'regex', '-', 'and', '-', 'not', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "find Path -exec file {} \\; | grep Regex | cut -d Regex -f Number",
        "text": "find all file who be e name or type de script incl ud regex display on li path to file ..",
        "id": 646,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'file', 'word', 'word', '\\\\', ';', 'word', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'find', '{', '}', 'grep', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 0, 6, 6, 0, 7, 0, 8, 8, 9, 10, 10, 11, 12, 17, 18, 21, 23]]",
            "sibling_edges": "[[6, 1, 7, 2, 12, 3, 4, 5, 18, 21, 23, 8, 9, 10, 14, 17, 19, 24, 27], [1, 21, 2, 23, 3, 4, 5, 17, 6, 7, 8, 9, 10, 11, 15, 18, 20, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 13, 14, 15, 16, 31, 32, 19, 20, 1, 33, 22, 2, 34, 24, 25, 26, 27, 28], [13, 14, 15, 16, 31, 32, 19, 20, 1, 33, 22, 2, 34, 24, 25, 26, 27, 28, 29]]"
        }
    },
    {
        "code": "find . -type l -! -exec test -e {} ; -print",
        "text": "find all break s ym link under current director i ..",
        "id": 647,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'l', '-', '!', '-', 'exec', 'test', '-', 'e', 'word', 'word', 'word', 'find', '{', '}', '-', 'print']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 0, 0, 0, 9, 21, 22, 23, 23]]",
            "sibling_edges": "[[22, 1, 9, 2, 3, 4, 5, 6, 7, 8, 11, 14, 16, 19, 21, 27], [1, 23, 2, 3, 4, 5, 6, 7, 8, 21, 12, 15, 17, 20, 22, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 1, 27], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 1, 27, 28]]"
        }
    },
    {
        "code": "find Path -type f",
        "text": "display all regular file in a folder ..",
        "id": 648,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path \\( -size +Size -and -size -Size \\)",
        "text": "find file in current director i tree of size between size and size ..",
        "id": 649,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'size', '+', 'size', '-', 'and', '-', 'size', '-', 'size', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 21, 23], [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 16, 18, 20, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "grep Regex $( find Path -name Regex )",
        "text": "search all line that start with word m alloc in file end with file or file or file ..",
        "id": 650,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', '$(', ')', 'grep', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 7, 8, 8, 9, 10]]",
            "sibling_edges": "[[2, 1, 4, 9, 10, 7, 8, 12], [1, 4, 10, 5, 7, 8, 9, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 4, 15, 11, 12, 13, 14], [3, 4, 15, 11, 12, 13, 14, 5]]"
        }
    },
    {
        "code": "yes | cp File File",
        "text": "answer regex to all regex prompt from command file ..",
        "id": 651,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'file', 'file', 'yes', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 0, 2, 3, 4, 5]]",
            "sibling_edges": "[[4, 1, 5, 2], [1, 5, 2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 1, 9, 6], [1, 9, 6, 7]]"
        }
    },
    {
        "code": "screen -x main -p oldwindow -X title blah",
        "text": "c re at a name screen session ..",
        "id": 652,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'x', 'main', '-', 'p', 'old', 'window', '-', 'x', 'title', 'blah', 'screen']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 12, 14, 16], [1, 2, 3, 4, 5, 6, 7, 10, 13, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "mktemp -d --tmpdir Directory -t Regex",
        "text": "c re at tempo rar i folder in a regex folder with name pattern def in by regex and store path to c re at folder in regex v aria bl ..",
        "id": 653,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', '--', 'tmp', 'dir', 'directory', '-', 't', 'regex', 'mk', 'temp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 9, 10, 13, 16], [1, 2, 3, 4, 5, 8, 10, 11, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 17, 7, 8, 9, 10, 11, 12, 13, 14], [17, 7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -type d -prune -exec rm -r -f {} +",
        "text": "search non recur director i tree file for director i who be e name be regex and de let them in an op ti m way ..",
        "id": 654,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'd', '-', 'prune', '-', 'exec', 'rm', '-', 'r', '-', 'f', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 0, 0, 11, 12, 29, 30]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 14, 17, 20, 22, 25, 27, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 11, 15, 18, 21, 23, 26, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 31]]"
        }
    },
    {
        "code": "unzip -l some-jars-and-textfiles.zip | tr [:blank:] \\t | cut -f 5 | grep jar",
        "text": "clean up output of regex and print on li file file ..",
        "id": 655,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', '-', 'l', 'some', '-', 'jar', '-', 'and', '-', 'text', 'file', '.', 'zip', 'word', 'word', 'word', 'word', '\\\\', 't', 'word', '-', 'f', '<number>', 'word', 'jar', 'unzip', 'tr', '[', ':', 'blank', ':', ']', 'cut', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 6, 6, 0, 7, 7, 8, 0, 9, 10, 23, 24, 25, 25, 25, 26, 29, 33]]",
            "sibling_edges": "[[5, 1, 6, 2, 8, 3, 10, 4, 23, 26, 29, 7, 33, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 30, 38, 39], [1, 23, 2, 29, 3, 33, 4, 5, 24, 6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 28, 31, 39, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 36, 37, 38, 39, 40, 41, 27, 28, 2, 42, 30, 31, 32, 3, 43], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 36, 37, 38, 39, 40, 41, 27, 28, 2, 42, 30, 31, 32, 3, 43, 34]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} tar -c -z -v -f File {}",
        "text": "c re at a tar ball of all file file in current folder ..",
        "id": 656,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'tar', '-', 'c', '-', 'z', '-', 'v', '-', 'f', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 0, 0, 12, 17, 17, 20, 21, 32, 33]]",
            "sibling_edges": "[[4, 1, 12, 2, 3, 17, 5, 21, 6, 7, 8, 9, 10, 11, 14, 18, 20, 23, 25, 27, 29, 32, 35], [1, 17, 2, 3, 4, 5, 20, 6, 7, 8, 9, 10, 11, 32, 15, 19, 21, 24, 26, 28, 30, 33, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 13, 14, 15, 16, 1, 35, 36, 18, 19, 37, 38, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 39], [13, 14, 15, 16, 1, 35, 36, 18, 19, 37, 38, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 39, 40]]"
        }
    },
    {
        "code": "find Cam2/2013* -name *.jpg -print0 | xargs -0 cat | ffmpeg -f image2pipe -framerate 30 -vcodec mjpeg -i - -vcodec libx264 -profile:v baseline -level 3.0 -movflags +faststart -crf 19 -pix_fmt yuv420p -r 30 Cam2-2013-30fps-19crf.mp4",
        "text": "find all file file in file path and send content to a ff m peg command to c re at a video file ..",
        "id": 657,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'number', 'word', 'word', 'cam', '<number>', '/', '<number>', '*', '-', 'name', '*', '.', 'jpg', '-', 'print', '<number>', 'word', '-', '<number>', 'cat', 'word', '-', 'f', 'image', '<number>', 'pipe', '-', 'frame', 'rate', '<number>', '-', 'v', 'code', 'c', 'm', 'jpeg', '-', 'i', '-', '-', 'v', 'code', 'c', 'lib', 'x', '<number>', '-', 'profile', ':', 'v', 'baseline', '-', 'level', '<number>', '.', '<number>', '-', 'mo', 'v', 'flag', '+', 'fast', 'start', '-', 'crf', '<number>', '-', 'pix', 'f', 'mt', 'yuv', '<number>', 'p', '-', 'r', '<number>', 'cam', '<number>', '-', '<number>', '-', '<number>', 'fps', '-', '<number>', 'crf', '.', 'mp', '<number>', 'find', 'x', 'arg', 'ff', 'm', 'peg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 0, 7, 7, 8, 0, 9, 9, 10, 10, 10, 11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20, 21, 21, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 26, 27, 27, 27, 27, 28, 28, 28, 29, 29, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 46, 46, 50, 50, 50]]",
            "sibling_edges": "[[6, 1, 8, 2, 32, 3, 4, 5, 46, 7, 50, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 38, 40, 41, 43, 44, 47, 51, 53, 54, 56, 57, 60, 61, 62, 64, 66, 69, 70, 71, 73, 74, 76, 77, 78, 81, 83, 84, 86, 87, 88, 90, 91, 93, 96, 97, 98, 100, 101, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 123], [1, 46, 2, 50, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 41, 42, 44, 45, 48, 52, 54, 55, 57, 58, 61, 62, 63, 65, 67, 70, 71, 72, 74, 75, 77, 78, 79, 82, 84, 85, 87, 88, 89, 91, 92, 94, 97, 98, 99, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 123, 124]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[119, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 1, 120, 121, 47, 48, 49, 2, 122, 123, 124, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 1, 120, 121, 47, 48, 49, 2, 122, 123, 124, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118]]"
        }
    },
    {
        "code": "find Path -name Regex | sed -e Program | sort | uniq",
        "text": "search for al file file in current folder and rep lac all expect p be not director i name of t he be e file and display it them sort order ..",
        "id": 658,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'e', 'program', 'word', 'word', 'find', 's', 'ed', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 0, 7, 7, 8, 0, 0, 9, 14, 14, 18, 19, 19]]",
            "sibling_edges": "[[6, 1, 8, 2, 18, 3, 9, 4, 5, 14, 7, 11, 15, 21, 24], [1, 14, 2, 18, 3, 19, 4, 5, 6, 7, 8, 12, 16, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 10, 11, 12, 13, 1, 21, 22, 15, 16, 17, 2, 23, 3, 24], [10, 11, 12, 13, 1, 21, 22, 15, 16, 17, 2, 23, 3, 24, 25]]"
        }
    },
    {
        "code": "find Path -regex Regex",
        "text": "display all text and file file in current folder ..",
        "id": 659,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\;",
        "text": "c hang per miss to number for all director i in current director i tree ..",
        "id": 660,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "nl",
        "text": "number each non blank line of standard input ..",
        "id": 661,
        "graph": {
            "nodes": "['program', 'command', 'command_name', 'word', 'word', 'word', 'word', 'word', 'word', 'concatenation', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "yum --enablerepo=remi upgrade php-mbstring",
        "text": "up grad regex pack ag en a bl regex re posit or i ..",
        "id": 662,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'enable', 'repo', '=', 'rem', 'i', 'upgrade', 'php', '-', 'mb', 'string', 'yum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 6, 7, 8, 9, 12, 13, 14], [1, 2, 3, 6, 7, 8, 9, 10, 13, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "read Regex Regex Regex Regex Regex Regex Regex Regex Regex Regex Regex",
        "text": "read a line from standard input and save rec e iv word seq u en ti in v aria bl pi d user id prior it i virtual pre id share state cpu me m time command ..",
        "id": 663,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'regex', 'regex', 'regex', 'regex', 'regex', 'regex', 'regex', 'regex', 'regex', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path -regex Regex ! -regex Regex -type d -links Quantity",
        "text": "find all leaf director i that incl ud on li one occur r of regex ..",
        "id": 664,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'regex', '!', '-', 'regex', 'regex', '-', 'type', 'd', '-', 'link', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 17, 20, 23], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 18, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "cat File | paste -s -d File",
        "text": "write ever i number line in regex on a sing l line se par by a space ..",
        "id": 665,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 's', '-', 'd', 'file', 'cat', 'paste']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 5, 6, 8]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 4, 9, 11], [1, 8, 2, 3, 4, 5, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 1, 15, 9, 10, 11, 12], [7, 1, 15, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -type f -print | xargs -I {} ls -l {}",
        "text": "list all file in current director i tree inv ok x arg on li on c ..",
        "id": 666,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'word', '-', 'i', 'word', 'word', 'ls', '-', 'l', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 0, 6, 6, 0, 0, 7, 8, 8, 0, 0, 9, 16, 16, 19, 20, 24, 25]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 16, 6, 20, 7, 8, 11, 14, 17, 19, 22, 24, 27], [1, 16, 2, 3, 4, 5, 6, 19, 7, 8, 24, 12, 15, 18, 20, 23, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 15, 1, 27, 28, 17, 18, 29, 30, 21, 22, 23, 31], [10, 11, 12, 13, 14, 15, 1, 27, 28, 17, 18, 29, 30, 21, 22, 23, 31, 32]]"
        }
    },
    {
        "code": "find Path -name Regex -exec chgrp -v Regex {} \\; -exec chmod -v Permission {} \\;",
        "text": "c hang group to regex and per miss to number for all file in current folder ..",
        "id": 667,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'chg', 'rp', '-', 'v', 'regex', 'word', 'word', '\\\\', ';', '-', 'exec', 'ch', 'mod', '-', 'v', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 0, 0, 8, 8, 9, 9, 10, 10, 11, 11, 12, 0, 0, 13, 13, 14, 26, 27, 37, 38]]",
            "sibling_edges": "[[14, 1, 2, 3, 4, 5, 6, 7, 27, 8, 9, 10, 11, 12, 38, 16, 19, 21, 23, 26, 28, 30, 32, 34, 37, 39], [1, 2, 3, 4, 5, 6, 7, 26, 8, 9, 10, 11, 12, 37, 13, 17, 20, 22, 24, 27, 29, 31, 33, 35, 38, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 42, 43, 28, 29, 30, 31, 32, 33, 34, 35, 36, 44, 45, 39], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 42, 43, 28, 29, 30, 31, 32, 33, 34, 35, 36, 44, 45, 39, 40]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} +",
        "text": "set per miss to number for all director i in current director i tree ..",
        "id": 668,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 20]]"
        }
    },
    {
        "code": "cp --remove-destination $( readlink File ) File",
        "text": "cop i file link to by regex to regex ..",
        "id": 669,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '--', 'remove', '-', 'destination', '$(', ')', 'file', 'cp', 'word', 'word', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 3, 0, 0, 12, 13, 13]]",
            "sibling_edges": "[[3, 1, 9, 4, 5, 6, 8, 12, 13, 15], [1, 8, 2, 5, 6, 7, 13, 9, 12, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 4, 5, 6, 7, 8, 15, 16, 14, 9], [4, 5, 6, 7, 8, 15, 16, 14, 9, 10]]"
        }
    },
    {
        "code": "find Path -type f -size +Size",
        "text": "find regular file that be large than size ..",
        "id": 670,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'size', '+', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 13], [1, 2, 3, 4, 5, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "echo ee | tee /dev/pty/2 | foo",
        "text": "write regex to standard output on file and as input to command regex ..",
        "id": 671,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'ee', 'word', '/', 'dev', '/', 'pt', 'y', '/', '<number>', 'word', 'echo', 'tee', 'foo']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 3, 0, 4, 4, 4, 4, 4, 4, 4, 0, 5, 7, 15]]",
            "sibling_edges": "[[3, 1, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13], [1, 7, 2, 15, 3, 4, 9, 10, 11, 12, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 6, 1, 17, 8, 9, 10, 11, 12, 13, 14, 2], [6, 1, 17, 8, 9, 10, 11, 12, 13, 14, 2, 18]]"
        }
    },
    {
        "code": "find PDFs/ -name *.pdf -exec sh -c pdftotext '{}' - | grep -l -Z -i --label='{}' 'perry sound' | xargs -0 -I{} grep -i -l --label='{}' 'October 26, 2004' '{}' ;",
        "text": "find file file in file director i tree that contain text regex and date time ..",
        "id": 672,
        "graph": {
            "nodes": "['program', ';', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'raw_string', 'number', 'word', 'word', 'word', 'raw_string', 'raw_string', 'word', 'pdf', '/', '-', 'name', '*', '.', 'pdf', '-', 'exec', 'sh', '-', 'c', 'pdf', 'to', 'text', \"'\", '{', '}', \"'\", '-', 'word', '-', 'l', '-', 'z', '-', 'i', 'word', 'raw_string', \"'\", 'p', 'err', 'y', 'sound', \"'\", 'word', '-', '<number>', 'word', 'word', 'word', 'grep', '-', 'i', '-', 'l', 'word', 'raw_string', \"'\", 'october', '<number>', ',', '<number>', \"'\", \"'\", '{', '}', \"'\", 'find', 'grep', '--', 'label', '=', \"'\", '{', '}', \"'\", 'x', 'arg', '-', 'i', '{', '}', '--', 'label', '=', \"'\", '{', '}', \"'\"]",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 0, 13, 13, 14, 14, 15, 15, 0, 0, 16, 16, 16, 16, 16, 16, 0, 17, 17, 0, 0, 0, 18, 19, 19, 20, 20, 0, 0, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 44, 51, 51, 51, 52, 52, 52, 52, 59, 59, 62, 62, 63, 64, 70, 70, 70, 71, 71, 71, 71]]",
            "sibling_edges": "[[22, 12, 2, 16, 3, 23, 4, 5, 6, 7, 8, 9, 10, 11, 44, 13, 14, 15, 52, 59, 17, 64, 18, 19, 20, 71, 21, 24, 26, 28, 29, 31, 34, 36, 37, 39, 40, 41, 45, 47, 49, 51, 53, 54, 55, 56, 57, 60, 62, 63, 66, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 84, 85, 87, 88, 89, 91, 93, 97, 98, 100, 101, 102], [1, 2, 44, 3, 59, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 51, 16, 17, 62, 18, 19, 20, 70, 21, 22, 25, 27, 29, 30, 32, 35, 37, 38, 40, 41, 42, 46, 48, 50, 52, 54, 55, 56, 57, 58, 61, 63, 64, 67, 69, 71, 73, 74, 75, 76, 77, 79, 80, 81, 85, 86, 88, 89, 90, 92, 94, 98, 99, 101, 102, 103]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[82, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 2, 83, 45, 46, 47, 48, 49, 50, 84, 85, 86, 87, 88, 89, 90, 53, 54, 55, 56, 57, 58, 3, 91, 92, 60, 61, 93, 94, 95, 96, 65, 66, 67, 68, 69, 97, 98, 99, 100, 101, 102, 103, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 2, 83, 45, 46, 47, 48, 49, 50, 84, 85, 86, 87, 88, 89, 90, 53, 54, 55, 56, 57, 58, 3, 91, 92, 60, 61, 93, 94, 95, 96, 65, 66, 67, 68, 69, 97, 98, 99, 100, 101, 102, 103, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 1]]"
        }
    },
    {
        "code": "find Path -type f -name Regex ! -path Regex ! -path Regex ! -path Regex",
        "text": "find file file in current director i tree ig nor path file file and file ..",
        "id": 673,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '!', '-', 'path', 'regex', '!', '-', 'path', 'regex', '!', '-', 'path', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 13, 13, 14, 15]]",
            "sibling_edges": "[[15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 20, 24, 28, 32], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 21, 25, 29, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]]"
        }
    },
    {
        "code": "find . -type f -printf %p %s\\n | perl -ane $sum+=$F[1];END{print '$sum\\n'}",
        "text": "get total size of all file under current director i ..",
        "id": 674,
        "graph": {
            "nodes": "['program', ';', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', '.', '-', 'type', 'f', '-', 'print', 'f', '%', 'p', '%', 's', 'word', '-', 'an', 'e', 'word', 'word', 'number', 'word', 'word', 'word', 'word', \"'\", '$', 'sum', \"'\", '}', 'find', 'perl', '$', 'variable_name', '+', '=', '$', 'variable_name', '[', '<number>', ']', 'end', '{', 'print', 'sum', 'f']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 7, 7, 8, 8, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 11, 12, 24, 0, 0, 28, 28, 0, 0, 29, 30, 31, 32, 33, 34, 43, 47]]",
            "sibling_edges": "[[31, 1, 8, 2, 34, 12, 3, 4, 5, 6, 7, 24, 9, 10, 14, 17, 18, 20, 22, 25, 26, 43, 28, 47, 29, 30, 32, 33, 35, 36, 37, 42, 44, 46], [1, 32, 2, 24, 10, 3, 4, 5, 6, 7, 8, 9, 42, 11, 15, 18, 19, 21, 23, 26, 27, 28, 46, 29, 30, 31, 33, 34, 36, 37, 38, 43, 45, 47]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[40, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 2, 41, 25, 26, 27, 42, 54, 44, 45, 46, 55, 48, 49, 50, 1, 51, 52, 53, 35, 36, 37, 38], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 2, 41, 25, 26, 27, 42, 54, 44, 45, 46, 55, 48, 49, 50, 1, 51, 52, 53, 35, 36, 37, 38, 39]]"
        }
    },
    {
        "code": "find Path -type d -iname Regex -ls",
        "text": "find not case sen it all director i that name be regex and display detail ..",
        "id": 675,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'i', 'name', 'regex', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 13, 16], [1, 2, 3, 4, 5, 6, 10, 13, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "ln -s -f File Regex",
        "text": "c re at a symbol link with ab sol ut path file to file directory ..",
        "id": 676,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 's', '-', 'f', 'file', 'regex', 'ln']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "zcat number.txt.gz | { zcat xxx.txt.gz | comm -12 /dev/fd/3 - ; } 3<&0",
        "text": "print share line in file and file ..",
        "id": 677,
        "graph": {
            "nodes": "['redirected_statement', '|', 'file_descriptor', '<&', 'number', 'word', '{', ';', '}', '<number>', '<number>', 'word', 'number', '.', 'txt', '.', 'gz', '|', 'z', 'cat', 'word', 'number', 'word', 'word', 'word', 'xxx', '.', 'txt', '.', 'gz', 'word', '-', '<number>', '/', 'dev', '/', 'fd', '/', '<number>', '-', 'z', 'cat', 'comm']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 5, 5, 5, 5, 5, 0, 11, 11, 0, 0, 0, 0, 0, 20, 20, 20, 20, 20, 0, 21, 21, 22, 22, 22, 22, 22, 22, 23, 24, 24, 30]]",
            "sibling_edges": "[[8, 5, 1, 2, 3, 11, 6, 23, 7, 12, 13, 14, 15, 20, 17, 18, 24, 30, 21, 22, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 40], [2, 1, 6, 3, 4, 5, 24, 7, 8, 13, 14, 15, 16, 17, 30, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 19, 12, 13, 14, 15, 16, 1, 6, 40, 41, 25, 26, 27, 28, 29, 17, 42, 31, 32, 33, 34, 35, 36, 37, 38, 39, 7, 8, 9, 3], [19, 12, 13, 14, 15, 16, 1, 6, 40, 41, 25, 26, 27, 28, 29, 17, 42, 31, 32, 33, 34, 35, 36, 37, 38, 39, 7, 8, 9, 3, 10]]"
        }
    },
    {
        "code": "find . -type f -exec sh -c echo first; false ; -exec echo second ;",
        "text": "find all file in current director i and exe cut regex for each file ..",
        "id": 678,
        "graph": {
            "nodes": "['program', ';', ';', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'exec', 'sh', '-', 'c', 'echo', 'first', 'word', 'word', 'echo', 'second', 'find', 'false', '-', 'exec']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 0, 0, 12, 13, 14, 26, 27, 27]]",
            "sibling_edges": "[[11, 1, 26, 2, 13, 14, 4, 5, 6, 7, 8, 9, 10, 27, 12, 16, 19, 22, 32], [1, 26, 2, 27, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 20, 23, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 31, 2, 32, 33, 28, 29], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 31, 2, 32, 33, 28, 29, 3]]"
        }
    },
    {
        "code": "find Path -type d -mindepth Quantity -print -exec chmod Permission File \\;",
        "text": "find all director i under minimum number level down current director i and set per miss to number ..",
        "id": 679,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'min', 'depth', 'quantity', '-', 'print', '-', 'exec', 'ch', 'mod', 'permission', 'file', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 10, 11, 11, 12]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 18, 21, 23, 25, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 18, 19, 22, 24, 26, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]]"
        }
    },
    {
        "code": "find Path -iname Regex | grep Regex",
        "text": "search for file with regex in name and regex in path name ..",
        "id": 680,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'word', 'regex', 'find', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 0, 5, 6, 12]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 12, 8, 9], [1, 12, 2, 3, 4, 5, 9, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 1, 15], [7, 8, 9, 10, 11, 1, 15, 13]]"
        }
    },
    {
        "code": "find Path -type f -not -name Regex -mtime +Timespan -exec ls {} \\;",
        "text": "display list of all normal file excl ud hide file which be access in time span ..",
        "id": 681,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'not', '-', 'name', 'regex', '-', 'm', 'time', '+', 'timespan', '-', 'exec', 'ls', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 7, 8, 8, 9, 9, 10, 0, 0, 11, 11, 12, 30, 31]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 31, 14, 17, 19, 22, 23, 25, 27, 30, 32], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 11, 15, 18, 20, 23, 24, 26, 28, 31, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 32], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 32, 33]]"
        }
    },
    {
        "code": "find Path -mmin +Quantity",
        "text": "find file on system mod if i more than time span ago ..",
        "id": 682,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'mm', 'in', '+', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "sed -i Program File",
        "text": "mod if i and re writ regex rep lac all inst an c of regex with regex ..",
        "id": 683,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'i', 'program', 'file', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity | xargs -I {} chmod Permission {}",
        "text": "c hang per miss to number for file and director i deep than current director i ..",
        "id": 684,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', 'word', '-', 'i', 'word', 'word', 'ch', 'mod', 'permission', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 0, 5, 5, 0, 0, 6, 6, 7, 0, 0, 8, 14, 14, 17, 18, 22, 23]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 14, 5, 18, 6, 7, 10, 11, 15, 17, 19, 22, 25], [1, 14, 2, 3, 4, 5, 17, 6, 7, 22, 11, 12, 16, 18, 20, 23, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 9, 10, 11, 12, 13, 1, 25, 26, 15, 16, 27, 28, 19, 20, 21, 29], [9, 10, 11, 12, 13, 1, 25, 26, 15, 16, 27, 28, 19, 20, 21, 29, 30]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "search for file in current folder end with file ..",
        "id": 685,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex -exec sed -i Program {} +",
        "text": "rep lac all occur r of word regex with regex in file and file file from current director i tree ..",
        "id": 686,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 's', 'ed', '-', 'i', 'program', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 0, 0, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 14, 16, 18, 21], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 15, 17, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 23]]"
        }
    },
    {
        "code": "history Quantity | tac | nl | tac | sed Program",
        "text": "prep end revers hist or i number as neg at val u to output of hist or i command with argument regex ..",
        "id": 687,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'quantity', 'word', 'word', 'word', 'word', 'program', 'history', 'ta', 'c', 'nl', 'ta', 'c', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 6, 7, 9, 9, 10, 11, 11, 12, 12]]",
            "sibling_edges": "[[5, 1, 9, 2, 10, 3, 11, 4, 7, 12, 15, 18, 20], [1, 9, 2, 10, 3, 11, 4, 12, 5, 6, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 8, 1, 15, 16, 2, 17, 3, 18, 19, 4, 20, 21], [8, 1, 15, 16, 2, 17, 3, 18, 19, 4, 20, 21, 13]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -not -name Regex",
        "text": "search current director i tree for all regular non hide file except file ..",
        "id": 688,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'not', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 14, 17, 19], [1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]]"
        }
    },
    {
        "code": "find Path -name Regex -exec dirname {} \\;",
        "text": "find all file file in current director i tree and print path n be of p be not director i ..",
        "id": 689,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'dir', 'name', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 0, 0, 6, 6, 7, 16, 17]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 17, 9, 12, 14, 16, 18], [1, 2, 3, 4, 5, 16, 6, 10, 13, 15, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18], [8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18, 19]]"
        }
    },
    {
        "code": "find Path Path Path -name Regex",
        "text": "search number folder name foo bar and baz for all file file ..",
        "id": 690,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 10], [1, 2, 3, 4, 5, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 7, 8, 9, 10, 11], [7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -type d -name Regex",
        "text": "search for director i test dir in folder file ..",
        "id": 691,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find . -type d -name *log* | xargs -I {} sh -c echo {};ls -la {} | tail -2",
        "text": "find all director i match pattern regex in current director i tree and print last number line of regex list ..",
        "id": 692,
        "graph": {
            "nodes": "['program', ';', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', '.', '-', 'type', 'd', '-', 'name', '*', 'log', '*', 'word', '-', 'i', 'word', 'word', 'sh', '-', 'c', 'echo', 'word', 'word', 'word', '-', 'la', 'word', 'word', 'word', '-', '<number>', 'find', 'x', 'arg', '{', '}', '{', '}', 'ls', '{', '}', 'tail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 8, 8, 8, 0, 9, 9, 0, 0, 10, 11, 11, 12, 0, 0, 0, 13, 13, 0, 0, 0, 14, 14, 15, 25, 25, 28, 29, 34, 35, 36, 39, 40, 41]]",
            "sibling_edges": "[[35, 1, 8, 2, 40, 3, 15, 4, 5, 6, 7, 25, 9, 29, 10, 11, 12, 36, 13, 41, 17, 20, 22, 23, 26, 28, 31, 34, 37, 39, 42, 45], [1, 36, 2, 25, 3, 41, 4, 5, 6, 7, 8, 9, 28, 10, 11, 12, 34, 13, 39, 14, 18, 21, 23, 24, 27, 29, 32, 35, 38, 40, 43, 46]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[44, 16, 17, 18, 19, 20, 21, 22, 23, 24, 2, 45, 46, 26, 27, 47, 48, 30, 31, 32, 33, 49, 50, 1, 51, 37, 38, 52, 53, 3, 54, 42], [16, 17, 18, 19, 20, 21, 22, 23, 24, 2, 45, 46, 26, 27, 47, 48, 30, 31, 32, 33, 49, 50, 1, 51, 37, 38, 52, 53, 3, 54, 42, 43]]"
        }
    },
    {
        "code": "mv File",
        "text": "r en be file to file ..",
        "id": 693,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'mv']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path Path -type f",
        "text": "find all regular file in current director i and file director i ..",
        "id": 694,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 8], [1, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -name Regex -ls",
        "text": "display list of all hide file in director i directory ..",
        "id": 695,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path \\( -path Regex -prune -or ! -name Regex \\) -and -name Regex",
        "text": "find file and file file under current director i tree skip hide director i and file ..",
        "id": 696,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'path', 'regex', '-', 'prune', '-', 'or', '!', '-', 'name', 'regex', '\\\\', ')', '-', 'and', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 13, 14]]",
            "sibling_edges": "[[14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 18, 21, 23, 26, 29, 31, 33], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 19, 22, 24, 27, 30, 32, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file and director i name regex under current director i ..",
        "id": 697,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "df -h File",
        "text": "report file system contain path to directory disk u sag human read ..",
        "id": 698,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'h', 'file', 'df']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -amin Quantity",
        "text": "find all file and director i under current director i that be access time span ago ..",
        "id": 699,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'be', 'in', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -user Regex",
        "text": "find all file start from directory that belong to regex ..",
        "id": 700,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "finger $USER_NAME | grep Directory | expand | cut -d   -f 2",
        "text": "print home folder of regex ..",
        "id": 701,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'number', 'word', '$', 'variable_name', 'word', 'directory', 'word', 'word', '-', 'd', '-', 'f', '<number>', 'finger', 'user', 'name', 'grep', 'expand', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 5, 6, 6, 7, 8, 10, 10, 11, 13, 14]]",
            "sibling_edges": "[[10, 1, 4, 2, 13, 3, 8, 11, 14, 5, 6, 9, 15, 17, 21], [1, 11, 2, 13, 3, 14, 9, 4, 5, 6, 7, 10, 16, 18, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 21, 22, 1, 23, 12, 2, 24, 3, 25, 15, 16, 17, 18], [9, 21, 22, 1, 23, 12, 2, 24, 3, 25, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "yes | head -n Quantity | grep -n Regex | cut -d Regex -f Number | paste -s -d Regex",
        "text": "print number number through number se par by regex ..",
        "id": 702,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', 'word', '-', 'n', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', '-', 's', '-', 'd', 'regex', 'yes', 'head', 'grep', 'cut', 'paste']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 0, 7, 7, 8, 0, 9, 9, 10, 11, 11, 12, 0, 13, 13, 14, 14, 15, 16, 17, 21, 25, 32]]",
            "sibling_edges": "[[16, 1, 6, 2, 8, 3, 12, 4, 17, 5, 21, 7, 25, 9, 10, 11, 32, 13, 14, 18, 22, 26, 29, 33, 35], [1, 17, 2, 21, 3, 25, 4, 32, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 23, 27, 30, 34, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 1, 39, 18, 19, 20, 2, 40, 22, 23, 24, 3, 41, 26, 27, 28, 29, 30, 31, 4, 42, 33, 34, 35, 36], [1, 39, 18, 19, 20, 2, 40, 22, 23, 24, 3, 41, 26, 27, 28, 29, 30, 31, 4, 42, 33, 34, 35, 36, 37]]"
        }
    },
    {
        "code": "find Path -type f \\( -iname Regex -or -iname Regex \\)",
        "text": "find all regex and regex file under current director i ..",
        "id": 703,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'i', 'name', 'regex', '-', 'or', '-', 'i', 'name', 'regex', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 8, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 18, 19, 22, 24, 25, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 19, 20, 23, 25, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]"
        }
    },
    {
        "code": "ps -p $$ | awk $1 == PP {print $4} PP=$$",
        "text": "get current shell 's exe cut name from output of regex ..",
        "id": 704,
        "graph": {
            "nodes": "['pipeline', '|', 'word', '==', 'word', 'word', '-', 'p', '$', 'special_variable_name', 'word', '$', 'variable_name', 'pp', 'word', 'word', 'word', 'word', '$', 'ps', '$', 'a', 'wk', '<number>', '{', 'print', '$', 'variable_name', '}', 'pp', '=', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 5, 9, 10, 10, 12, 14, 15, 0, 0, 16, 17, 17, 27]]",
            "sibling_edges": "[[9, 1, 5, 2, 10, 12, 3, 4, 15, 16, 6, 8, 11, 14, 27, 17, 21, 26, 29], [1, 10, 2, 8, 11, 3, 4, 14, 26, 17, 7, 9, 12, 15, 16, 18, 22, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 6, 7, 8, 20, 1, 21, 22, 11, 23, 3, 13, 24, 25, 26, 31, 28, 29, 30], [6, 7, 8, 20, 1, 21, 22, 11, 23, 3, 13, 24, 25, 26, 31, 28, 29, 30, 18]]"
        }
    },
    {
        "code": "find Path -type f -exec ls -s {} \\; | sort -n -r | head - Quantity",
        "text": "display number large file in current director i and it sub director i ..",
        "id": 705,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ls', '-', 's', 'word', 'word', '\\\\', ';', 'word', '-', 'n', '-', 'r', 'word', '-', 'quantity', 'find', '{', '}', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 0, 10, 10, 11, 11, 0, 12, 13, 14, 24, 25, 28, 33]]",
            "sibling_edges": "[[9, 1, 11, 2, 14, 3, 4, 5, 6, 7, 8, 25, 28, 10, 33, 12, 16, 19, 22, 24, 26, 29, 31], [1, 28, 2, 33, 3, 4, 5, 6, 7, 8, 24, 9, 10, 11, 12, 13, 17, 20, 23, 25, 27, 30, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 37, 38, 26, 27, 1, 39, 29, 30, 31, 32, 2, 40, 34], [15, 16, 17, 18, 19, 20, 21, 22, 23, 37, 38, 26, 27, 1, 39, 29, 30, 31, 32, 2, 40, 34, 35]]"
        }
    },
    {
        "code": "find Path -daystart -mtime -Timespan -and -mtime +Timespan",
        "text": "find file who be e data be mod if i within give day of month ..",
        "id": 706,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'day', 'start', '-', 'm', 'time', '-', 'timespan', '-', 'and', '-', 'm', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 13, 14, 16, 18, 20, 21, 23], [1, 2, 3, 4, 5, 6, 7, 11, 12, 14, 15, 17, 19, 21, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find /home -type f -name *.ext -print0 | while read -r -d $(printf 000) -r path; do awk { sub('\\r$', ''); print } $path > $path_new; done",
        "text": "r emo v regex char act from all file file under file director i and save result to new file with regex append in name ..",
        "id": 707,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'while', ';', 'word', '/', 'home', '-', 'type', 'f', '-', 'name', '*', '.', 'ext', '-', 'print', '<number>', 'word', 'word', 'word', 'word', 'do', ';', ';', ';', 'done', 'find', 'word', '-', 'r', '-', 'd', '$(', ')', '-', 'r', 'path', 'word', 'word', '(', ')', 'read', 'number', 'word', '{', 'sub', 'raw_string', 'word', '>', 'word', '<number>', 'a', 'wk', \"''\", 'word', '}', '$', 'variable_name', '$', 'variable_name', 'print', 'f', 'raw_string', 'word', 'print', 'path', 'path', 'new', \"'\", '\\\\', 'r', '$', \"'\", ',']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 24, 25, 25, 0, 0, 26, 26, 27, 0, 0, 0, 0, 34, 0, 0, 44, 45, 0, 0, 0, 0, 49, 50, 50, 53, 0, 54, 0, 0, 0, 0, 56, 56, 0, 0, 61, 64, 66, 66, 69, 69, 69, 69, 69, 70]]",
            "sibling_edges": "[[7, 1, 10, 2, 3, 4, 5, 6, 8, 27, 9, 11, 13, 16, 18, 19, 21, 22, 34, 24, 25, 40, 26, 28, 45, 29, 47, 30, 66, 31, 35, 37, 39, 49, 41, 50, 44, 46, 53, 64, 56, 70, 61, 54, 55, 58, 63, 65, 67, 69, 73, 75, 76, 77, 78], [1, 8, 2, 3, 4, 5, 6, 7, 34, 9, 28, 12, 14, 17, 19, 20, 22, 23, 24, 25, 39, 26, 27, 50, 29, 46, 30, 61, 31, 32, 36, 38, 56, 40, 42, 44, 45, 69, 47, 55, 49, 53, 54, 63, 65, 59, 64, 66, 68, 70, 74, 76, 77, 78, 79]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 8, 48, 35, 36, 37, 38, 39, 67, 68, 57, 40, 41, 42, 43, 9, 28, 58, 59, 51, 52, 29, 46, 75, 76, 77, 78, 79, 80, 60, 47, 30, 71, 62, 63, 72, 55, 65, 73, 74, 31], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 8, 48, 35, 36, 37, 38, 39, 67, 68, 57, 40, 41, 42, 43, 9, 28, 58, 59, 51, 52, 29, 46, 75, 76, 77, 78, 79, 80, 60, 47, 30, 71, 62, 63, 72, 55, 65, 73, 74, 31, 32]]"
        }
    },
    {
        "code": "grep Regex File | nl",
        "text": "find all line match regex in regex and number output ..",
        "id": 708,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'file', 'word', 'grep', 'nl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 2, 3, 0, 4, 7]]",
            "sibling_edges": "[[3, 1, 4, 2], [1, 7, 2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 6, 1], [5, 6, 1, 9]]"
        }
    },
    {
        "code": "find Path -name Regex | tr Regex Regex | xargs -0 -I {} wc {}",
        "text": "print new l in word and byte count of each file file within current director i and total new l in word and byte count ..",
        "id": 709,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', 'regex', 'regex', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'wc', 'word', 'word', 'find', 'tr', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 7, 0, 8, 8, 9, 9, 0, 0, 10, 0, 0, 11, 16, 19, 19, 24, 25, 27, 28]]",
            "sibling_edges": "[[5, 1, 7, 2, 11, 3, 4, 16, 6, 19, 8, 9, 25, 10, 13, 20, 22, 24, 27, 31], [1, 16, 2, 19, 3, 4, 5, 6, 7, 8, 9, 24, 10, 27, 14, 21, 23, 25, 28, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 12, 13, 14, 15, 1, 30, 17, 18, 2, 31, 32, 20, 21, 22, 23, 33, 34, 26, 35], [12, 13, 14, 15, 1, 30, 17, 18, 2, 31, 32, 20, 21, 22, 23, 33, 34, 26, 35, 36]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -P Regex {} \\; -print",
        "text": "search file file from current director i tree for perl regular express file ..",
        "id": 710,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'p', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 9, 10, 21, 22]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 15, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 21, 8, 9, 13, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 23, 24, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "find Path -regex Regex",
        "text": "find file file in current folder use regular express ..",
        "id": 711,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "alias go=ssh $(pbpaste) -l pete",
        "text": "set alia regex for command regex ..",
        "id": 712,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'go', '=', 'ssh', '$(', ')', '-', 'l', 'pet', 'e', 'alias', 'word', 'pb', 'paste']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 2, 3, 3, 4, 0, 15, 15]]",
            "sibling_edges": "[[4, 1, 9, 2, 5, 6, 8, 15, 10, 12, 16], [1, 8, 2, 3, 6, 7, 15, 9, 11, 13, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 5, 6, 7, 8, 16, 17, 9, 10, 11, 12], [5, 6, 7, 8, 16, 17, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} wc -l {} | sort -n -r | grep -E -v Regex | less",
        "text": "give long file file with line count first and excl ud director i with regex file regex and regex in path ..",
        "id": 713,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'wc', '-', 'l', 'word', 'word', 'word', '-', 'n', '-', 'r', 'word', '-', 'e', '-', 'v', 'regex', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', 'sort', 'grep', 'le']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 7, 0, 8, 8, 0, 0, 9, 10, 10, 0, 0, 0, 11, 11, 12, 12, 0, 13, 13, 14, 14, 15, 0, 16, 21, 21, 24, 25, 29, 30, 31, 36, 42]]",
            "sibling_edges": "[[7, 1, 30, 2, 12, 3, 15, 4, 16, 5, 6, 21, 8, 25, 9, 10, 31, 11, 36, 13, 14, 18, 22, 24, 27, 29, 32, 34, 37, 39, 44], [1, 21, 2, 31, 3, 36, 4, 42, 5, 6, 7, 8, 24, 9, 10, 29, 11, 12, 13, 14, 15, 19, 23, 25, 28, 30, 33, 35, 38, 40, 45]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 17, 18, 19, 20, 1, 44, 45, 22, 23, 46, 47, 26, 27, 28, 48, 49, 2, 50, 32, 33, 34, 35, 3, 51, 37, 38, 39, 40, 41, 4], [17, 18, 19, 20, 1, 44, 45, 22, 23, 46, 47, 26, 27, 28, 48, 49, 2, 50, 32, 33, 34, 35, 3, 51, 37, 38, 39, 40, 41, 4, 52]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan -print",
        "text": "show list of file mod if i more than time span ago ..",
        "id": 714,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 10, 12], [1, 2, 3, 4, 8, 9, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -size Size -ls",
        "text": "display list of all file in current folder which be e mp ti ..",
        "id": 715,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', 'size', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "tar cfvz --exclude=<dir1> --exclude=<dir2> target.tgz target_dir",
        "text": "c re at a compress archiv of a target director i excl ud regex and regex ..",
        "id": 716,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', '<', 'word', '>', 'word', '<', 'word', '>', 'word', 'word', 'word', 'cf', 'vz', '--', 'exclude', '=', 'dir', '<number>', '--', 'exclude', '=', 'dir', '<number>', 'target', '.', 'tgz', 'target', 'dir', 'tar']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 4, 4, 6, 6, 6, 8, 8, 10, 10, 10, 11, 11, 12]]",
            "sibling_edges": "[[2, 4, 6, 8, 12, 1, 3, 5, 7, 9, 10, 13, 15, 16, 18, 20, 21, 23, 25, 26, 28], [3, 5, 7, 9, 1, 2, 4, 6, 8, 10, 11, 14, 16, 17, 19, 21, 22, 24, 26, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 13, 14, 15, 16, 17, 3, 18, 19, 5, 20, 21, 22, 7, 23, 24, 9, 25, 26, 27, 28], [13, 14, 15, 16, 17, 3, 18, 19, 5, 20, 21, 22, 7, 23, 24, 9, 25, 26, 27, 28, 29]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "search for file cent o in file folder ..",
        "id": 717,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex | sort | xargs -I {} head -n Quantity {}",
        "text": "print first line of ever i file match pattern regex in directory director i tree ..",
        "id": 718,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', 'word', '-', 'i', 'word', 'word', 'head', '-', 'n', 'quantity', 'word', 'word', 'find', 'sort', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 0, 6, 6, 0, 0, 7, 8, 8, 9, 0, 0, 10, 15, 16, 16, 19, 20, 25, 26]]",
            "sibling_edges": "[[5, 1, 15, 2, 10, 3, 4, 16, 6, 20, 7, 8, 9, 12, 17, 19, 22, 25, 29], [1, 15, 2, 16, 3, 4, 5, 6, 19, 7, 8, 9, 25, 13, 18, 20, 23, 26, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 1, 28, 2, 29, 30, 17, 18, 31, 32, 21, 22, 23, 24, 33], [11, 12, 13, 14, 1, 28, 2, 29, 30, 17, 18, 31, 32, 21, 22, 23, 24, 33, 34]]"
        }
    },
    {
        "code": "find Path -type f",
        "text": "find all file under regex ..",
        "id": 719,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "$( dirname $( readlink -e File ) )",
        "text": "print path to folder that contain target of symbol link file ..",
        "id": 720,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', 'word', '$(', ')', 'dir', 'name', 'word', 'word', 'word', '-', 'e', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 8, 8, 9, 10, 10]]",
            "sibling_edges": "[[1, 5, 3, 4, 9, 6, 10, 8, 11, 14], [3, 2, 4, 10, 5, 7, 8, 9, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 6, 7, 4, 14, 15, 11, 12, 13, 5], [6, 7, 4, 14, 15, 11, 12, 13, 5, 2]]"
        }
    },
    {
        "code": "cat File | paste -d Regex File File",
        "text": "print ever i number line in regex on a sing l line se par by a space ..",
        "id": 721,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'd', 'regex', 'file', 'file', 'cat', 'paste']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 6, 7, 9]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 4, 5, 10], [1, 9, 2, 3, 4, 5, 6, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 8, 1, 16, 10, 11, 12, 13], [8, 1, 16, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "alias rm100m=find / -type f -name *.tar -size +100M -exec rm -i {} \\;",
        "text": "assign alia regex to a find command that r emo v an i file file large than size ..",
        "id": 722,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'rm', '<number>', 'm', '=', 'find', '/', '-', 'type', 'f', '-', 'name', '*', '.', 'tar', '-', 'size', '+', '<number>', 'm', '-', 'exec', 'rm', '-', 'i', 'word', 'word', '\\\\', ';', 'alias', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 10, 11, 11, 0, 0, 12, 12, 13, 38, 39]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 39, 14, 15, 16, 17, 20, 23, 25, 26, 28, 30, 31, 33, 36, 38, 40], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 38, 12, 15, 16, 17, 18, 21, 24, 26, 27, 29, 31, 32, 34, 37, 39, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[42, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 44, 40], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 44, 40, 41]]"
        }
    },
    {
        "code": "echo -e Regex | awk -v Program Program | od -a",
        "text": "rep lac regex with new l in in regex and display name char act ..",
        "id": 723,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'e', 'regex', 'word', '-', 'v', 'program', 'program', 'word', '-', 'a', 'echo', 'a', 'wk', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 5, 5, 6, 7, 0, 8, 8, 9, 13, 13, 18]]",
            "sibling_edges": "[[4, 1, 7, 2, 9, 3, 13, 5, 6, 18, 10, 14, 19, 22], [1, 13, 2, 18, 3, 4, 5, 6, 7, 8, 11, 15, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 1, 22, 23, 14, 15, 16, 17, 2, 24, 19], [10, 11, 12, 1, 22, 23, 14, 15, 16, 17, 2, 24, 19, 20]]"
        }
    },
    {
        "code": "split --lines Quantity File",
        "text": "split file into file with at most regex line each ..",
        "id": 724,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'line', 'quantity', 'file', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type d -print0 | xargs -0 -I {} chmod Permission {}",
        "text": "c hang per miss of all director i in current folder regex be use for hand l file with new l in in file name ..",
        "id": 725,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'ch', 'mod', 'permission', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 8, 9, 0, 0, 10, 18, 18, 23, 24, 28, 29]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 18, 6, 7, 24, 8, 9, 12, 15, 16, 19, 21, 23, 25, 28, 31], [1, 18, 2, 3, 4, 5, 6, 7, 23, 8, 9, 28, 13, 16, 17, 20, 22, 24, 26, 29, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 1, 31, 32, 19, 20, 21, 22, 33, 34, 25, 26, 27, 35], [11, 12, 13, 14, 15, 16, 17, 1, 31, 32, 19, 20, 21, 22, 33, 34, 25, 26, 27, 35, 36]]"
        }
    },
    {
        "code": "ps axu | grep jbos[s] | tr -s   | cut -d  -f5",
        "text": "print virtual m em or i u sag of all process own by regex ..",
        "id": 726,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'ax', 'u', 'word', 'word', 'word', 'word', 'word', 'word', '-', 's', 'word', '-', 'd', '-', 'f', '<number>', 'ps', 'grep', 'jb', 'os', '[', 's', ']', 'tr', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 5, 5, 0, 6, 6, 7, 7, 7, 8, 11, 12, 12, 13, 14, 15, 16, 19]]",
            "sibling_edges": "[[4, 1, 15, 2, 5, 3, 8, 11, 16, 19, 6, 9, 12, 13, 14, 17, 20, 22, 23, 27], [1, 11, 2, 16, 3, 19, 4, 12, 5, 6, 7, 10, 13, 14, 15, 18, 21, 23, 24, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 9, 10, 1, 26, 27, 28, 29, 30, 31, 2, 32, 17, 18, 3, 33, 20, 21, 22, 23], [9, 10, 1, 26, 27, 28, 29, 30, 31, 2, 32, 17, 18, 3, 33, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path -name Regex ! -name Regex ! -name Regex ! -name Regex ! -name Regex ! -name Regex -exec gunzip -v -f {} \\;",
        "text": "unzip all file file in current director i tree excl ud file contain regex regex regex regex and regex ..",
        "id": 727,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '!', '-', 'name', 'regex', '!', '-', 'name', 'regex', '!', '-', 'name', 'regex', '!', '-', 'name', 'regex', '!', '-', 'name', 'regex', '-', 'exec', 'g', 'unzip', '-', 'v', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 22, 22, 0, 0, 23, 23, 24, 57, 58]]",
            "sibling_edges": "[[24, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 58, 26, 30, 34, 38, 42, 46, 49, 51, 53, 55, 57, 59], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 57, 23, 27, 31, 35, 39, 43, 47, 50, 52, 54, 56, 58, 60]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[61, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 63, 59], [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 63, 59, 60]]"
        }
    },
    {
        "code": "find Path -mmin -Quantity -not -name Regex",
        "text": "find all file and director i under directory that be mod if i le than time span ago excl ud regex file and director i ..",
        "id": 728,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'mm', 'in', '-', 'quantity', '-', 'not', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 10, 12, 14, 16], [1, 2, 3, 4, 5, 6, 10, 11, 13, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "netstat -rn | gawk /UG/ {print $NF} | xargs ifconfig | gawk match($0,/inet addr:(.*) B/,a) {print a[1]}",
        "text": "find ip address of default network inter fa c ..",
        "id": 729,
        "graph": {
            "nodes": "['program', '|', '|', '|', '(', 'word', '}', 'word', 'word', 'word', 'word', '.', '*', ')', 'b', '/', ',', 'a', ')', '{', 'print', 'a', '[', '<number>', ']', 'word', '-', 'rn', 'word', '/', 'ug', '/', 'word', 'word', 'word', 'word', 'if', 'config', 'word', 'word', 'word', 'addr', ':', 'net', 'stat', 'gawk', '{', 'print', '$', 'variable_name', '}', 'x', 'arg', 'gawk', 'match', '(', '$', 'special_variable_name', ',', '/', 'i', 'net', 'nf', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 9, 9, 0, 0, 0, 10, 10, 25, 25, 28, 32, 33, 0, 0, 34, 35, 35, 38, 39, 0, 0, 0, 40, 40, 40, 40, 49, 57]]",
            "sibling_edges": "[[9, 7, 1, 34, 2, 3, 10, 4, 5, 25, 28, 8, 33, 35, 38, 40, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 29, 30, 32, 49, 36, 39, 55, 57, 41, 43, 48, 51, 56, 58, 59, 60], [3, 1, 28, 2, 35, 38, 4, 5, 6, 7, 8, 32, 48, 9, 39, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 30, 31, 33, 34, 37, 55, 56, 40, 42, 44, 49, 52, 57, 59, 60, 61]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 44, 26, 27, 1, 45, 29, 30, 31, 46, 47, 48, 62, 50, 2, 51, 52, 36, 37, 3, 53, 54, 55, 56, 63, 58, 59, 60, 61, 41, 42, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [44, 26, 27, 1, 45, 29, 30, 31, 46, 47, 48, 62, 50, 2, 51, 52, 36, 37, 3, 53, 54, 55, 56, 63, 58, 59, 60, 61, 41, 42, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 6]]"
        }
    },
    {
        "code": "which Regex | xargs -I {} ls -l {}",
        "text": "print file inform of command regex ..",
        "id": 730,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'i', 'word', 'word', 'ls', '-', 'l', 'word', 'word', 'which', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 5, 5, 0, 0, 6, 8, 8, 11, 12, 16, 17]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 12, 4, 5, 9, 11, 14, 16, 19], [1, 8, 2, 3, 11, 4, 5, 16, 10, 12, 15, 17, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 1, 19, 20, 9, 10, 21, 22, 13, 14, 15, 23], [7, 1, 19, 20, 9, 10, 21, 22, 13, 14, 15, 23, 24]]"
        }
    },
    {
        "code": "find Path -type d -print | sed Program | xargs -I {} mkdir -p {}",
        "text": "c re at a cop i of current work director i str uctu r in file director i ..",
        "id": 731,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'print', 'word', 'program', 'word', '-', 'i', 'word', 'word', 'mk', 'dir', '-', 'p', 'word', 'word', 'find', 's', 'ed', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 0, 7, 0, 8, 8, 0, 0, 9, 9, 10, 10, 0, 0, 11, 18, 18, 20, 20, 23, 24, 29, 30]]",
            "sibling_edges": "[[6, 1, 7, 2, 11, 3, 4, 5, 18, 20, 8, 24, 9, 10, 13, 16, 21, 23, 25, 27, 29, 32, 34], [1, 18, 2, 20, 3, 4, 5, 6, 7, 8, 23, 9, 10, 29, 14, 17, 22, 24, 26, 28, 30, 33, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 1, 32, 33, 19, 2, 34, 35, 21, 22, 36, 37, 25, 26, 27, 28, 38], [12, 13, 14, 15, 16, 17, 1, 32, 33, 19, 2, 34, 35, 21, 22, 36, 37, 25, 26, 27, 28, 38, 39]]"
        }
    },
    {
        "code": "find Path -type f -perm +Permission -print",
        "text": "search current director i tree for file exe cut by at least some on ..",
        "id": 732,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', '+', 'permission', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14, 16], [1, 2, 3, 4, 5, 6, 10, 13, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "echo Regex | cut -d Regex -f Number",
        "text": "extract and print ho tn be and protocol part from url like directory ..",
        "id": 733,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'echo', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 6, 7, 9]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 4, 5, 10, 13], [1, 9, 2, 3, 4, 5, 6, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 1, 17, 10, 11, 12, 13, 14], [8, 1, 17, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -size +Size",
        "text": "list all file in current director i tree large than size ..",
        "id": 734,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 8], [1, 2, 3, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file and director i that start with regex in name under current director i tree ..",
        "id": 735,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "mount --bind /absolute/path/to/some/where/else project1/link1",
        "text": "mount file as a bind direct at file ..",
        "id": 736,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'bind', '/', 'absolute', '/', 'path', '/', 'to', '/', 'some', '/', 'where', '/', 'else', 'project', '<number>', '/', 'link', '<number>', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22], [1, 2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path -printf '././%f\\n' | cpio -o -F Regex",
        "text": "c re at an archiv name search from content of file director i ..",
        "id": 737,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'path', '-', 'print', 'f', \"'\", '.', '/', '.', '/', '%', 'f', \"'\", 'word', '-', 'o', '-', 'f', 'regex', 'find', 'cp', 'io']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 0, 5, 5, 6, 6, 7, 8, 21, 21]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 21, 5, 6, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 24, 28], [1, 21, 2, 3, 4, 5, 6, 7, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 25, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 28, 29, 22, 23, 24, 25], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 28, 29, 22, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "find Path -iname Regex | xargs -I {} sed -i Program {}",
        "text": "rep lac all occur r of ed x with guru ku l in all file file under file director i ..",
        "id": 738,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', 'program', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 0, 5, 5, 0, 0, 6, 6, 7, 7, 8, 0, 0, 9, 15, 15, 18, 19, 25, 26]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 15, 5, 19, 6, 7, 8, 11, 12, 16, 18, 20, 22, 25, 28], [1, 15, 2, 3, 4, 5, 18, 6, 7, 8, 25, 12, 13, 17, 19, 21, 23, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 1, 28, 29, 16, 17, 30, 31, 20, 21, 22, 23, 24, 32], [10, 11, 12, 13, 14, 1, 28, 29, 16, 17, 30, 31, 20, 21, 22, 23, 24, 32, 33]]"
        }
    },
    {
        "code": "zcat Regex | grep Regex",
        "text": "search for regex in g zip compress file file ..",
        "id": 739,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', 'regex', 'z', 'cat', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 4, 4, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 8], [1, 6, 2, 3, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 9, 5, 1, 10], [9, 5, 1, 10, 7]]"
        }
    },
    {
        "code": "comm -2 -3 <( find Path | sed Program | sort ) <( find Path | sed Program | sort ) | sed Program",
        "text": "print all uni qu file path under regex com par to regex ..",
        "id": 740,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'number', 'word', 'word', '-', '<number>', '-', '<number>', '<(', ')', '<(', ')', 'word', 'program', 'comm', '|', '|', '|', '|', 's', 'ed', 'word', 'word', 'word', 'word', 'word', 'path', 'word', 'program', 'word', 'word', 'path', 'word', 'program', 'word', 'find', 's', 'ed', 'sort', 'find', 's', 'ed', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 14, 14, 0, 0, 0, 0, 0, 23, 0, 24, 0, 0, 25, 0, 26, 0, 27, 29, 29, 31, 32, 34, 34, 36]]",
            "sibling_edges": "[[13, 1, 5, 2, 3, 11, 14, 6, 8, 10, 31, 12, 36, 23, 17, 24, 18, 25, 19, 26, 20, 21, 27, 29, 32, 34, 38, 42], [1, 14, 2, 3, 10, 12, 4, 7, 9, 27, 11, 32, 13, 17, 29, 18, 31, 19, 34, 20, 36, 22, 23, 24, 25, 26, 39, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 6, 7, 8, 9, 10, 37, 28, 17, 38, 39, 30, 18, 40, 11, 12, 41, 33, 19, 42, 43, 35, 20, 44, 13, 1, 21, 22], [6, 7, 8, 9, 10, 37, 28, 17, 38, 39, 30, 18, 40, 11, 12, 41, 33, 19, 42, 43, 35, 20, 44, 13, 1, 21, 22, 15]]"
        }
    },
    {
        "code": "find Path -type f -group Regex",
        "text": "display all user in current folder that belong to group regex ..",
        "id": 741,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'group', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -mmin +Quantity -type f -name Regex -delete",
        "text": "r emo v all file file under give director i mod if i more than time span ago ..",
        "id": 742,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'mm', 'in', '+', 'quantity', '-', 'type', 'f', '-', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 17, 18, 20, 22, 25, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 21, 23, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]"
        }
    },
    {
        "code": "cat -n File | less",
        "text": "display file with line number and page interact through result ..",
        "id": 743,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '-', 'n', 'file', 'word', 'cat', 'le']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 2, 3, 0, 4, 8]]",
            "sibling_edges": "[[3, 1, 4, 2, 5], [1, 8, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7, 1], [5, 6, 7, 1, 10]]"
        }
    },
    {
        "code": "find Path -type l",
        "text": "find all symbol link in current director i tree ..",
        "id": 744,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'l', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "touch -d $( date -r File ) File",
        "text": "adjust timestamp of file regex by subtract time span from it ..",
        "id": 745,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'd', '$(', ')', 'file', 'touch', 'word', 'word', 'word', '-', 'r', 'file', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 1, 1, 0, 0, 2, 3, 0, 0, 0, 10, 10, 11, 12]]",
            "sibling_edges": "[[3, 1, 7, 4, 6, 11, 12, 10, 13], [1, 6, 2, 5, 12, 7, 10, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 4, 5, 6, 16, 13, 14, 15, 7], [4, 5, 6, 16, 13, 14, 15, 7, 8]]"
        }
    },
    {
        "code": "tmux -V | cut -c Number",
        "text": "save regex version in regex v aria bl ..",
        "id": 746,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'v', 'word', '-', 'c', 'number', 't', 'mu', 'x', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 2, 2, 0, 3, 3, 4, 5, 5, 5, 8]]",
            "sibling_edges": "[[2, 1, 5, 8, 3, 6, 9, 12, 13], [1, 8, 2, 3, 4, 7, 10, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 13, 14, 6, 7, 1, 15, 9, 10], [13, 14, 6, 7, 1, 15, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path Path \\( -path Regex -or -path Regex \\) -prune -or -print",
        "text": "display all file in folder file file excl ud path file and file ..",
        "id": 747,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '\\\\', '(', '-', 'path', 'regex', '-', 'or', '-', 'path', 'regex', '\\\\', ')', '-', 'prune', '-', 'or', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 21, 23, 26, 28, 30, 32], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 19, 22, 24, 27, 29, 31, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]]"
        }
    },
    {
        "code": "mv File $( echo Regex | tr Regex Regex )",
        "text": "r en be upper ca file or folder name regex to low case name ..",
        "id": 748,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', '$(', ')', 'mv', '|', 'word', 'word', 'word', 'word', 'regex', 'word', 'regex', 'regex', 'echo', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 8, 0, 9, 10, 11, 13]]",
            "sibling_edges": "[[2, 1, 4, 10, 8, 7, 11, 13, 9], [1, 4, 11, 5, 7, 13, 8, 9, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 4, 16, 12, 7, 17, 14, 15], [3, 4, 16, 12, 7, 17, 14, 15, 5]]"
        }
    },
    {
        "code": "mount --bind /usr/bin /path/to/chroot/jail/usr/bin",
        "text": "remount sub tr e file on file as a bind ..",
        "id": 749,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'bind', '/', 'us', 'r', '/', 'bin', '/', 'path', '/', 'to', '/', 'ch', 'root', '/', 'jail', '/', 'us', 'r', '/', 'bin', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [1, 2, 3, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "cat File | xargs -I {} du -c {} | tail - Quantity",
        "text": "print grand total disk u sag of all file list in file ..",
        "id": 750,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'i', 'word', 'word', 'du', '-', 'c', 'word', 'word', 'word', '-', 'quantity', 'cat', 'x', 'arg', '{', '}', '{', '}', 'tail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 0, 0, 5, 6, 6, 0, 0, 0, 7, 8, 9, 11, 11, 14, 15, 19, 20, 21]]",
            "sibling_edges": "[[3, 1, 20, 2, 9, 11, 4, 15, 5, 6, 21, 7, 12, 14, 17, 19, 25], [1, 11, 2, 21, 3, 4, 14, 5, 6, 19, 7, 8, 13, 15, 18, 20, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 1, 25, 26, 12, 13, 27, 28, 16, 17, 18, 29, 30, 2, 31, 22], [10, 1, 25, 26, 12, 13, 27, 28, 16, 17, 18, 29, 30, 2, 31, 22, 23]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "search current director i recur for file with exact per miss permission ..",
        "id": 751,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "alias foo=BAR=baz",
        "text": "set alia regex for command regex ..",
        "id": 752,
        "graph": {
            "nodes": "['command', 'word', 'word', 'foo', '=', 'bar', '=', 'baz', 'alias']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 1, 1, 1, 1, 1, 2]]",
            "sibling_edges": "[[2, 3, 4, 5, 6], [1, 4, 5, 6, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 3, 4, 5, 6], [3, 4, 5, 6, 7]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\;",
        "text": "make all bug z ill a sub director i per miss number ..",
        "id": 753,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\;",
        "text": "set per miss to permission regex for director i in sid file tree ..",
        "id": 754,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -type f -printf '%T@ :$f %p\\n' | sort -n -r | cut -d Regex -f Number | head -n Quantity",
        "text": "print regex late mod if i file within regex folder use regex format for print timestamp ..",
        "id": 755,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'f', \"'\", '%', 't', '@', ':', '$', 'f', '%', 'p', \"'\", 'word', '-', 'n', '-', 'r', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', '-', 'n', 'quantity', 'find', 'sort', 'cut', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 9, 9, 10, 10, 0, 11, 11, 12, 13, 13, 14, 0, 15, 15, 16, 17, 35, 40, 47]]",
            "sibling_edges": "[[8, 1, 10, 2, 14, 3, 17, 4, 5, 6, 7, 35, 9, 40, 11, 12, 13, 47, 15, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 41, 44, 48], [1, 35, 2, 40, 3, 47, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 42, 45, 49]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[51, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 1, 52, 36, 37, 38, 39, 2, 53, 41, 42, 43, 44, 45, 46, 3, 54, 48, 49], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 1, 52, 36, 37, 38, 39, 2, 53, 41, 42, 43, 44, 45, 46, 3, 54, 48, 49, 50]]"
        }
    },
    {
        "code": "unset $(/usr/bin/env | /usr/bin/cut -d = -f 1 | /usr/bin/xargs)",
        "text": "unset all environ v aria bl ..",
        "id": 756,
        "graph": {
            "nodes": "['unset_command', 'unset', '$(', ')', '|', '|', 'word', 'word', 'word', 'number', 'word', 'word', '-', 'd', '=', '-', 'f', '<number>', 'word', '/', 'us', 'r', '/', 'bin', '/', 'env', '/', 'us', 'r', '/', 'bin', '/', 'cut', '/', 'us', 'r', '/', 'bin', '/', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 7, 8, 8, 9, 0, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 18, 18, 18, 18, 18, 18, 18, 18]]",
            "sibling_edges": "[[1, 2, 18, 10, 4, 9, 5, 11, 6, 7, 8, 12, 15, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39], [2, 10, 3, 4, 11, 5, 18, 6, 7, 8, 9, 13, 16, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 2, 19, 20, 21, 22, 23, 24, 25, 4, 26, 27, 28, 29, 30, 31, 32, 12, 13, 14, 15, 16, 17, 5, 33, 34, 35, 36, 37, 38, 39, 40], [2, 19, 20, 21, 22, 23, 24, 25, 4, 26, 27, 28, 29, 30, 31, 32, 12, 13, 14, 15, 16, 17, 5, 33, 34, 35, 36, 37, 38, 39, 40, 3]]"
        }
    },
    {
        "code": "find Path -type b -name Regex -print",
        "text": "search all block special file call backup from file director i downward and print them ..",
        "id": 757,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'b', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "tail -n 100 file1 | bar | wc -l",
        "text": "count line in file regex and show progress bar while ..",
        "id": 758,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'number', 'word', 'word', 'word', '-', 'n', '<number>', 'file', '<number>', 'word', 'word', '-', 'l', 'tail', 'bar', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 5, 0, 0, 6, 6, 7, 13, 14]]",
            "sibling_edges": "[[5, 1, 13, 2, 7, 3, 4, 14, 8, 11, 15], [1, 13, 2, 14, 3, 4, 5, 6, 9, 12, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 1, 18, 2, 19, 15], [8, 9, 10, 11, 12, 1, 18, 2, 19, 15, 16]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} grep -E Regex {}",
        "text": "search for regex in all file file under current director i ..",
        "id": 759,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', '-', 'e', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 10, 0, 0, 11, 19, 19, 24, 25, 30, 31]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 19, 6, 7, 25, 8, 9, 10, 13, 16, 17, 20, 22, 24, 27, 30, 33], [1, 19, 2, 3, 4, 5, 6, 7, 24, 8, 9, 10, 30, 14, 17, 18, 21, 23, 25, 28, 31, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 1, 33, 34, 20, 21, 22, 23, 35, 36, 26, 27, 28, 29, 37], [12, 13, 14, 15, 16, 17, 18, 1, 33, 34, 20, 21, 22, 23, 35, 36, 26, 27, 28, 29, 37, 38]]"
        }
    },
    {
        "code": "pstree -a -p Regex",
        "text": "show process tree with command l in argument of a process that id number ..",
        "id": 760,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'a', '-', 'p', 'regex', 'ps', 'tree']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 10], [1, 2, 3, 6, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 5, 6, 7, 8], [11, 5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "find all dat ab as file in folder file ..",
        "id": 761,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex -exec file {} \\; | grep -o -P Regex",
        "text": "find all file under current director i who be e file type de script contain regex display path to file and file type de script ..",
        "id": 762,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'file', 'word', 'word', '\\\\', ';', 'word', '-', 'o', '-', 'p', 'regex', 'find', '{', '}', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 0, 0, 7, 7, 0, 8, 8, 9, 9, 10, 11, 19, 20, 23]]",
            "sibling_edges": "[[7, 1, 11, 2, 3, 4, 5, 6, 20, 23, 8, 9, 13, 16, 19, 21, 24, 26], [1, 23, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 14, 17, 20, 22, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 12, 13, 14, 15, 16, 17, 18, 30, 31, 21, 22, 1, 32, 24, 25, 26, 27], [12, 13, 14, 15, 16, 17, 18, 30, 31, 21, 22, 1, 32, 24, 25, 26, 27, 28]]"
        }
    },
    {
        "code": "printf %-10s%-10s%-10s%s\\n $(yes x | head -n 10)",
        "text": "print number space pad regex to a width of number with at most number per line ..",
        "id": 763,
        "graph": {
            "nodes": "['command', 'word', 'word', '%', '-', '<number>', 's', '%', '-', '<number>', 's', '%', '-', '<number>', 's', '%', 's', '$(', ')', 'print', 'f', '|', 'word', 'word', 'number', 'word', 'x', 'word', '-', 'n', '<number>', 'yes', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 22, 0, 23, 23, 24, 25, 27]]",
            "sibling_edges": "[[2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 24, 19, 22, 21, 25, 27, 23, 28], [1, 17, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 25, 18, 20, 21, 27, 22, 23, 24, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 20, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 31, 26, 21, 32, 28, 29, 30], [20, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 31, 26, 21, 32, 28, 29, 30, 18]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -print0 | xargs -0 -I {} sed -i Regex Program {}",
        "text": "find all file call file in current director i tree and r emo v line start with regex in them save backup cop i as file ..",
        "id": 764,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', 'regex', 'program', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 10, 11, 11, 12, 13, 0, 0, 14, 25, 25, 30, 31, 38, 39]]",
            "sibling_edges": "[[7, 1, 14, 2, 3, 4, 5, 6, 25, 8, 9, 31, 10, 11, 12, 13, 16, 19, 22, 23, 26, 28, 30, 32, 34, 38, 41], [1, 25, 2, 3, 4, 5, 6, 7, 8, 9, 30, 10, 11, 12, 13, 38, 17, 20, 23, 24, 27, 29, 31, 33, 35, 39, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[40, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 41, 42, 26, 27, 28, 29, 43, 44, 32, 33, 34, 35, 36, 37, 45], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 41, 42, 26, 27, 28, 29, 43, 44, 32, 33, 34, 35, 36, 37, 45, 46]]"
        }
    },
    {
        "code": "kill $(ps -o pid= -s $(ps -o sess --no-heading --pid 21709))",
        "text": "send sig term signal to en ti r session of process contain process who be e id be number ..",
        "id": 765,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'kill', 'word', 'word', 'word', 'word', '-', 'o', 'pi', 'd', '=', '-', 's', '$(', ')', 'ps', 'word', 'word', 'word', 'word', 'number', 'word', '-', 'o', 's', 'es', '--', 'no', '-', 'head', '--', 'pi', 'd', '<number>', 'ps']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 1, 0, 0, 0, 0, 5, 5, 6, 6, 6, 7, 7, 0, 0, 8, 0, 0, 0, 0, 0, 0, 19, 19, 20, 20, 21, 21, 21, 21, 22, 22, 22, 23, 24]]",
            "sibling_edges": "[[1, 2, 17, 8, 5, 6, 7, 9, 11, 12, 14, 16, 23, 24, 19, 20, 21, 22, 25, 27, 29, 30, 31, 33, 34], [2, 8, 3, 5, 6, 7, 16, 10, 12, 13, 15, 24, 17, 19, 20, 21, 22, 23, 26, 28, 30, 31, 32, 34, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 18, 9, 10, 11, 12, 13, 14, 15, 16, 37, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 17], [2, 18, 9, 10, 11, 12, 13, 14, 15, 16, 37, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 17, 3]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -ctime +Timespan -name Regex",
        "text": "find all file name regex in number level down current director i who be e status be c hang more than time span ago ..",
        "id": 766,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'c', 'time', '+', 'timespan', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 14, 15, 17, 19], [1, 2, 3, 4, 5, 6, 7, 11, 12, 15, 16, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]]"
        }
    },
    {
        "code": "rsync -r -a -v -e File File File",
        "text": "archiv directory to file on host file as user regex via ssh use i dent file file ..",
        "id": 767,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'a', '-', 'v', '-', 'e', 'file', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 11, 13, 15, 20], [1, 2, 3, 4, 5, 6, 7, 10, 12, 14, 16, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -name Regex -exec ln -s {} \\;",
        "text": "c re at symbol link in current director i for all file loc at in regex director i and file n be ext en file ..",
        "id": 768,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'ln', '-', 's', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "ssh askapache nice -n 19 sh -c '( ( nohup chown -R ask:ask /www/askapache.com &>/dev/null ) & )'",
        "text": "exe cut file in background on server regex with a louse ns of number ..",
        "id": 769,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'number', 'word', 'word', 'raw_string', 'word', 'ask', 'a', 'pa', 'ch', 'e', 'nice', '-', 'n', '<number>', 'sh', '-', 'c', \"'\", '(', '(', 'n', 'oh', 'up', 'chow', 'n', '-', 'r', 'ask', ':', 'ask', '/', 'www', '/', 'ask', 'a', 'pa', 'ch', 'e', '.', 'com', '&', '>', '/', 'dev', '/', 'null', ')', '&', ')', \"'\", 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[54, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]]"
        }
    },
    {
        "code": "find Path -name Regex -and -not -name Regex -ctime +Timespan -exec bzip2 -z -v {} \\;",
        "text": "find all regex file in file recur that be more than time span old skip al read i c re at file archiv and compress them ..",
        "id": 770,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'and', '-', 'not', '-', 'name', 'regex', '-', 'c', 'time', '+', 'timespan', '-', 'exec', 'b', 'zip', '<number>', '-', 'z', '-', 'v', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 0, 0, 14, 14, 15, 41, 42]]",
            "sibling_edges": "[[15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 42, 17, 20, 22, 24, 27, 28, 30, 32, 34, 35, 37, 39, 41, 43], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 41, 14, 18, 21, 23, 25, 28, 29, 31, 33, 35, 36, 38, 40, 42, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[45, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 47, 43], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 47, 43, 44]]"
        }
    },
    {
        "code": "find Path -type d -exec find {} -maxdepth Quantity ! -type d -iname Regex \\;",
        "text": "search current director i tree for file who be e name be file case in sen it ..",
        "id": 771,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'find', 'word', 'word', '-', 'max', 'depth', 'quantity', '!', '-', 'type', 'd', '-', 'i', 'name', 'regex', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 6, 7, 8, 9, 9, 10, 11, 11, 11, 12, 13, 13, 14, 22, 23]]",
            "sibling_edges": "[[14, 1, 2, 3, 4, 5, 23, 6, 7, 8, 9, 10, 11, 12, 16, 19, 22, 24, 25, 29, 32, 33, 36], [1, 2, 3, 4, 5, 22, 6, 7, 8, 9, 10, 11, 12, 13, 17, 20, 23, 25, 26, 30, 33, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 15, 16, 17, 18, 19, 20, 21, 39, 40, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [15, 16, 17, 18, 19, 20, 21, 39, 40, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]]"
        }
    },
    {
        "code": "find Path -perm -Permission -print",
        "text": "find all file in current folder which on li write per miss for other ..",
        "id": 772,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'perm', '-', 'permission', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9, 11], [1, 2, 3, 4, 8, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find /home/luser -type f -name ‘*.mpg’ | parallel rm -f",
        "text": "r emo v all file file in file director i tree ..",
        "id": 773,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'home', '/', 'l', 'user', '-', 'type', 'f', '-', 'name', '‘', '*', '.', 'mpg', '’', 'word', 'rm', '-', 'f', 'find', 'parallel']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 3, 3, 4, 5, 5, 6, 6, 6, 6, 6, 0, 7, 8, 8, 9, 25]]",
            "sibling_edges": "[[6, 1, 9, 2, 3, 4, 5, 25, 7, 10, 11, 12, 13, 15, 18, 20, 21, 22, 23, 27], [1, 25, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 30, 26, 27], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 30, 26, 27, 28]]"
        }
    },
    {
        "code": "find Path $( pwd ) -name Regex -exec grep Regex {} \\;",
        "text": "search file file in current director i tree for string regex ..",
        "id": 774,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '$(', ')', '-', 'name', 'regex', '-', 'exec', 'grep', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 3, 4, 4, 5, 6, 0, 0, 7, 7, 8, 19, 20, 0, 26]]",
            "sibling_edges": "[[8, 1, 11, 2, 3, 4, 5, 6, 20, 10, 26, 12, 15, 19, 21], [1, 10, 2, 3, 4, 5, 6, 19, 7, 26, 11, 13, 16, 20, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 27, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 21], [9, 10, 27, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 21, 22]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex | wc -l",
        "text": "count all file file in music user 's home and sub dir ..",
        "id": 775,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', 'word', '-', 'l', 'find', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 0, 7, 7, 8, 17]]",
            "sibling_edges": "[[6, 1, 8, 2, 3, 4, 5, 17, 10, 13, 14, 18], [1, 17, 2, 3, 4, 5, 6, 7, 11, 14, 15, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 1, 21, 18], [9, 10, 11, 12, 13, 14, 15, 16, 1, 21, 18, 19]]"
        }
    },
    {
        "code": "ssh -t example.com screen -r -X ls",
        "text": "alloc a pseudo term in and exe cut regex which exe cut regex within screen session on host file ..",
        "id": 776,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', 'example', '.', 'com', 'screen', '-', 'r', '-', 'x', 'ls', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 10, 11, 14, 16], [1, 2, 3, 4, 5, 6, 9, 11, 12, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "tmux new-session -s vims -n vim0 -d vim foo",
        "text": "start new detach t mu x session regex with new window regex and open file regex within ..",
        "id": 777,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'new', '-', 'session', '-', 's', 'vim', '-', 'n', 'vim', '<number>', '-', 'd', 'vim', 'foo', 't', 'mu', 'x']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 10, 11, 13, 16, 18, 20, 24, 25], [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 14, 17, 19, 21, 25, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 25, 26, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [25, 26, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} tar -r -f File {}",
        "text": "c re at a tar file contain all file in file folder that contain space in name ..",
        "id": 778,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'tar', '-', 'r', '-', 'f', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 10, 10, 11, 0, 0, 12, 20, 20, 25, 26, 33, 34]]",
            "sibling_edges": "[[5, 1, 12, 2, 3, 4, 20, 6, 7, 26, 8, 9, 10, 11, 14, 17, 18, 21, 23, 25, 28, 30, 33, 36], [1, 20, 2, 3, 4, 5, 6, 7, 25, 8, 9, 10, 11, 33, 15, 18, 19, 22, 24, 26, 29, 31, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 13, 14, 15, 16, 17, 18, 19, 1, 36, 37, 21, 22, 23, 24, 38, 39, 27, 28, 29, 30, 31, 32, 40], [13, 14, 15, 16, 17, 18, 19, 1, 36, 37, 21, 22, 23, 24, 38, 39, 27, 28, 29, 30, 31, 32, 40, 41]]"
        }
    },
    {
        "code": "find Path -newer File",
        "text": "find file and director i under file director i tree that be new than file by mod if time ..",
        "id": 779,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f ! -name Regex ! -name Regex -print | tee -a File",
        "text": "find all regular file in current director i which not ext en comment and and redirect output to file ..",
        "id": 780,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '!', '-', 'name', 'regex', '!', '-', 'name', 'regex', '-', 'print', 'word', '-', 'a', 'file', 'find', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 11, 0, 12, 12, 13, 14, 29]]",
            "sibling_edges": "[[11, 1, 14, 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 12, 16, 20, 24, 27, 30], [1, 29, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 21, 25, 28, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 34, 30, 31], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 34, 30, 31, 32]]"
        }
    },
    {
        "code": "yes | rm -r -i File",
        "text": "answer regex to all prompt of regex ..",
        "id": 781,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'i', 'file', 'yes', 'rm']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 6]]",
            "sibling_edges": "[[5, 1, 6, 2, 3, 7, 9], [1, 6, 2, 3, 4, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 1, 13, 7, 8, 9, 10], [1, 13, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find /path -name pattern -exec bash -c for file; do somebashstatement '$file'; done -- {} +",
        "text": "run a some bash stat with file n be as argument in sid a for loop that iter over a number of file n be find recur in file that match regex ..",
        "id": 782,
        "graph": {
            "nodes": "['program', ';', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', '/', 'path', '-', 'name', 'pattern', '-', 'exec', 'bash', '-', 'c', 'for', 'file', 'word', 'some', 'bash', 'statement', \"'\", '$', 'file', \"'\", 'word', '--', 'word', 'word', '+', 'find', 'do', 'do', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 0, 11, 11, 11, 12, 12, 12, 12, 0, 13, 0, 0, 14, 15, 28, 36, 38, 39]]",
            "sibling_edges": "[[10, 1, 12, 2, 15, 3, 4, 5, 6, 7, 8, 9, 28, 11, 36, 13, 39, 16, 18, 21, 24, 29, 30, 32, 33, 34, 38], [1, 28, 2, 36, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 14, 17, 19, 22, 25, 30, 31, 33, 34, 35, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 42, 29, 30, 31, 32, 33, 34, 35, 2, 43, 37, 44, 45], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 42, 29, 30, 31, 32, 33, 34, 35, 2, 43, 37, 44, 45, 40]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan -type f -print",
        "text": "find all regular file in current director i which be mod if i in time span ..",
        "id": 783,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', '-', 'type', 'f', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 10, 12, 14, 17], [1, 2, 3, 4, 5, 6, 10, 11, 13, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "chmod Permission $( find Path -type f )",
        "text": "set number per miss to all regular file under current director i ..",
        "id": 784,
        "graph": {
            "nodes": "['command', 'word', 'word', 'permission', '$(', ')', 'ch', 'mod', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 8, 9, 9, 10, 11]]",
            "sibling_edges": "[[2, 1, 4, 10, 6, 11, 8, 9, 13], [1, 4, 11, 5, 7, 8, 9, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 3, 4, 16, 12, 13, 14, 15], [7, 3, 4, 16, 12, 13, 14, 15, 5]]"
        }
    },
    {
        "code": "cpio -i Regex Regex | md5sum",
        "text": "cal cu l regex checksum of the dir n be ..",
        "id": 785,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'i', 'regex', 'regex', 'word', 'cp', 'io', 'md', '<number>', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 2, 2, 3, 4, 0, 5, 5, 10, 10, 10]]",
            "sibling_edges": "[[4, 1, 5, 2, 3, 6, 11, 13, 14], [1, 10, 2, 3, 4, 7, 12, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 6, 7, 8, 9, 1, 13, 14], [12, 6, 7, 8, 9, 1, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -iname Regex -exec grep Regex {} \\; -print",
        "text": "search for regex in all regex file under current director i ..",
        "id": 786,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'exec', 'grep', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 0, 0, 7, 7, 8, 8, 9, 19, 20]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 20, 7, 11, 12, 15, 19, 21, 23], [1, 2, 3, 4, 5, 6, 19, 7, 8, 12, 13, 16, 20, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 26, 27, 21, 22, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 26, 27, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "echo $( yes Regex | head -n Quantity )",
        "text": "print number space se par regex ..",
        "id": 787,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'echo', '|', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'n', 'quantity', 'yes', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 7, 7, 8, 9, 11]]",
            "sibling_edges": "[[1, 2, 8, 6, 5, 9, 11, 7, 12], [2, 9, 3, 5, 11, 6, 7, 8, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 15, 10, 5, 16, 12, 13, 14], [2, 15, 10, 5, 16, 12, 13, 14, 3]]"
        }
    },
    {
        "code": "find Path -type l -print",
        "text": "find all symbol link under file director i tree ..",
        "id": 788,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'l', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "rsync -r --verbose --exclude Regex File File",
        "text": "recur cop i all file and folder in current director i excl ud regex to directory ..",
        "id": 789,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'r', '--', 'verbose', '--', 'exclude', 'regex', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 10, 12, 17], [1, 2, 3, 4, 5, 6, 9, 11, 13, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 18, 8, 9, 10, 11, 12, 13, 14, 15], [18, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "alias h=history",
        "text": "set alia file for command regex ..",
        "id": 790,
        "graph": {
            "nodes": "['command', 'word', 'word', 'h', '=', 'history', 'alias']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 1, 1, 1, 2]]",
            "sibling_edges": "[[2, 3, 4], [1, 4, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 4], [3, 4, 5]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -daystart -mtime -Timespan -mtime +Timespan | xargs -I {} cat {} | sort | uniq",
        "text": "sort and display uni qu line display content of all file that be mod if i in time span and not in time span ..",
        "id": 791,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'day', 'start', '-', 'm', 'time', '-', 'timespan', '-', 'm', 'time', '+', 'timespan', 'word', '-', 'i', 'word', 'word', 'cat', 'word', 'word', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 8, 9, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 0, 14, 14, 0, 0, 15, 0, 0, 0, 0, 16, 37, 37, 40, 41, 43, 44, 45, 46, 46]]",
            "sibling_edges": "[[13, 1, 44, 2, 45, 3, 16, 4, 5, 6, 7, 8, 9, 10, 11, 12, 37, 14, 41, 15, 18, 21, 24, 25, 27, 28, 30, 32, 33, 35, 38, 40, 43, 48, 55], [1, 37, 2, 45, 3, 46, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 40, 15, 43, 19, 22, 25, 26, 28, 29, 31, 33, 34, 36, 39, 41, 44, 49, 56]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[47, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 1, 48, 49, 38, 39, 50, 51, 42, 52, 53, 2, 54, 3, 55], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 1, 48, 49, 38, 39, 50, 51, 42, 52, 53, 2, 54, 3, 55, 56]]"
        }
    },
    {
        "code": "find / -name *.conf 2>>/dev/null",
        "text": "find all file file under directory redirect error me sag to file ..",
        "id": 792,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'file_descriptor', '>>', 'word', 'word', '/', '-', 'name', '*', '.', 'conf', '<number>', '/', 'dev', '/', 'null', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 6, 6, 6, 6, 7]]",
            "sibling_edges": "[[3, 7, 1, 2, 4, 5, 9, 11, 12, 15, 16, 17], [4, 1, 2, 3, 5, 6, 10, 12, 13, 16, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 5, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 5, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i regex ..",
        "id": 793,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "ls -t | head -n Quantity",
        "text": "return sing l most recent file in a director i ..",
        "id": 794,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 't', 'word', '-', 'n', 'quantity', 'ls', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 2, 0, 3, 3, 4, 5, 8]]",
            "sibling_edges": "[[2, 1, 5, 8, 3, 6, 9], [1, 8, 2, 3, 4, 7, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 1, 13, 9, 10], [6, 7, 1, 13, 9, 10, 11]]"
        }
    },
    {
        "code": "cd ${CURR_DIR} && find .",
        "text": "find all file and director i under regex director i ..",
        "id": 795,
        "graph": {
            "nodes": "['list', '&&', 'word', 'word', '${', 'variable_name', '}', 'word', '.', 'cd', 'curr', 'dir', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 0, 0, 2, 3, 5, 5, 7]]",
            "sibling_edges": "[[6, 1, 3, 7, 4, 5, 10], [1, 7, 4, 2, 5, 6, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 4, 10, 11, 6, 1, 12], [4, 10, 11, 6, 1, 12, 8]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -newer File -print",
        "text": "find an i hide regular file in current director i and it sub director i that be mod if i after file be last mod if i ..",
        "id": 796,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'new', 'file', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 14, 17, 20], [1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]]"
        }
    },
    {
        "code": "readlink -f File",
        "text": "r emo v symbol link and get ab sol ut path of regex and save to v aria bl regex ..",
        "id": 797,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'f', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "cp $( ls -1 -t -r File | tail - Quantity ) File",
        "text": "cop i new file under current folder to directory ..",
        "id": 798,
        "graph": {
            "nodes": "['command', 'word', 'word', '$(', ')', 'file', 'cp', '|', 'number', 'word', 'word', 'word', 'word', 'word', 'word', '-', '<number>', '-', 't', '-', 'r', 'file', 'word', '-', 'quantity', 'ls', 'tail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 9, 9, 10, 10, 11, 0, 12, 13, 14, 22]]",
            "sibling_edges": "[[2, 4, 3, 13, 11, 7, 14, 8, 9, 10, 22, 12, 15, 17, 19], [3, 1, 14, 4, 7, 22, 8, 9, 10, 11, 12, 13, 16, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 25, 15, 16, 17, 18, 19, 20, 21, 7, 26, 23, 24, 4], [3, 25, 15, 16, 17, 18, 19, 20, 21, 7, 26, 23, 24, 4, 5]]"
        }
    },
    {
        "code": "nl | sort -R | cut -f Number | head - Quantity",
        "text": "print regex or default number random line from standard input ..",
        "id": 799,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'r', 'word', '-', 'f', 'number', 'word', '-', 'quantity', 'nl', 'sort', 'cut', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 5, 5, 6, 0, 7, 8, 9, 10, 13, 17]]",
            "sibling_edges": "[[9, 1, 4, 2, 6, 3, 10, 13, 5, 17, 7, 11, 14], [1, 10, 2, 13, 3, 17, 4, 5, 6, 7, 8, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 1, 21, 11, 12, 2, 22, 14, 15, 16, 3, 23, 18], [1, 21, 11, 12, 2, 22, 14, 15, 16, 3, 23, 18, 19]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find file and director i name blah under current director i ..",
        "id": 800,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -exec grep Regex {} \\; -print | wc -l",
        "text": "find all file under and below current work director i with word cal if or ni a in file and count number of line in output ..",
        "id": 801,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'grep', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'word', '-', 'l', 'find', '{', '}', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 0, 0, 8, 8, 9, 9, 0, 10, 10, 11, 20, 21, 26]]",
            "sibling_edges": "[[9, 1, 11, 2, 3, 4, 5, 6, 7, 21, 8, 26, 13, 16, 20, 22, 24, 27], [1, 26, 2, 3, 4, 5, 6, 7, 20, 8, 9, 10, 14, 17, 21, 23, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 12, 13, 14, 15, 16, 17, 18, 19, 30, 31, 22, 23, 24, 25, 1, 32, 27], [12, 13, 14, 15, 16, 17, 18, 19, 30, 31, 22, 23, 24, 25, 1, 32, 27, 28]]"
        }
    },
    {
        "code": "echo Regex | uniq -c",
        "text": "show val u of v aria bl regex discard con ecu t dup li c and ad number of occur r at begin of each line ..",
        "id": 802,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', '-', 'c', 'echo', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 2, 0, 3, 3, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 7, 10], [1, 6, 2, 3, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 1, 10, 11, 7], [5, 1, 10, 11, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -exec grep -n -i Regex File {} \\;",
        "text": "search for case in sen it regex regex in all file under current director i ..",
        "id": 803,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'grep', '-', 'n', '-', 'i', 'regex', 'file', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 0, 0, 10, 10, 11, 25, 26]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 13, 16, 19, 21, 25, 27], [1, 2, 3, 4, 5, 6, 7, 8, 9, 25, 10, 14, 17, 20, 22, 26, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 27], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 27, 28]]"
        }
    },
    {
        "code": "find /home/family/Music -name *.m4a -exec ffmpeg -i {} -acodec libvorbis -aq 6 -vn -ac 2 {}.ogg ;",
        "text": "find all file file under file director i and convert them to file ..",
        "id": 804,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'number', 'word', '/', 'home', '/', 'family', '/', 'music', '-', 'name', '*', '.', 'm', '<number>', 'a', '-', 'exec', 'ff', 'm', 'peg', '-', 'i', 'word', 'word', '-', 'a', 'code', 'c', 'lib', 'v', 'or', 'bi', '-', 'aq', '<number>', '-', 'vn', '-', 'ac', '<number>', 'word', 'word', 'word', 'find', '{', '}', '{', '}', '.', 'ogg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 0, 0, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 0, 0, 0, 15, 36, 37, 54, 55, 56, 56]]",
            "sibling_edges": "[[56, 15, 2, 3, 4, 5, 6, 7, 37, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 29, 31, 32, 34, 36, 38, 39, 40, 42, 43, 44, 46, 49, 51, 54, 55, 62], [1, 2, 3, 4, 5, 6, 7, 36, 8, 9, 10, 11, 12, 13, 14, 54, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 30, 32, 33, 35, 37, 39, 40, 41, 43, 44, 45, 47, 50, 52, 55, 56, 63]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[57, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 58, 59, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 61, 62, 63], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 58, 59, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 61, 62, 63, 1]]"
        }
    },
    {
        "code": "find path/to/folder -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum",
        "text": "cal cu l regex sum for content of regular file in file director i tree ..",
        "id": 805,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'path', '/', 'to', '/', 'folder', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', 'z', 'word', '-', '<number>', 'sha', '<number>', 'sum', 'word', 'find', 'sort', 'x', 'arg', 'sha', '<number>', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 0, 9, 9, 10, 10, 10, 0, 11, 23, 26, 26, 32, 32, 32]]",
            "sibling_edges": "[[7, 1, 8, 2, 10, 3, 11, 4, 5, 6, 23, 26, 9, 12, 13, 14, 15, 17, 20, 21, 24, 27, 29, 30, 35, 37, 38], [1, 23, 2, 26, 3, 32, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 18, 21, 22, 25, 28, 30, 31, 36, 38, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 34, 24, 25, 2, 35, 36, 27, 28, 29, 30, 31, 3, 37, 38], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 34, 24, 25, 2, 35, 36, 27, 28, 29, 30, 31, 3, 37, 38, 39]]"
        }
    },
    {
        "code": "ssh -Y Regex",
        "text": "inv ok a trust regex forward ssh connect with server regex as user regex ..",
        "id": 806,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'y', 'regex', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "nl -b a File",
        "text": "add a line number to ever i line in regex ..",
        "id": 807,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'b', 'a', 'file', 'nl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "scp -B -p -q -r File File",
        "text": "recur cop i all file and director i match regex in local host 's director i directory to file on local host connect as ssh user regex in batch mode pre serv file per miss and timestamp ..",
        "id": 808,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'b', '-', 'p', '-', 'q', '-', 'r', 'file', 'file', 's', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 10, 12, 14, 18], [1, 2, 3, 4, 5, 6, 9, 11, 13, 15, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 16], [19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "set $( cal DateTime DateTime )",
        "text": "save print calendar for regex regex in posit v aria bl ..",
        "id": 809,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'set', 'word', 'word', 'word', 'date', 'time', 'date', 'time', 'cal']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 1, 0, 0, 0, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[1, 2, 6, 7, 5, 8, 10], [2, 7, 3, 5, 6, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 12, 8, 9, 10, 11], [2, 12, 8, 9, 10, 11, 3]]"
        }
    },
    {
        "code": "mount | grep -i /dev/sd.* | awk { print NR '\\t' $1 '\\t' $3 } > mount_output &",
        "text": "print list of disk and mount point of disk match file into regex as a background task ..",
        "id": 810,
        "graph": {
            "nodes": "['program', '&', '|', '|', '>', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'raw_string', 'word', 'mount', 'output', 'word', 'word', '-', 'i', '/', 'dev', '/', 'sd', '.', '*', 'word', '{', 'print', 'nr', \"'\", '\\\\', 't', \"'\", '$', 'variable_name', \"'\", '\\\\', 't', \"'\", '$', 'variable_name', '}', 'mount', 'grep', 'a', 'wk', '<number>', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 6, 6, 7, 7, 7, 7, 7, 7, 0, 8, 9, 10, 11, 11, 11, 11, 0, 0, 12, 12, 12, 12, 0, 0, 13, 16, 17, 26, 26, 35, 41]]",
            "sibling_edges": "[[5, 13, 16, 2, 7, 3, 4, 17, 6, 26, 8, 9, 10, 11, 35, 12, 41, 14, 18, 20, 21, 22, 23, 24, 30, 31, 32, 34, 36, 37, 38, 40, 45], [1, 4, 2, 17, 3, 26, 5, 6, 7, 8, 9, 10, 11, 34, 12, 40, 13, 15, 19, 21, 22, 23, 24, 25, 31, 32, 33, 35, 37, 38, 39, 41, 46]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 2, 44, 18, 19, 20, 21, 22, 23, 24, 25, 3, 45, 46, 27, 28, 29, 30, 31, 32, 33, 34, 47, 36, 37, 38, 39, 40, 48, 42, 4, 14, 15], [2, 44, 18, 19, 20, 21, 22, 23, 24, 25, 3, 45, 46, 27, 28, 29, 30, 31, 32, 33, 34, 47, 36, 37, 38, 39, 40, 48, 42, 4, 14, 15, 1]]"
        }
    },
    {
        "code": "zcat Regex | grep -o Regex | sort | uniq -c | sort -n",
        "text": "unzip file list uni qu line match regex pattern regex prefix by number of occur r sort from least frequent to most frequent ..",
        "id": 811,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'o', 'regex', 'word', 'word', '-', 'c', 'word', '-', 'n', 'z', 'cat', 'grep', 'sort', 'uni', 'q', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 6, 7, 0, 0, 8, 8, 0, 9, 9, 10, 10, 12, 16, 17, 17, 20]]",
            "sibling_edges": "[[5, 1, 7, 2, 16, 3, 8, 4, 10, 12, 6, 17, 20, 13, 18, 21, 23, 27], [1, 12, 2, 16, 3, 17, 4, 20, 5, 6, 7, 8, 9, 14, 19, 22, 24, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 24, 11, 1, 25, 13, 14, 15, 2, 26, 3, 27, 28, 18, 19, 4, 29, 21], [24, 11, 1, 25, 13, 14, 15, 2, 26, 3, 27, 28, 18, 19, 4, 29, 21, 22]]"
        }
    },
    {
        "code": "find Path -mmin -Quantity",
        "text": "find all file under and below file that be mod if i le than time span ago ..",
        "id": 812,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'mm', 'in', '-', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "hostname -s",
        "text": "save short host name append with file in v aria bl regex ..",
        "id": 813,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 's', 'host', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 1, 1, 2, 2]]",
            "sibling_edges": "[[2, 3, 5], [1, 4, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 6, 3], [6, 3, 4]]"
        }
    },
    {
        "code": "yum remove subversion",
        "text": "r emo v regex pack ag from system ..",
        "id": 814,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'remove', 'subversion', 'yum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "yes UUUUUUUUUUUUUUUUU | tr -d \\n > /dev/to/overwrite",
        "text": "cont in u write regex without new l in to file ..",
        "id": 815,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'word', 'word', '/', 'dev', '/', 'to', '/', 'overwrite', 'word', 'uuuuuuuuuuuuuuuuu', 'word', '-', 'd', 'yes', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 4, 0, 5, 5, 12, 14]]",
            "sibling_edges": "[[5, 4, 1, 2, 12, 14, 6, 7, 8, 9, 10, 15], [2, 1, 14, 3, 4, 5, 7, 8, 9, 10, 11, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 13, 1, 18, 15, 16, 2, 6, 7, 8, 9, 10], [13, 1, 18, 15, 16, 2, 6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -type f -perm -Permission -print0",
        "text": "find file with number per miss in en ti r file system with null char act as delimit ..",
        "id": 816,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', '-', 'permission', '-', 'print', '<number>', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14, 16, 17], [1, 2, 3, 4, 5, 6, 10, 13, 15, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -wholename Regex",
        "text": "find all file in current director i that word regex in them ..",
        "id": 817,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'whole', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} \\;",
        "text": "find all file under directory director i and c hang per miss to number ..",
        "id": 818,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan -print | xargs -I {} rm {}",
        "text": "de let file in file and below that not be mod if i in over time span ..",
        "id": 819,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', '-', 'print', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 5, 5, 0, 6, 6, 0, 0, 7, 0, 0, 8, 17, 17, 20, 21, 23, 24]]",
            "sibling_edges": "[[5, 1, 8, 2, 3, 4, 17, 6, 21, 7, 10, 11, 13, 15, 18, 20, 23, 26], [1, 17, 2, 3, 4, 5, 6, 20, 7, 23, 11, 12, 14, 16, 19, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 9, 10, 11, 12, 13, 14, 15, 16, 1, 26, 27, 18, 19, 28, 29, 22, 30], [9, 10, 11, 12, 13, 14, 15, 16, 1, 26, 27, 18, 19, 28, 29, 22, 30, 31]]"
        }
    },
    {
        "code": "od -c -v -A none -w Size | sort -b -u",
        "text": "print a uni qu list of char act from standard input show backslash es cap for non display ..",
        "id": 820,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'c', '-', 'v', '-', 'a', 'none', '-', 'w', 'size', 'word', '-', 'b', '-', 'u', 'od', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 0, 8, 8, 9, 9, 10, 21]]",
            "sibling_edges": "[[7, 1, 10, 2, 3, 4, 5, 6, 21, 8, 11, 13, 15, 18, 22, 24], [1, 21, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 16, 19, 23, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 27, 22, 23, 24], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 27, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -type d",
        "text": "find all director i under minimum number level down my dir director i ..",
        "id": 821,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12], [1, 2, 3, 4, 5, 9, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -mtime Timespan -exec rm -r -f {} \\;",
        "text": "de let all file in file director i tree that be last mod if i time span ago ..",
        "id": 822,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', 'timespan', '-', 'exec', 'rm', '-', 'r', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 0, 0, 8, 8, 9, 22, 23]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 23, 11, 12, 15, 18, 20, 22, 24], [1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 13, 16, 19, 21, 23, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24, 25]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find recur all file who be e name begin with regex ..",
        "id": 823,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "ifconfig Regex | grep Regex | grep -v Regex",
        "text": "get string with regex address of regex network inter fa c ..",
        "id": 824,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', 'regex', 'word', '-', 'v', 'regex', 'if', 'config', 'grep', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 5, 6, 7, 7, 9, 11]]",
            "sibling_edges": "[[3, 1, 4, 2, 7, 9, 11, 5, 12, 15], [1, 9, 2, 11, 3, 4, 5, 6, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 16, 8, 1, 17, 10, 2, 18, 12, 13], [16, 8, 1, 17, 10, 2, 18, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} mv -t Directory {} {}",
        "text": "move all file file from director i file and it sub director i to file ..",
        "id": 825,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'mv', '-', 't', 'directory', 'word', 'word', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 10, 0, 0, 0, 0, 11, 19, 19, 24, 25, 30, 31, 32, 33]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 19, 6, 7, 25, 8, 9, 10, 31, 13, 16, 17, 20, 22, 24, 27, 30, 32, 35], [1, 19, 2, 3, 4, 5, 6, 7, 24, 8, 9, 10, 30, 32, 14, 17, 18, 21, 23, 25, 28, 31, 33, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 12, 13, 14, 15, 16, 17, 18, 1, 35, 36, 20, 21, 22, 23, 37, 38, 26, 27, 28, 29, 39, 40, 41], [12, 13, 14, 15, 16, 17, 18, 1, 35, 36, 20, 21, 22, 23, 37, 38, 26, 27, 28, 29, 39, 40, 41, 42]]"
        }
    },
    {
        "code": "find -ds . -mindepth 1 -type f -print0; printf \\0;",
        "text": "display all regular file in current folder which be at least number level deep and search in alphabet order of director i ..",
        "id": 826,
        "graph": {
            "nodes": "['program', ';', ';', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', '-', 'ds', '.', '-', 'min', 'depth', '<number>', '-', 'type', 'f', '-', 'print', '<number>', 'word', '\\\\', '<number>', 'find', 'print', 'f']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 5, 5, 6, 7, 7, 8, 9, 9, 9, 0, 10, 10, 11, 25, 25]]",
            "sibling_edges": "[[9, 1, 10, 11, 3, 4, 5, 6, 7, 8, 25, 12, 15, 16, 19, 22, 23, 26, 29], [1, 25, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 16, 17, 20, 23, 24, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 29, 30, 26, 27], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 29, 30, 26, 27, 2]]"
        }
    },
    {
        "code": "nl -b a | sed Program | grep Regex | awk Program",
        "text": "output standard input follow by line number until line number ..",
        "id": 827,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'b', 'a', 'word', 'program', 'word', 'regex', 'word', 'program', 'nl', 's', 'ed', 'grep', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 6, 0, 7, 0, 8, 9, 13, 13, 15, 17, 17]]",
            "sibling_edges": "[[5, 1, 6, 2, 7, 3, 9, 4, 13, 15, 17, 10, 20, 23], [1, 13, 2, 15, 3, 17, 4, 5, 6, 7, 8, 11, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 10, 11, 12, 1, 20, 21, 14, 2, 22, 16, 3, 23, 24], [10, 11, 12, 1, 20, 21, 14, 2, 22, 16, 3, 23, 24, 18]]"
        }
    },
    {
        "code": "find Path Path -f -atime -Timespan",
        "text": "search current director i recur for regular file last access le than time span ago ..",
        "id": 828,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'f', '-', 'a', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 9, 11, 12, 14], [1, 2, 3, 4, 5, 10, 12, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rm {} \\;",
        "text": "search for swap file in temp folder and r emo v them ..",
        "id": 829,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    },
    {
        "code": "$( date '+%s:%N' )",
        "text": "set trace prompt to print second nanosecond script name and line number ..",
        "id": 830,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', 'raw_string', 'word', \"'\", '+', '%', 's', ':', '%', 'n', \"'\", 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4]]",
            "sibling_edges": "[[1, 3, 4, 5, 6, 7, 8, 9, 10, 11], [4, 2, 3, 6, 7, 8, 9, 10, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 13, 5, 6, 7, 8, 9, 10, 11, 12], [13, 5, 6, 7, 8, 9, 10, 11, 12, 2]]"
        }
    },
    {
        "code": "grep --include Regex -r -n -w Regex -e Regex",
        "text": "find recur all file have ext en file file in directory that contain regex and print match string with string number and file name ..",
        "id": 831,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '--', 'include', 'regex', '-', 'r', '-', 'n', '-', 'w', 'regex', '-', 'e', 'regex', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 10, 13, 15, 17, 20], [1, 2, 3, 4, 5, 6, 7, 8, 11, 14, 16, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -type f | xargs -I {} grep -l Regex {}",
        "text": "search for word regex in all regular file in current folder and display match file name ..",
        "id": 832,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'l', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 8, 0, 0, 9, 14, 14, 17, 18, 23, 24]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 18, 6, 7, 8, 11, 15, 17, 20, 23, 26], [1, 14, 2, 3, 4, 5, 17, 6, 7, 8, 23, 12, 16, 18, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30], [10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30, 31]]"
        }
    },
    {
        "code": "find Path -print0 | xargs -0 -I {} echo {}",
        "text": "find file and director i under current director i and print them ..",
        "id": 833,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'echo', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 0, 4, 4, 5, 5, 0, 0, 6, 0, 0, 7, 12, 12, 17, 18, 20, 21]]",
            "sibling_edges": "[[3, 1, 7, 2, 12, 4, 5, 18, 6, 9, 10, 13, 15, 17, 20, 23], [1, 12, 2, 3, 4, 5, 17, 6, 20, 10, 11, 14, 16, 18, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 8, 9, 10, 11, 1, 23, 24, 13, 14, 15, 16, 25, 26, 19, 27], [8, 9, 10, 11, 1, 23, 24, 13, 14, 15, 16, 25, 26, 19, 27, 28]]"
        }
    },
    {
        "code": "top",
        "text": "start regex to monitor all process with default set ..",
        "id": 834,
        "graph": {
            "nodes": "['program', 'pipeline', 'command', '|', 'command', 'command_name', 'word', 'word', 'command_name', 'number', 'word', 'concatenation', 'word', 'concatenation', 'word', 'path', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'echo', 'word', 'word']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 0, 4, 4, 5, 5, 0, 0, 6, 0, 0, 7, 12, 12, 17, 18, 20, 21]]",
            "sibling_edges": "[[3, 1, 7, 2, 12, 4, 5, 18, 6, 9, 10, 13, 15, 17, 20, 23], [1, 12, 2, 3, 4, 5, 17, 6, 20, 10, 11, 14, 16, 18, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 8, 9, 10, 11, 1, 23, 24, 13, 14, 15, 16, 25, 26, 19, 27], [8, 9, 10, 11, 1, 23, 24, 13, 14, 15, 16, 25, 26, 19, 27, 28]]"
        }
    },
    {
        "code": "find . -type f | perl -ne print $1 if m/\\.([^.\\/]+)$/ | sort -u;",
        "text": "find all of distinct file ext en in current director i ..",
        "id": 835,
        "graph": {
            "nodes": "['program', ';', ';', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '(', ')', '$', '/', 'word', 'word', '.', '-', 'type', 'f', 'word', '-', 'ne', 'print', '$', 'variable_name', 'if', 'm', '/', '\\\\', '.', '[', 'word', ']', '+', 'word', '-', 'u', 'find', 'perl', '<number>', '^', '.', '\\\\', '/', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 7, 0, 8, 8, 9, 0, 0, 10, 11, 11, 11, 11, 0, 0, 0, 0, 0, 16, 16, 17, 22, 27, 34, 34, 34, 34, 37]]",
            "sibling_edges": "[[11, 1, 16, 7, 3, 13, 15, 4, 17, 5, 6, 22, 8, 9, 27, 10, 12, 35, 36, 14, 37, 19, 23, 26, 29, 30, 31, 33, 34, 38, 43, 44, 45], [1, 12, 2, 3, 22, 14, 4, 37, 5, 6, 7, 8, 9, 26, 10, 11, 33, 36, 13, 15, 16, 20, 24, 27, 30, 31, 32, 34, 35, 39, 44, 45, 46]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[40, 18, 19, 20, 21, 3, 41, 23, 24, 25, 26, 42, 28, 29, 30, 31, 32, 1, 12, 33, 43, 44, 45, 46, 35, 36, 13, 14, 15, 4, 47, 38, 39], [18, 19, 20, 21, 3, 41, 23, 24, 25, 26, 42, 28, 29, 30, 31, 32, 1, 12, 33, 43, 44, 45, 46, 35, 36, 13, 14, 15, 4, 47, 38, 39, 2]]"
        }
    },
    {
        "code": "find Path -perm Permission -iname Regex",
        "text": "find all file in file system which per miss number and with name regex ..",
        "id": 836,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "grep -r -l Regex File",
        "text": "find string with text regex recur in all file of current folder and print name of file with match string ..",
        "id": 837,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'l', 'regex', 'file', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find . -type f -name *.java -exec sh -c iconv -f cp1252 -t utf-8 '$1' > converted && mv converted '$1' -- {} ;",
        "text": "c hang en cod of all file file in a director i and sub director i from regex to regex ..",
        "id": 838,
        "graph": {
            "nodes": "['program', ';', '&&', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', '>', 'word', 'word', 'convert', \"'\", '$', '<number>', \"'\", '--', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'name', '*', '.', 'java', '-', 'exec', 'sh', '-', 'c', 'i', 'conv', '-', 'f', 'cp', '<number>', '-', 't', 'u', 'tf', '-', '<number>', \"'\", '$', '<number>', \"'\", 'convert', 'mv', '{', '}', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 4, 5, 0, 0, 0, 6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 21, 22, 29, 30, 31]]",
            "sibling_edges": "[[30, 21, 2, 19, 22, 3, 4, 5, 31, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 26, 29, 33, 36, 38, 39, 41, 44, 46, 48, 50, 52, 54, 55, 56, 58, 59, 60], [1, 2, 22, 20, 3, 4, 5, 29, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 27, 30, 34, 37, 39, 40, 42, 45, 47, 49, 51, 53, 55, 56, 57, 59, 60, 61]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[66, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 20, 62, 2, 63, 23, 24, 25, 26, 27, 28, 64, 65], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 20, 62, 2, 63, 23, 24, 25, 26, 27, 28, 64, 65, 1]]"
        }
    },
    {
        "code": "find Path -print0 -iname Regex | tar -c -v -f File -T File",
        "text": "search for file and director i with case in sen it pattern file in file director i and c re at an archiv of all file find en ur white space safe ti ..",
        "id": 839,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'print', '<number>', '-', 'i', 'name', 'regex', 'word', '-', 'c', '-', 'v', '-', 'f', 'file', '-', 't', 'file', 'find', 'tar']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 4, 5, 0, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11, 12, 21]]",
            "sibling_edges": "[[5, 1, 12, 2, 3, 4, 21, 6, 7, 8, 9, 10, 14, 15, 17, 18, 22, 24, 26, 29], [1, 21, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 18, 19, 23, 25, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 13, 14, 15, 16, 17, 18, 19, 20, 1, 33, 22, 23, 24, 25, 26, 27, 28, 29, 30], [13, 14, 15, 16, 17, 18, 19, 20, 1, 33, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "find Path -user Regex -iname Regex",
        "text": "find all file file that belong to user root ..",
        "id": 840,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rename -v Regex {} +",
        "text": "find all file end with file in current folder and r en be them ..",
        "id": 841,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rename', '-', 'v', 'regex', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 9, 20, 21]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 21, 11, 14, 17, 20], [1, 2, 3, 4, 5, 6, 7, 20, 8, 12, 15, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 22]]"
        }
    },
    {
        "code": "ls *.html | xargs -I {} sh -c mv $1 `basename $1 .html`.txt - {}",
        "text": "r en be all file file in a current director i to file file ..",
        "id": 842,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '*', '.', 'html', 'word', '-', 'i', 'word', 'word', 'sh', '-', 'c', 'mv', '$', 'variable_name', 'word', '-', 'word', 'word', 'ls', 'x', 'arg', '{', '}', '<number>', '`', '`', '.', 'txt', '{', '}', 'word', 'word', '$', 'variable_name', '.', 'html', 'base', 'name', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 0, 0, 4, 5, 5, 6, 0, 0, 0, 7, 0, 0, 8, 12, 12, 15, 16, 22, 0, 0, 23, 23, 25, 26, 0, 0, 0, 0, 39, 39, 40, 40, 42]]",
            "sibling_edges": "[[2, 1, 8, 12, 3, 16, 4, 5, 6, 22, 23, 7, 9, 10, 13, 15, 18, 21, 34, 25, 28, 33, 39, 35, 40, 42, 41, 43, 45], [1, 12, 2, 3, 15, 4, 5, 6, 21, 33, 7, 25, 10, 11, 14, 16, 19, 22, 23, 26, 29, 40, 34, 36, 41, 39, 42, 44, 46]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 9, 10, 11, 1, 28, 29, 13, 14, 30, 31, 17, 18, 19, 20, 21, 32, 33, 45, 46, 41, 47, 43, 44, 34, 35, 36, 24, 37], [9, 10, 11, 1, 28, 29, 13, 14, 30, 31, 17, 18, 19, 20, 21, 32, 33, 45, 46, 41, 47, 43, 44, 34, 35, 36, 24, 37, 38]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -or -name Regex \\) -type f -atime +Timespan -exec rm {} \\;",
        "text": "r emo v all file and file file that be access last time more than time span ago ..",
        "id": 843,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'type', 'f', '-', 'a', 'time', '+', 'timespan', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 11, 12, 12, 13, 13, 14, 0, 0, 15, 15, 16, 41, 42]]",
            "sibling_edges": "[[16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 42, 18, 20, 23, 25, 28, 30, 33, 34, 36, 38, 41, 43], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 41, 15, 19, 21, 24, 26, 29, 31, 34, 35, 37, 39, 42, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[45, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 47, 43], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 47, 43, 44]]"
        }
    },
    {
        "code": "whoami",
        "text": "save user name of current user to v aria bl regex ..",
        "id": 844,
        "graph": {
            "nodes": "['word', 'whoa', 'mi']",
            "base_edges": "[[1, 2], [0, 0]]",
            "sibling_edges": "[[1], [2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1], [2]]"
        }
    },
    {
        "code": "curl http://www.example.com --proxy http://125.119.175.48:8909",
        "text": "download content from file use a pro xi server ..",
        "id": 845,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '<', 'url', '>', '--', 'proxy', '<', 'url', '>', 'curl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 6, 8, 10, 11], [1, 2, 3, 6, 7, 9, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 5, 6, 7, 8, 9, 10, 11], [5, 6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -user Regex -print | xargs -I {} chown Regex {}",
        "text": "c hang ownership of all file in file system from ed ward to earnest c ..",
        "id": 846,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'print', 'word', '-', 'i', 'word', 'word', 'chow', 'n', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 0, 6, 6, 0, 0, 7, 7, 8, 0, 0, 9, 16, 16, 19, 20, 24, 25]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 16, 6, 20, 7, 8, 11, 14, 17, 19, 21, 24, 27], [1, 16, 2, 3, 4, 5, 6, 19, 7, 8, 24, 12, 15, 18, 20, 22, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 15, 1, 27, 28, 17, 18, 29, 30, 21, 22, 23, 31], [10, 11, 12, 13, 14, 15, 1, 27, 28, 17, 18, 29, 30, 21, 22, 23, 31, 32]]"
        }
    },
    {
        "code": "ps -eo pcpu,pid,user,args | sort -r -k1 | less",
        "text": "page through a list of all run process on system with those take most cpu at top of list ..",
        "id": 847,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', '-', 'eo', 'p', 'cpu', ',', 'pi', 'd', ',', 'user', ',', 'arg', 'word', '-', 'r', '-', 'k', '<number>', 'word', 'ps', 'sort', 'le']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 5, 5, 6, 6, 6, 0, 7, 19, 25]]",
            "sibling_edges": "[[4, 1, 6, 2, 7, 3, 19, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 23], [1, 19, 2, 25, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 27, 20, 21, 22, 23, 24, 2], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 27, 20, 21, 22, 23, 24, 2, 28]]"
        }
    },
    {
        "code": "finger -l | grep Regex | tr -s Regex | cut -d Regex -f Number | sort | uniq",
        "text": "print each file in user 's user n be and full name ..",
        "id": 848,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'word', 'regex', 'word', '-', 's', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'word', 'finger', 'grep', 'tr', 'cut', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 7, 0, 8, 8, 9, 0, 10, 10, 11, 12, 12, 13, 0, 0, 14, 17, 19, 23, 30, 31, 31]]",
            "sibling_edges": "[[6, 1, 7, 2, 9, 3, 13, 4, 30, 5, 14, 17, 19, 8, 23, 10, 11, 12, 15, 20, 24, 27, 37], [1, 17, 2, 19, 3, 23, 4, 30, 5, 31, 6, 7, 8, 9, 10, 11, 12, 13, 16, 21, 25, 28, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 15, 16, 1, 33, 18, 2, 34, 20, 21, 22, 3, 35, 24, 25, 26, 27, 28, 29, 4, 36, 5, 37], [15, 16, 1, 33, 18, 2, 34, 20, 21, 22, 3, 35, 24, 25, 26, 27, 28, 29, 4, 36, 5, 37, 38]]"
        }
    },
    {
        "code": "diff -q <( sort File | uniq ) <( sort File | uniq )",
        "text": "print whether uni qu content of regex and regex differ ..",
        "id": 849,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'q', '<(', ')', '<(', ')', 'diff', '|', '|', 'word', 'word', 'word', 'file', 'word', 'word', 'file', 'word', 'sort', 'uni', 'q', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 12, 0, 0, 13, 0, 14, 16, 16, 17, 19, 19]]",
            "sibling_edges": "[[2, 1, 6, 3, 5, 16, 7, 19, 12, 10, 13, 11, 14, 17, 21, 24], [1, 5, 7, 4, 14, 6, 17, 8, 10, 16, 11, 19, 12, 13, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 3, 4, 5, 20, 15, 10, 21, 22, 6, 7, 23, 18, 11, 24, 25], [3, 4, 5, 20, 15, 10, 21, 22, 6, 7, 23, 18, 11, 24, 25, 8]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan -daystart -print0 | cpio -p -d -0 Regex",
        "text": "find all file and director i last mod if i le than time span ago and cop i to file c re at director i as need ..",
        "id": 850,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', '-', 'day', 'start', '-', 'print', '<number>', 'word', '-', 'p', '-', 'd', '-', '<number>', 'regex', 'find', 'cp', 'io']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 0, 7, 7, 8, 8, 9, 9, 10, 11, 24, 24]]",
            "sibling_edges": "[[6, 1, 11, 2, 3, 4, 5, 24, 7, 8, 9, 13, 14, 16, 18, 19, 21, 22, 25, 27, 29, 33], [1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 17, 19, 20, 22, 23, 26, 28, 30, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 33, 34, 25, 26, 27, 28, 29, 30], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 33, 34, 25, 26, 27, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "search all file file in current folder ..",
        "id": 851,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "false",
        "text": "return exit code number and term in shell if regex be app li ..",
        "id": 852,
        "graph": {
            "nodes": "['program', 'command', 'command_name', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -maxdepth Quantity | xargs -n Quantity -I {} rm {}",
        "text": "r emo v all file file ..",
        "id": 853,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'max', 'depth', 'quantity', 'word', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 8, 0, 9, 9, 10, 11, 11, 0, 0, 12, 0, 0, 13, 26, 26, 32, 33, 35, 36]]",
            "sibling_edges": "[[8, 1, 13, 2, 3, 4, 5, 6, 7, 26, 9, 10, 11, 33, 12, 15, 16, 19, 22, 23, 27, 30, 32, 35, 38], [1, 26, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 12, 35, 16, 17, 20, 23, 24, 28, 31, 33, 36, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 38, 39, 27, 28, 29, 30, 31, 40, 41, 34, 42], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 38, 39, 27, 28, 29, 30, 31, 40, 41, 34, 42, 43]]"
        }
    },
    {
        "code": "find -L Path -type l -delete",
        "text": "r emo v all break symbol link in file ..",
        "id": 854,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'path', '-', 'type', 'l', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 10, 13], [1, 2, 3, 4, 5, 8, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "basedir=$(cygpath -am $(dirname $0))",
        "text": "take folder name of file regex c hang backslash to forward one and save result in regex v aria bl ..",
        "id": 855,
        "graph": {
            "nodes": "['variable_assignment', 'variable_name', '=', 'base', 'dir', '$(', ')', 'word', 'word', '-', 'be', '$(', ')', 'c', 'yg', 'path', 'word', '$', 'special_variable_name', 'dir', 'name', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 1, 1, 0, 0, 0, 0, 7, 7, 0, 0, 8, 8, 8, 0, 0, 0, 16, 16, 18]]",
            "sibling_edges": "[[1, 2, 3, 5, 12, 8, 7, 9, 11, 18, 13, 14, 16, 17, 19], [2, 5, 4, 8, 6, 7, 11, 10, 16, 12, 14, 15, 17, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 4, 2, 5, 13, 14, 15, 9, 10, 11, 19, 20, 17, 21, 12], [4, 2, 5, 13, 14, 15, 9, 10, 11, 19, 20, 17, 21, 12, 6]]"
        }
    },
    {
        "code": "kill -9 $(lsof -i:3000 -t)",
        "text": "i mm ed i kill all process use tcp port number on system ..",
        "id": 856,
        "graph": {
            "nodes": "['command', 'number', 'word', '-', '<number>', '$(', ')', 'kill', 'word', 'word', 'word', '-', 'i', ':', '<number>', '-', 't', 'ls', 'of']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 8, 8, 8, 8, 9, 9, 10, 10]]",
            "sibling_edges": "[[2, 1, 3, 5, 9, 10, 8, 11, 12, 13, 15, 17], [1, 5, 4, 10, 6, 8, 9, 12, 13, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 3, 4, 5, 17, 18, 11, 12, 13, 14, 15, 16], [3, 4, 5, 17, 18, 11, 12, 13, 14, 15, 16, 6]]"
        }
    },
    {
        "code": "find Path -name Regex -print",
        "text": "find all text file in current folder ..",
        "id": 857,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "chown -R Regex File",
        "text": "recur c hang owner to regex and group to regex of file ..",
        "id": 858,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -size +Size -iname Regex",
        "text": "find file screenshot that be big than size ..",
        "id": 859,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 10, 12, 13], [1, 2, 3, 4, 5, 9, 11, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -prune -or -exec rm -r -f {} \\;",
        "text": "de let all file and director i take by glob pattern regex except one with name regex ..",
        "id": 860,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'exec', 'rm', '-', 'r', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 0, 0, 12, 12, 13, 33, 34]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 34, 15, 16, 19, 22, 24, 26, 29, 31, 33, 35], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 33, 12, 16, 17, 20, 23, 25, 27, 30, 32, 34, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 35], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 35, 36]]"
        }
    },
    {
        "code": "find Path -iname Regex -type f -exec mv {} File \\;",
        "text": "search for all regular file file in file system and move them to folder file ..",
        "id": 861,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'type', 'f', '-', 'exec', 'mv', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 9, 9, 10, 22, 23]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 23, 8, 12, 13, 16, 19, 22, 25], [1, 2, 3, 4, 5, 6, 7, 22, 8, 9, 13, 14, 17, 20, 23, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 29, 24, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 29, 24, 25, 26]]"
        }
    },
    {
        "code": "find Path -name Regex -ok rm {} \\;",
        "text": "r emo v all regex file under current director i with confirm prompt ..",
        "id": 862,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'ok', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    },
    {
        "code": "find Path -exec ls -l {} \\;",
        "text": "list all file in file director i tree ..",
        "id": 863,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 0, 0, 5, 5, 6, 13, 14]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 14, 8, 11, 13, 15], [1, 2, 3, 4, 13, 5, 9, 12, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 7, 8, 9, 10, 11, 12, 18, 19, 15], [7, 8, 9, 10, 11, 12, 18, 19, 15, 16]]"
        }
    },
    {
        "code": "find $(pwd) -name YourProgram -exec dirname {} ; | while read d; do cd $d && pwd; done",
        "text": "print on standard output name of all director i that re id in current director i tree and contain file regex ..",
        "id": 864,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', '|', 'while', ';', 'word', '$(', ')', '-', 'name', 'your', 'program', '-', 'exec', 'dir', 'name', 'word', 'word', 'word', 'do', ';', 'done', 'find', '{', '}', 'word', 'd', '&&', 'word', 'read', 'pwd', 'word', '$', 'variable_name', 'word', 'cd', 'd', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 9, 20, 21, 0, 22, 0, 0, 29, 32, 0, 0, 0, 0, 35, 37, 38]]",
            "sibling_edges": "[[21, 1, 6, 9, 11, 2, 3, 4, 5, 7, 22, 8, 10, 32, 12, 14, 16, 18, 20, 29, 23, 38, 24, 37, 31, 35, 36], [1, 6, 7, 10, 2, 3, 4, 5, 20, 29, 8, 23, 32, 11, 13, 15, 17, 19, 21, 22, 35, 24, 25, 31, 38, 36, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 34, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 1, 6, 7, 33, 30, 8, 23, 39, 36, 40, 31, 41, 24], [10, 34, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 1, 6, 7, 33, 30, 8, 23, 39, 36, 40, 31, 41, 24, 25]]"
        }
    },
    {
        "code": "find Path Path -lname Regex",
        "text": "find symbol link in file and file to file who be e path n be contain regex ..",
        "id": 865,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'l', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 8, 9], [1, 2, 3, 4, 9, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -iname Regex -type f -print0 | xargs -0 -I {} mv {} File",
        "text": "search for all regular file file in file system and move them to folder file ..",
        "id": 866,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'mv', 'word', 'word', 'file', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 0, 0, 11, 12, 24, 24, 29, 30, 32, 33]]",
            "sibling_edges": "[[7, 1, 12, 2, 3, 4, 5, 6, 24, 8, 9, 30, 10, 33, 14, 15, 18, 21, 22, 25, 27, 29, 32, 36], [1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 29, 10, 32, 11, 15, 16, 19, 22, 23, 26, 28, 30, 33, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 36, 37, 25, 26, 27, 28, 38, 39, 31, 40, 41], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 36, 37, 25, 26, 27, 28, 38, 39, 31, 40, 41, 34]]"
        }
    },
    {
        "code": "find Path -type f -not -empty | wc -l",
        "text": "display count of total number of non e mp ti file in current folder ..",
        "id": 867,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'not', '-', 'empty', 'word', '-', 'l', 'find', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 0, 7, 7, 8, 17]]",
            "sibling_edges": "[[6, 1, 8, 2, 3, 4, 5, 17, 10, 13, 15, 18], [1, 17, 2, 3, 4, 5, 6, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 1, 21, 18], [9, 10, 11, 12, 13, 14, 15, 16, 1, 21, 18, 19]]"
        }
    },
    {
        "code": "find Path -user Regex -name Regex",
        "text": "find file and director i name file that belong to user regex in en ti r file system ..",
        "id": 868,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find . -type f |xargs ls -la| awk {print 'chmod '$1' '$NF}>./filesPermissions.sh",
        "text": "c re at script file that rest or origin per miss of regular file in current director i tree ..",
        "id": 869,
        "graph": {
            "nodes": "['redirected_statement', '|', '|', '>', 'word', 'word', 'word', 'word', 'word', 'word', '.', '/', 'file', 'permission', '.', 'sh', 'word', '.', '-', 'type', 'f', 'word', 'ls', '-', 'la', 'word', 'word', 'word', 'raw_string', 'raw_string', 'word', 'find', 'x', 'arg', 'a', 'wk', '{', 'print', \"'\", 'ch', 'mod', \"'\", '$', 'variable_name', \"'\", \"'\", '$', 'variable_name', '}', '<number>', 'nf']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 5, 6, 6, 7, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 16, 21, 21, 25, 25, 26, 27, 28, 28, 28, 28, 0, 0, 29, 29, 0, 0, 30, 43, 47]]",
            "sibling_edges": "[[30, 7, 1, 9, 2, 3, 16, 5, 6, 21, 8, 25, 27, 10, 11, 12, 13, 14, 18, 23, 26, 28, 43, 29, 47, 32, 34, 38, 39, 40, 42, 44, 46], [3, 1, 21, 2, 25, 4, 5, 6, 7, 8, 9, 26, 28, 11, 12, 13, 14, 15, 19, 24, 27, 42, 29, 46, 30, 33, 35, 39, 40, 41, 43, 45, 47]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 17, 18, 19, 20, 1, 32, 33, 22, 23, 24, 2, 34, 35, 36, 37, 38, 39, 40, 41, 42, 49, 44, 45, 46, 50, 48, 3, 10, 11, 12, 13, 14], [17, 18, 19, 20, 1, 32, 33, 22, 23, 24, 2, 34, 35, 36, 37, 38, 39, 40, 41, 42, 49, 44, 45, 46, 50, 48, 3, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "find all file with ext en file in file director i tree ..",
        "id": 870,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex -newer File",
        "text": "find all file that be new than file and contain string regex at begin of name under user 's home director i tree ..",
        "id": 871,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'new', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find <path> -type f -exec sh -c for f; do echo process $f;  done sh {} +",
        "text": "find all regular file in regex and exe cut process with all of them as argument ..",
        "id": 872,
        "graph": {
            "nodes": "['program', ';', ';', 'word', 'word', 'word', 'word', '<', 'word', '>', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'echo', 'process', '$', 'variable_name', 'word', 'sh', 'word', 'word', '+', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'sh', '-', 'c', 'for', 'f', 'do', 'f', 'do', '{', '}', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 0, 0, 6, 0, 8, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 17, 21, 22, 24, 25, 27]]",
            "sibling_edges": "[[16, 1, 21, 2, 27, 8, 17, 3, 4, 22, 5, 25, 7, 9, 10, 11, 12, 13, 14, 15, 20, 24, 29, 32, 35], [1, 17, 2, 22, 7, 9, 3, 4, 20, 5, 24, 6, 8, 10, 11, 12, 13, 14, 15, 16, 21, 25, 30, 33, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[44, 7, 28, 9, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 39, 18, 19, 20, 40, 2, 41, 23, 42, 43], [7, 28, 9, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 39, 18, 19, 20, 40, 2, 41, 23, 42, 43, 26]]"
        }
    },
    {
        "code": "shopt -p globstar",
        "text": "print shell option regex with ind ic of it status ..",
        "id": 873,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'p', 'glob', 'tar', 'shop', 't']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 1, 1, 2, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 6, 8], [1, 2, 5, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 9, 4, 5, 6], [9, 4, 5, 6, 7]]"
        }
    },
    {
        "code": "find Path -newer File -not -newer File -type d -print0 | xargs -0 -I {} rmdir {}",
        "text": "r emo v all e mp ti folder under current path age between regex and regex timestamp ..",
        "id": 874,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'new', 'file', '-', 'not', '-', 'new', 'file', '-', 'type', 'd', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'dir', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 10, 0, 11, 11, 12, 12, 0, 0, 13, 13, 0, 0, 14, 30, 30, 35, 36, 39, 40]]",
            "sibling_edges": "[[10, 1, 14, 2, 3, 4, 5, 6, 7, 8, 9, 30, 11, 12, 36, 13, 16, 19, 21, 24, 27, 28, 31, 33, 35, 37, 39, 42], [1, 30, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 35, 13, 39, 17, 20, 22, 25, 28, 29, 32, 34, 36, 38, 40, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 42, 43, 31, 32, 33, 34, 44, 45, 37, 38, 46], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 42, 43, 31, 32, 33, 34, 44, 45, 37, 38, 46, 47]]"
        }
    },
    {
        "code": "find . -type f -exec perl -pi -e s|xxx|yyy|g {} ;",
        "text": "find and rep lac xxx with yyy in whole director i tree ..",
        "id": 875,
        "graph": {
            "nodes": "['program', ';', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'exec', 'perl', '-', 'pi', '-', 'e', 's', 'word', 'word', 'word', 'word', 'word', 'find', 'xxx', 'yyy', 'g', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 0, 0, 0, 0, 0, 13, 26, 27, 28, 29, 30]]",
            "sibling_edges": "[[30, 12, 2, 26, 3, 27, 4, 13, 5, 6, 7, 8, 9, 10, 11, 28, 15, 18, 21, 23, 29], [1, 2, 26, 3, 27, 4, 28, 5, 6, 7, 8, 9, 10, 11, 12, 29, 16, 19, 22, 24, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 32, 3, 33, 4, 34, 35, 36], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 32, 3, 33, 4, 34, 35, 36, 1]]"
        }
    },
    {
        "code": "top -b -p `pidof a.out`",
        "text": "use regex to monitor process file ..",
        "id": 876,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'b', '-', 'p', '`', '`', 'top', 'word', 'word', 'a', '.', 'out', 'p', 'id', 'of']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 1, 1, 2, 2, 0, 0, 3, 0, 0, 11, 11, 11, 12, 12, 12]]",
            "sibling_edges": "[[3, 1, 2, 4, 6, 8, 11, 12, 13, 14, 16, 17], [1, 2, 8, 5, 7, 12, 9, 11, 14, 15, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 4, 5, 6, 7, 8, 16, 17, 18, 13, 14, 15], [4, 5, 6, 7, 8, 16, 17, 18, 13, 14, 15, 9]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -or -name Regex \\)",
        "text": "find file under current director i call regex or regex ..",
        "id": 877,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 13, 16, 18, 21], [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 17, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -type f -wholename Regex -exec grep -H Regex {} \\;",
        "text": "i dent if i cm file ac cross all php bb inst al ..",
        "id": 878,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'whole', 'name', 'regex', '-', 'exec', 'grep', '-', 'h', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 0, 0, 10, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 13, 16, 17, 20, 23, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 14, 17, 18, 21, 24, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28, 29]]"
        }
    },
    {
        "code": "uname -o",
        "text": "display oper system type ie file ..",
        "id": 879,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'o', 'u', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 1, 1, 2, 2]]",
            "sibling_edges": "[[2, 3, 5], [1, 4, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 6, 3], [6, 3, 4]]"
        }
    },
    {
        "code": "sudo kill -15 $( sudo lsof -i:6000 -t )",
        "text": "send sig term to all process use tcp port number on system use root account ..",
        "id": 880,
        "graph": {
            "nodes": "['command', 'word', 'number', 'word', 'kill', '-', '<number>', '$(', ')', 'su', 'do', 'word', 'word', 'word', 'word', 'ls', 'of', '-', 'i', ':', '<number>', '-', 't', 'su', 'do']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 1, 2, 2, 0, 0, 3, 3, 0, 0, 0, 0, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14]]",
            "sibling_edges": "[[3, 1, 2, 5, 7, 13, 9, 14, 11, 12, 15, 17, 18, 19, 21, 23], [1, 2, 7, 6, 14, 8, 10, 11, 12, 13, 16, 18, 19, 20, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 4, 5, 6, 7, 23, 24, 15, 16, 17, 18, 19, 20, 21, 22], [10, 4, 5, 6, 7, 23, 24, 15, 16, 17, 18, 19, 20, 21, 22, 8]]"
        }
    },
    {
        "code": "su - jetty -c sh runProgram.sh",
        "text": "run command file as user jet ti ..",
        "id": 881,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'jetty', '-', 'c', 'sh', 'run', 'program', '.', 'sh', 'su']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 9, 12, 13, 14], [1, 2, 3, 4, 5, 10, 13, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type f | sed Program",
        "text": "find all file in regex director i without go into sub director i and print on li name p rec ed by number space ..",
        "id": 882,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'f', 'word', 'program', 'find', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 0, 7, 8, 17, 17]]",
            "sibling_edges": "[[6, 1, 8, 2, 3, 4, 5, 17, 10, 11, 14, 20], [1, 17, 2, 3, 4, 5, 6, 7, 11, 12, 15, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 1, 20, 21], [9, 10, 11, 12, 13, 14, 15, 16, 1, 20, 21, 18]]"
        }
    },
    {
        "code": "find . -exec command {} ;",
        "text": "run regex on each file from current director i tree ..",
        "id": 883,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', '.', '-', 'exec', 'command', 'word', 'word', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 0, 5, 10, 11]]",
            "sibling_edges": "[[11, 5, 2, 3, 4, 7, 10], [1, 2, 3, 4, 10, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 13, 14], [6, 7, 8, 9, 13, 14, 1]]"
        }
    },
    {
        "code": "find | xargs",
        "text": "find all file and director i under current director i ..",
        "id": 884,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 2, 3, 3]]",
            "sibling_edges": "[[2, 1, 5], [1, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 1, 5], [1, 5, 6]]"
        }
    },
    {
        "code": "du -k -s -h File | sort -n -r",
        "text": "print kb size of all top level file and folder in a current folder in descend order in human read a bl format ..",
        "id": 885,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'k', '-', 's', '-', 'h', 'file', 'word', '-', 'n', '-', 'r', 'du', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 4, 5, 0, 6, 6, 7, 7, 8, 16]]",
            "sibling_edges": "[[5, 1, 8, 2, 3, 4, 16, 6, 9, 11, 13, 17, 19], [1, 16, 2, 3, 4, 5, 6, 7, 10, 12, 14, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 1, 22, 17, 18, 19], [9, 10, 11, 12, 13, 14, 15, 1, 22, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "find $dirname -type f > $tempfile",
        "text": "search director i regex for regular file and save result to regex ..",
        "id": 886,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', '>', 'word', '$', 'variable_name', '-', 'type', 'f', '$', 'variable_name', 'find', 'dir', 'name', 'temp', 'file']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 4, 6, 6, 11, 11]]",
            "sibling_edges": "[[2, 4, 6, 1, 3, 5, 7, 10, 13, 15], [3, 5, 1, 2, 10, 6, 8, 11, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 5, 13, 14, 7, 8, 9, 3, 10, 15], [5, 13, 14, 7, 8, 9, 3, 10, 15, 16]]"
        }
    },
    {
        "code": "find plsql -type f -perm -220 -exec ls -l {} ; 2>/dev/null",
        "text": "find file that be writ a bl by both regex and group ..",
        "id": 887,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'pl', 'sql', '-', 'type', 'f', '-', 'perm', '-', '<number>', '-', 'exec', 'ls', '-', 'l', 'word', 'word', 'file_descriptor', '>', 'word', 'find', '{', '}', '<number>', '/', 'dev', '/', 'null']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 0, 0, 0, 0, 0, 10, 25, 26, 27, 29, 29, 29, 29]]",
            "sibling_edges": "[[26, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 16, 18, 20, 23, 25, 27, 28, 34, 35, 36], [1, 27, 2, 3, 4, 5, 6, 7, 8, 9, 25, 12, 14, 17, 19, 21, 24, 26, 28, 29, 35, 36, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 32, 1, 33, 28, 34, 35, 36], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 32, 1, 33, 28, 34, 35, 36, 37]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan",
        "text": "find all file and director i that be mod if i in time span ..",
        "id": 888,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "yes this is the text I want to add to a file|head -200>myFile.txt",
        "text": "write number line of regex to file ..",
        "id": 889,
        "graph": {
            "nodes": "['redirected_statement', '|', 'file_descriptor', '>', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', '<number>', 'my', 'file', '.', 'txt', 'word', 'this', 'be', 'the', 'text', 'i', 'want', 'to', 'add', 'to', 'a', 'file', 'word', 'yes', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 4, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 22, 34]]",
            "sibling_edges": "[[34, 15, 1, 2, 3, 22, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20], [2, 1, 34, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 1, 36, 16, 17, 3, 18, 19, 20], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 1, 36, 16, 17, 3, 18, 19, 20, 21]]"
        }
    },
    {
        "code": "find Path -name Regex -type f",
        "text": "find all file file under current director i ..",
        "id": 890,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "tar -t -f File | xargs -I {} dirname {} | sort | uniq",
        "text": "print sort uni qu list of folder in compress archiv file ..",
        "id": 891,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', '-', 'f', 'file', 'word', '-', 'i', 'word', 'word', 'dir', 'name', 'word', 'word', 'word', 'word', 'tar', 'x', 'arg', '{', '}', '{', '}', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 5, 6, 0, 7, 7, 0, 0, 8, 8, 0, 0, 0, 0, 9, 15, 15, 18, 19, 22, 23, 24, 25, 25]]",
            "sibling_edges": "[[6, 1, 23, 2, 24, 3, 9, 4, 5, 15, 7, 19, 8, 10, 12, 16, 18, 20, 22, 27, 34], [1, 15, 2, 24, 3, 25, 4, 5, 6, 7, 18, 8, 22, 11, 13, 17, 19, 21, 23, 28, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 1, 27, 28, 16, 17, 29, 30, 20, 21, 31, 32, 2, 33, 3, 34], [10, 11, 12, 13, 14, 1, 27, 28, 16, 17, 29, 30, 20, 21, 31, 32, 2, 33, 3, 34, 35]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -i -q Regex {} \\; -exec grep -i -q Regex {} \\; -print",
        "text": "search for file file in current director i and search for a word in all t he be e file ..",
        "id": 892,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'i', '-', 'q', 'regex', 'word', 'word', '\\\\', ';', '-', 'exec', 'grep', '-', 'i', '-', 'q', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'find', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 0, 0, 15, 15, 16, 16, 17, 30, 31, 42, 43]]",
            "sibling_edges": "[[17, 1, 2, 3, 4, 5, 6, 7, 8, 31, 9, 10, 11, 12, 13, 14, 43, 15, 19, 22, 25, 27, 30, 32, 34, 37, 39, 42, 44, 46], [1, 2, 3, 4, 5, 6, 7, 8, 30, 9, 10, 11, 12, 13, 14, 42, 15, 16, 20, 23, 26, 28, 31, 33, 35, 38, 40, 43, 45, 47]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[48, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 49, 50, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 51, 52, 44, 45, 46], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 49, 50, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 51, 52, 44, 45, 46, 47]]"
        }
    },
    {
        "code": "head -c Quantity File",
        "text": "return first size in file ..",
        "id": 893,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'c', 'quantity', 'file', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "echo $( ls -l $( which Regex ) )",
        "text": "print file inform of command regex ..",
        "id": 894,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'echo', 'word', 'word', '-', 'l', '$(', ')', 'ls', 'word', 'word', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 1, 0, 0, 5, 5, 0, 0, 6, 0, 0, 12, 13]]",
            "sibling_edges": "[[1, 2, 10, 6, 5, 7, 9, 12, 13], [2, 6, 3, 5, 9, 8, 13, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 11, 7, 8, 9, 15, 14, 10], [2, 11, 7, 8, 9, 15, 14, 10, 3]]"
        }
    },
    {
        "code": "find / -name expect 2>/dev/null",
        "text": "find all inst an c of a specif file in en ti r file system and discard error ..",
        "id": 895,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'file_descriptor', '>', 'word', 'word', '/', '-', 'name', 'expect', '<number>', '/', 'dev', '/', 'null', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 6, 6, 6, 6, 7]]",
            "sibling_edges": "[[3, 7, 1, 2, 4, 5, 9, 13, 14, 15], [4, 1, 2, 3, 5, 6, 10, 14, 15, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 5, 13, 14, 15], [8, 9, 10, 11, 12, 5, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -type d -exec ls -d -l -r -t {} \\;",
        "text": "list all director i under current director i ..",
        "id": 896,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ls', '-', 'd', '-', 'l', '-', 'r', '-', 't', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 0, 0, 10, 10, 11, 27, 28]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 13, 16, 19, 21, 23, 25, 27, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 10, 14, 17, 20, 22, 24, 26, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 29], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 29, 30]]"
        }
    },
    {
        "code": "ssh Regex",
        "text": "ssh into server regex as current user ..",
        "id": 897,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'ssh']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -name Regex -exec wc -l {} \\;",
        "text": "print number of line for each file file from regex director i tree ..",
        "id": 898,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'wc', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -perm -Permission",
        "text": "find all file and director i under current director i which read writ per miss for owner and on li read per miss for group and other ..",
        "id": 899,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 8], [1, 2, 3, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex -print",
        "text": "display all file file in current folder ..",
        "id": 900,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -type d \\( ! -name Regex \\) -or \\( ! -name Regex \\) -print",
        "text": "display all director i in folder file except file and ca ch director i ..",
        "id": 901,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '\\\\', '(', '!', '-', 'name', 'regex', '\\\\', ')', '-', 'or', '\\\\', '(', '!', '-', 'name', 'regex', '\\\\', ')', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 15, 16]]",
            "sibling_edges": "[[16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 21, 24, 27, 29, 31, 34, 37, 39], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 22, 25, 28, 30, 32, 35, 38, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -n Regex {} File \\;",
        "text": "find all file on system who be e name be file and search them for regex ..",
        "id": 902,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'n', 'regex', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 9, 9, 10, 21, 22]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 15, 18, 21, 24], [1, 2, 3, 4, 5, 6, 7, 21, 8, 9, 13, 16, 19, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 23, 24], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -name Regex -mtime +Timespan -print",
        "text": "search current director i tree for all file file that be last mod if i at least time span ago ..",
        "id": 903,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'm', 'time', '+', 'timespan', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 13, 15, 17], [1, 2, 3, 4, 5, 6, 10, 13, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "cat --help",
        "text": "print help on regex command u sag ..",
        "id": 904,
        "graph": {
            "nodes": "['command', 'word', 'word', '--', 'help', 'cat']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "read -n Quantity Regex",
        "text": "read a sing l char act from standard input into v aria bl regex ..",
        "id": 905,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "ping -c Quantity Regex | sed Program",
        "text": "print ave rag time of number ping request to file ..",
        "id": 906,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'c', 'quantity', 'regex', 'word', 'program', 'ping', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 0, 5, 6, 11, 11]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 11, 7, 14], [1, 11, 2, 3, 4, 5, 8, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 7, 8, 9, 10, 1, 14, 15], [7, 8, 9, 10, 1, 14, 15, 12]]"
        }
    },
    {
        "code": "top -p Regex -p Regex -p Regex",
        "text": "monitor number specif process id number regex and number ..",
        "id": 907,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'p', 'regex', '-', 'p', 'regex', '-', 'p', 'regex', 'top']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 11, 14], [1, 2, 3, 4, 5, 6, 9, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "head -c1024 /dev/urandom | xxd -p | tr -d $\\n",
        "text": "convert first size of file to a string of hex a dec im byte ..",
        "id": 908,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', '$', 'word', '-', 'c', '<number>', '/', 'dev', '/', 'u', 'random', 'word', '-', 'p', 'word', '-', 'd', 'head', 'xx', 'd', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 4, 4, 4, 4, 4, 0, 5, 5, 0, 6, 6, 8, 17, 17, 20]]",
            "sibling_edges": "[[4, 1, 5, 2, 8, 3, 17, 20, 6, 9, 10, 12, 13, 14, 15, 18, 21, 24], [1, 17, 2, 20, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 19, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 11, 12, 13, 14, 15, 16, 1, 24, 25, 18, 19, 2, 26, 21, 22], [9, 10, 11, 12, 13, 14, 15, 16, 1, 24, 25, 18, 19, 2, 26, 21, 22, 7]]"
        }
    },
    {
        "code": "find . -name custlist* | perl -ne $path = $_; s?.*/??; $name = $_; $map{$name} = $path; ++$c; END { print $map{(sort(keys(%map)))[$c-1]} }",
        "text": "get on li late version of file from regex file under current director i ..",
        "id": 909,
        "graph": {
            "nodes": "['program', ';', ';', ';', ';', ';', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '=', '$', 'special_variable_name', '=', '$', 'variable_name', 'word', '{', 'print', 'word', '$', 'word', 'word', 'word', '}', 'word', '.', '-', 'name', 'cu', 'st', 'list', '*', 'word', '-', 'ne', '$', 'variable_name', '=', '$', 'special_variable_name', 's', '?', '.', '*', '/', '?', '?', '$', 'variable_name', '_', 'word', 'word', 'path', 'word', 'end', '$', 'variable_name', '{', '(', 'word', 'c', '-', '<number>', ']', '}', 'find', 'perl', 'path', '_', 'name', '$', 'variable_name', '{', '$', 'variable_name', '}', '++', '$', 'variable_name', 'map', 'sort', '(', 'key', '(', '%', 'map', ')', ')', ')', '[', 'map', 'name', 'c']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 0, 0, 0, 9, 10, 0, 0, 0, 0, 0, 11, 0, 12, 13, 13, 14, 14, 14, 14, 0, 15, 15, 0, 0, 16, 0, 0, 17, 17, 17, 17, 17, 17, 17, 0, 0, 20, 0, 0, 23, 0, 24, 0, 0, 27, 0, 0, 29, 29, 29, 30, 31, 33, 41, 45, 48, 57, 0, 0, 59, 0, 0, 60, 62, 0, 0, 65, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 80, 83, 87]]",
            "sibling_edges": "[[48, 1, 17, 2, 20, 3, 23, 4, 87, 5, 14, 6, 57, 7, 60, 8, 24, 9, 10, 28, 31, 33, 12, 13, 41, 15, 45, 16, 19, 22, 65, 27, 68, 29, 30, 35, 37, 38, 39, 42, 44, 47, 49, 50, 51, 52, 53, 54, 56, 80, 59, 83, 62, 64, 67, 69, 70, 79, 82, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97], [1, 17, 2, 56, 3, 79, 4, 62, 5, 24, 6, 41, 7, 19, 8, 22, 9, 10, 64, 29, 11, 12, 13, 14, 15, 44, 16, 47, 20, 23, 27, 67, 28, 30, 31, 36, 38, 39, 40, 43, 45, 48, 50, 51, 52, 53, 54, 55, 57, 59, 82, 60, 86, 65, 68, 70, 71, 80, 83, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[74, 34, 35, 36, 37, 38, 39, 40, 6, 75, 42, 43, 44, 76, 46, 47, 77, 1, 49, 50, 51, 52, 53, 54, 55, 2, 56, 78, 18, 19, 58, 3, 79, 99, 81, 82, 100, 84, 21, 22, 61, 4, 85, 86, 101, 5, 63, 25, 26, 64, 88, 66, 67, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 28, 69, 70, 71, 72, 73], [34, 35, 36, 37, 38, 39, 40, 6, 75, 42, 43, 44, 76, 46, 47, 77, 1, 49, 50, 51, 52, 53, 54, 55, 2, 56, 78, 18, 19, 58, 3, 79, 99, 81, 82, 100, 84, 21, 22, 61, 4, 85, 86, 101, 5, 63, 25, 26, 64, 88, 66, 67, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 28, 69, 70, 71, 72, 73, 32]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec ls -l {} \\;",
        "text": "long list all file in current folder start with regex ..",
        "id": 910,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -type d -print0 | xargs -I {} chmod Permission {}",
        "text": "find all director i under regex and set permission ..",
        "id": 911,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'print', '<number>', 'word', '-', 'i', 'word', 'word', 'ch', 'mod', 'permission', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 0, 0, 7, 7, 8, 0, 0, 9, 17, 17, 20, 21, 25, 26]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 17, 6, 21, 7, 8, 11, 14, 15, 18, 20, 22, 25, 28], [1, 17, 2, 3, 4, 5, 6, 20, 7, 8, 25, 12, 15, 16, 19, 21, 23, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 15, 16, 1, 28, 29, 18, 19, 30, 31, 22, 23, 24, 32], [10, 11, 12, 13, 14, 15, 16, 1, 28, 29, 18, 19, 30, 31, 22, 23, 24, 32, 33]]"
        }
    },
    {
        "code": "find Path -type d -name Regex | tr Regex Regex | sed Program",
        "text": "find all director i under file excl ud hide director i and rep lac all new l in with in output r emo v last ..",
        "id": 912,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', 'word', 'regex', 'regex', 'word', 'program', 'find', 'tr', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 0, 8, 9, 0, 10, 11, 19, 22, 22]]",
            "sibling_edges": "[[7, 1, 9, 2, 11, 3, 4, 5, 6, 19, 8, 22, 13, 16, 26], [1, 19, 2, 22, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 12, 13, 14, 15, 16, 17, 18, 1, 25, 20, 21, 2, 26, 27], [12, 13, 14, 15, 16, 17, 18, 1, 25, 20, 21, 2, 26, 27, 23]]"
        }
    },
    {
        "code": "set -o history -o histexpand",
        "text": "en a bl hist or i and hist or i exp an within a script ..",
        "id": 913,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'o', 'history', '-', 'o', 'hist', 'expand', 'set']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 9, 11], [1, 2, 3, 4, 7, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "ssh user@server DISPLAY=:0 nohup xeyes < /dev/null > std.out 2> std.err &",
        "text": "start regex in background on re mot server and exit ssh session ..",
        "id": 914,
        "graph": {
            "nodes": "['program', '&', 'word', 'word', 'word', 'word', '<', 'word', '>', 'word', 'file_descriptor', '>', 'word', 'word', 'user', '@', 'server', 'display', '=', ':', '<number>', 'n', 'oh', 'up', 'x', 'eye', '/', 'dev', '/', 'null', 'std', '.', 'out', '<number>', 'std', '.', 'err', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 7, 7, 7, 7, 9, 9, 9, 10, 12, 12, 12, 13]]",
            "sibling_edges": "[[12, 5, 7, 9, 13, 2, 3, 4, 6, 8, 10, 11, 14, 15, 17, 18, 19, 21, 22, 24, 26, 27, 28, 30, 31, 34, 35], [1, 6, 8, 10, 2, 3, 4, 5, 7, 9, 11, 12, 15, 16, 18, 19, 20, 22, 23, 25, 27, 28, 29, 31, 32, 35, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 6, 26, 27, 28, 29, 8, 30, 31, 32, 33, 11, 34, 35, 36], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 6, 26, 27, 28, 29, 8, 30, 31, 32, 33, 11, 34, 35, 36, 1]]"
        }
    },
    {
        "code": "who | sed -e Program",
        "text": "print list of all user name who be file in ..",
        "id": 915,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'e', 'program', 'who', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 2, 2, 3, 4, 5, 5]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 10], [1, 5, 2, 3, 7, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 1, 10, 11, 6, 7], [1, 10, 11, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f ! -iname Regex -delete",
        "text": "de let all text file from current folder ..",
        "id": 916,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '!', '-', 'i', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 14, 15, 18], [1, 2, 3, 4, 5, 6, 7, 11, 15, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -size +Size \\( -mtime +Timespan -or -atime +Timespan \\) -ls",
        "text": "list all file and director i under file which be great than size and be mod if i or access more than time span ago ..",
        "id": 917,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '\\\\', '(', '-', 'm', 'time', '+', 'timespan', '-', 'or', '-', 'a', 'time', '+', 'timespan', '\\\\', ')', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9, 9, 10, 10, 11, 11, 12]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 18, 20, 21, 23, 25, 27, 28, 30, 32, 34], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 19, 21, 22, 24, 26, 28, 29, 31, 33, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]]"
        }
    },
    {
        "code": "alias lvim=vim -c 'normal '0'",
        "text": "set alia regex for command regex ..",
        "id": 918,
        "graph": {
            "nodes": "['program', 'word', 'word', 'ERROR', 'word', 'l', 'vim', '=', 'vim', '-', 'c', 'raw_string', 'number', \"'\", 'alias', \"'\", 'normal', \"'\", '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 3, 4, 11, 11, 11, 12]]",
            "sibling_edges": "[[12, 4, 1, 2, 5, 6, 7, 9, 11, 15, 16], [3, 1, 2, 11, 6, 7, 8, 10, 12, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18], [5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 13]]"
        }
    },
    {
        "code": "find Path \\( ! -regex Regex \\) -type f -print0 | xargs -0 -I {} sed -i Program {}",
        "text": "find all regular file under current director i and rep lac ever i occur r of file with file in those file ..",
        "id": 919,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '!', '-', 'regex', 'regex', '\\\\', ')', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', 'program', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 10, 0, 11, 11, 12, 12, 0, 0, 13, 13, 14, 14, 15, 0, 0, 16, 32, 32, 37, 38, 44, 45]]",
            "sibling_edges": "[[10, 1, 16, 2, 3, 4, 5, 6, 7, 8, 9, 32, 11, 12, 38, 13, 14, 15, 18, 21, 24, 26, 29, 30, 33, 35, 37, 39, 41, 44, 47], [1, 32, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 37, 13, 14, 15, 44, 19, 22, 25, 27, 30, 31, 34, 36, 38, 40, 42, 45, 48]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[46, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 47, 48, 33, 34, 35, 36, 49, 50, 39, 40, 41, 42, 43, 51], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 47, 48, 33, 34, 35, 36, 49, 50, 39, 40, 41, 42, 43, 51, 52]]"
        }
    },
    {
        "code": "find Path",
        "text": "find all file and director i under test director i ..",
        "id": 920,
        "graph": {
            "nodes": "['command', 'word', 'word', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -exec echo Regex {} \\;",
        "text": "find command will list of all file regex director i from current director i be for list echo command will display regex ..",
        "id": 921,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'echo', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 0, 0, 5, 5, 6, 12, 13]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 13, 8, 12, 14], [1, 2, 3, 4, 12, 5, 9, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 17, 18, 14], [7, 8, 9, 10, 11, 17, 18, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -or -size +Size",
        "text": "display all file in folder file which be big than size or which start with name regex ..",
        "id": 922,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'or', '-', 'size', '+', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14, 16], [1, 2, 3, 4, 5, 6, 10, 13, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "od -t x1 --skip-bytes Size --read-bytes Size File | head - Quantity | awk Program",
        "text": "save hex a dec im byte number in bin ar i file file to v aria bl regex ..",
        "id": 923,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', 'x', '<number>', '--', 'skip', '-', 'byte', 'size', '--', 'read', '-', 'byte', 'size', 'file', 'word', '-', 'quantity', 'word', 'program', 'od', 'head', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 5, 5, 5, 6, 7, 7, 7, 7, 8, 9, 0, 10, 11, 0, 12, 13, 29, 32, 32]]",
            "sibling_edges": "[[9, 1, 11, 2, 13, 3, 4, 5, 6, 7, 8, 29, 10, 32, 14, 16, 18, 19, 20, 23, 24, 25, 36], [1, 29, 2, 32, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 19, 20, 21, 24, 25, 26, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 35, 30, 31, 2, 36, 37], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 35, 30, 31, 2, 36, 37, 33]]"
        }
    },
    {
        "code": "find Path -name Regex -printf '%M %f \\t %s bytes \\t%y\\n'",
        "text": "find all text file in current folder and display per miss and size along with name ..",
        "id": 924,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'f', \"'\", '%', 'm', '%', 'f', '\\\\', 't', '%', 's', 'byte', '\\\\', 't', '%', 'y', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [1, 2, 3, 4, 5, 9, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]]"
        }
    },
    {
        "code": "find Path -type f -exec bzip2 {} \\;",
        "text": "recur compress all file within regex folder ..",
        "id": 925,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'b', 'zip', '<number>', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 0, 0, 6, 6, 7, 17, 18]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 18, 9, 12, 14, 15, 17, 19], [1, 2, 3, 4, 5, 17, 6, 10, 13, 15, 16, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 8, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19], [8, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19, 20]]"
        }
    },
    {
        "code": "join -1 Regex -2 Regex -t Regex File File",
        "text": "output all line in file who be e second comma se par second field match first field of a line in file ..",
        "id": 926,
        "graph": {
            "nodes": "['command', 'number', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', '-', '<number>', 'regex', '-', '<number>', 'regex', '-', 't', 'regex', 'file', 'file', 'join']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 10, 13, 16], [1, 2, 3, 4, 5, 6, 7, 8, 11, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "find . -perm -20 -exec chmod g-w {} ; or find . -perm -20 -print | xargs chmod g-w",
        "text": "find all file regex director i which write per miss for group r emo v per miss from group ..",
        "id": 927,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'number', 'word', 'word', 'word', '|', 'word', '.', '-', 'perm', '-', '<number>', '-', 'exec', 'ch', 'mod', 'g', '-', 'w', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'find', '{', '}', 'word', 'find', '.', '-', 'perm', '-', '<number>', '-', 'print', 'word', 'ch', 'mod', 'g', '-', 'w', 'or', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 22, 23, 0, 24, 25, 26, 26, 27, 27, 28, 28, 0, 29, 29, 30, 30, 30, 34, 43, 43]]",
            "sibling_edges": "[[23, 1, 9, 2, 3, 4, 5, 6, 7, 28, 8, 11, 13, 15, 17, 19, 20, 22, 34, 24, 25, 26, 27, 43, 29, 37, 39, 41, 44, 46, 47, 50], [1, 34, 2, 3, 4, 5, 6, 7, 22, 8, 43, 12, 14, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 38, 40, 42, 45, 47, 48, 51]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 32, 33, 1, 49, 35, 36, 37, 38, 39, 40, 41, 42, 8, 50, 51, 44, 45, 46, 47], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 32, 33, 1, 49, 35, 36, 37, 38, 39, 40, 41, 42, 8, 50, 51, 44, 45, 46, 47, 48]]"
        }
    },
    {
        "code": "read -e -p Regex Regex",
        "text": "read a line from standard input into first argument use an interact shell with prompt regex ..",
        "id": 928,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'e', '-', 'p', 'regex', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\;",
        "text": "find all director i under directory director i and c hang per miss to number ..",
        "id": 929,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find / -type f -atime -10 > March.files",
        "text": "save list of all regular file access le than time span ago as file ..",
        "id": 930,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'number', '>', 'word', 'word', '/', '-', 'type', 'f', '-', 'a', 'time', '-', '<number>', 'march', '.', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 7, 7, 7, 8]]",
            "sibling_edges": "[[5, 8, 1, 2, 3, 4, 6, 10, 13, 14, 16, 18, 19], [6, 1, 2, 3, 4, 5, 7, 11, 14, 15, 17, 19, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 6, 18, 19], [9, 10, 11, 12, 13, 14, 15, 16, 17, 6, 18, 19, 20]]"
        }
    },
    {
        "code": "date +'%Y/%m/%d (%H:%M)' history Quantity | cut -c Number",
        "text": "append date and command run to file after ever i command ..",
        "id": 931,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'history', 'quantity', 'word', '-', 'c', 'number', 'date', '+', \"'\", '%', 'y', '/', '%', 'm', '/', '%', 'd', '(', '%', 'h', ':', '%', 'm', ')', \"'\", 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11]]",
            "sibling_edges": "[[3, 1, 6, 8, 2, 11, 4, 7, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [1, 11, 7, 2, 3, 4, 5, 8, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 9, 10, 1, 34, 12, 13], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 9, 10, 1, 34, 12, 13, 14]]"
        }
    },
    {
        "code": "wc -l $(git ls-files | grep .*\\.cs)",
        "text": "count number of line in each file file in a git re posit or i ..",
        "id": 932,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'l', '$(', ')', 'wc', '|', 'word', 'word', 'word', 'ls', '-', 'file', 'word', '.', '*', '\\\\', '.', 'cs', 'git', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 9, 9, 9, 0, 10, 10, 10, 10, 10, 11, 15]]",
            "sibling_edges": "[[2, 1, 3, 5, 10, 9, 8, 11, 15, 12, 13, 16, 17, 18, 19], [1, 5, 4, 11, 6, 8, 15, 9, 10, 13, 14, 17, 18, 19, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 3, 4, 5, 21, 12, 13, 14, 8, 22, 16, 17, 18, 19, 20], [3, 4, 5, 21, 12, 13, 14, 8, 22, 16, 17, 18, 19, 20, 6]]"
        }
    },
    {
        "code": "find Path -type f -exec cat {} \\; | tr -c Regex Regex | grep Regex",
        "text": "list all regex address find in all file under file director i ..",
        "id": 933,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'cat', 'word', 'word', '\\\\', ';', 'word', '-', 'c', 'regex', 'regex', 'word', 'regex', 'find', '{', '}', 'tr', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 0, 9, 9, 10, 11, 0, 12, 13, 21, 22, 25, 30]]",
            "sibling_edges": "[[8, 1, 11, 2, 13, 3, 4, 5, 6, 7, 22, 25, 9, 10, 30, 15, 18, 21, 23, 26], [1, 25, 2, 30, 3, 4, 5, 6, 7, 21, 8, 9, 10, 11, 12, 16, 19, 22, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 14, 15, 16, 17, 18, 19, 20, 33, 34, 23, 24, 1, 35, 26, 27, 28, 29, 2, 36], [14, 15, 16, 17, 18, 19, 20, 33, 34, 23, 24, 1, 35, 26, 27, 28, 29, 2, 36, 31]]"
        }
    },
    {
        "code": "sort -u -t Regex -k Number File",
        "text": "sort regex delimit line in regex by first field pre serv on li uni qu line ..",
        "id": 934,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'u', '-', 't', 'regex', '-', 'k', 'number', 'file', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 10, 13], [1, 2, 3, 4, 5, 6, 9, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "tail -n Quantity File",
        "text": "print last number line of all file match file ..",
        "id": 935,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', 'file', 'tail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "cat | od -b",
        "text": "display standard input as octal byte ..",
        "id": 936,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '-', 'b', 'cat', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 2, 2, 3, 4]]",
            "sibling_edges": "[[3, 1, 4, 5], [1, 4, 2, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 1, 8, 5], [1, 8, 5, 6]]"
        }
    },
    {
        "code": "cp --help",
        "text": "display detail u sag help of regex command ..",
        "id": 937,
        "graph": {
            "nodes": "['command', 'word', 'word', '--', 'help', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "find Path -name Regex -print",
        "text": "find file file in us r folder ..",
        "id": 938,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "cat submission.cpp | astyle -bj | cpp - | md5sum",
        "text": "cal cu l regex sum of file with le sen it to super fic i c hang like comment or white spa c ..",
        "id": 939,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'submission', '.', 'cpp', 'word', '-', 'bj', 'word', '-', 'word', 'cat', 'a', 'style', 'cpp', 'md', '<number>', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 5, 5, 0, 6, 0, 7, 11, 11, 14, 16, 16, 16]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 3, 7, 11, 14, 8, 9, 12, 18, 21, 22], [1, 11, 2, 14, 3, 16, 4, 5, 6, 9, 10, 13, 19, 22, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 1, 18, 19, 12, 13, 2, 20, 15, 3, 21, 22], [8, 9, 10, 1, 18, 19, 12, 13, 2, 20, 15, 3, 21, 22, 23]]"
        }
    },
    {
        "code": "which Regex",
        "text": "set v aria bl g zip to full path of command regex ..",
        "id": 940,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "find all permission file who be e per miss set to number ..",
        "id": 941,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "zcat Regex | awk Program | head",
        "text": "print column count of compress file regex ..",
        "id": 942,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'regex', 'word', 'program', 'word', 'z', 'cat', 'a', 'wk', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 5, 7, 7, 9]]",
            "sibling_edges": "[[3, 1, 4, 2, 5, 7, 10, 12], [1, 7, 2, 9, 3, 4, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 6, 1, 12, 13, 8, 2], [11, 6, 1, 12, 13, 8, 2, 14]]"
        }
    },
    {
        "code": "find Path",
        "text": "find all file and director i under regex director i ..",
        "id": 943,
        "graph": {
            "nodes": "['command', 'word', 'word', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -name Regex -print",
        "text": "find all file file under regex ..",
        "id": 944,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path | xargs -I {} basename {}",
        "text": "search recur through file output on li base name of each file director i s ym link etc without an i contain director i that be part follow last slash ..",
        "id": 945,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'path', 'word', '-', 'i', 'word', 'word', 'base', 'name', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 4, 0, 0, 5, 7, 7, 10, 11, 14, 15]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 11, 4, 8, 10, 12, 14, 17], [1, 7, 2, 3, 10, 4, 14, 9, 11, 13, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 6, 1, 17, 18, 8, 9, 19, 20, 12, 13, 21], [6, 1, 17, 18, 8, 9, 19, 20, 12, 13, 21, 22]]"
        }
    },
    {
        "code": "chown Regex File",
        "text": "c hang ownership of file to regex ..",
        "id": 946,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find Path -lname Regex",
        "text": "find all symbol link contain regex in name under file director i tree ..",
        "id": 947,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'l', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search current director i for file who be e name start with ..",
        "id": 948,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -iname Regex -printf '%P\\n ' | xargs -I {} -n Quantity cp {} File",
        "text": "cop i all file with file ext en under file director i tree to directory director i with new name construct by prep end regex in name ..",
        "id": 949,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'print', 'f', \"'\", '%', 'p', \"'\", 'word', '-', 'i', 'word', 'word', '-', 'n', 'quantity', 'cp', 'word', 'word', 'file', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 0, 7, 7, 0, 0, 8, 8, 9, 10, 0, 0, 11, 12, 25, 25, 28, 29, 34, 35]]",
            "sibling_edges": "[[6, 1, 12, 2, 3, 4, 5, 25, 7, 29, 8, 9, 10, 35, 14, 15, 18, 19, 21, 22, 23, 26, 28, 30, 34, 38], [1, 25, 2, 3, 4, 5, 6, 7, 28, 8, 9, 10, 34, 11, 15, 16, 19, 20, 22, 23, 24, 27, 29, 31, 35, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 38, 39, 26, 27, 40, 41, 30, 31, 32, 33, 42, 43], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 38, 39, 26, 27, 40, 41, 30, 31, 32, 33, 42, 43, 36]]"
        }
    },
    {
        "code": "find Path -exec grep Regex {} \\; | more",
        "text": "search for file contain string regex and view result use more command ..",
        "id": 950,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'grep', 'regex', 'word', 'word', '\\\\', ';', 'word', 'find', '{', '}', 'more']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 0, 0, 6, 6, 0, 7, 13, 14, 17]]",
            "sibling_edges": "[[6, 1, 7, 2, 3, 4, 5, 14, 9, 13, 15], [1, 17, 2, 3, 4, 5, 13, 6, 10, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 19, 20, 15, 16, 1], [8, 9, 10, 11, 12, 19, 20, 15, 16, 1, 21]]"
        }
    },
    {
        "code": "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet -i identity_file machine.example.org gcc -dumpversion",
        "text": "print g cc version inst al on file use i dent file regex and suppress know host check and warn ..",
        "id": 951,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'o', 'user', 'know', 'host', 'file', '=', '/', 'dev', '/', 'null', '-', 'o', 'strict', 'host', 'key', 'check', '=', 'no', '-', 'o', 'log', 'level', '=', 'quiet', '-', 'i', 'identity', 'file', 'machine', '.', 'example', '.', 'org', 'g', 'cc', '-', 'dump', 'version', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 11, 11, 11, 12]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 34, 35, 36, 38, 40, 42, 43, 44, 45, 47, 49, 50], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 39, 41, 43, 44, 45, 46, 48, 50, 51]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[52, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]]"
        }
    },
    {
        "code": "tar xvf $myarchive && cd ${myarchive%.tar.gz}",
        "text": "extract file archiv and go into director i that normal be c re at by extract it ..",
        "id": 952,
        "graph": {
            "nodes": "['list', '&&', 'word', 'word', 'xv', 'f', '$', 'variable_name', 'word', '${', 'variable_name', '%', 'regex', '}', 'tar', 'my', 'archive', 'cd', 'my', 'archive', '.', 'tar', '.', 'gz']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 7, 8, 10, 10, 12, 12, 12, 12]]",
            "sibling_edges": "[[7, 1, 3, 2, 8, 4, 6, 9, 10, 11, 12, 15, 18, 20, 21, 22], [1, 8, 2, 6, 9, 5, 7, 10, 11, 12, 13, 16, 19, 21, 22, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 4, 5, 6, 15, 16, 1, 17, 9, 18, 19, 11, 20, 21, 22, 23], [4, 5, 6, 15, 16, 1, 17, 9, 18, 19, 11, 20, 21, 22, 23, 13]]"
        }
    },
    {
        "code": "which Regex",
        "text": "run file with a new environ v aria bl file set to full path of command file ..",
        "id": 953,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -l Regex {} + | wc -l",
        "text": "find all file who be e name begin with regex ..",
        "id": 954,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'l', 'regex', 'word', 'word', '+', 'word', '-', 'l', 'find', '{', '}', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 0, 0, 9, 0, 10, 10, 11, 22, 23, 25]]",
            "sibling_edges": "[[9, 1, 11, 2, 3, 4, 5, 6, 7, 8, 23, 25, 13, 16, 19, 22, 26], [1, 25, 2, 3, 4, 5, 6, 7, 8, 22, 9, 10, 14, 17, 20, 23, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 24, 1, 31, 26], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 24, 1, 31, 26, 27]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep Regex {} +",
        "text": "find all file file under current director i contain string regex ..",
        "id": 955,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', 'regex', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 0, 0, 7, 8, 17, 18]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 18, 10, 13, 17], [1, 2, 3, 4, 5, 6, 17, 7, 11, 14, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22], [9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 19]]"
        }
    },
    {
        "code": "find Path -not -name Regex -not -name Regex -not -type d",
        "text": "search current director i tree for file who be e name not end in file and file ..",
        "id": 956,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'not', '-', 'name', 'regex', '-', 'not', '-', 'name', 'regex', '-', 'not', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 18, 20, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 21, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all hide file start from director i give as v aria bl regex ..",
        "id": 957,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path $( pwd ) -type f -exec ls -l {} \\; | wc -l",
        "text": "count all file in a current folder and sub fold ..",
        "id": 958,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '$(', ')', '-', 'type', 'f', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'word', '-', 'l', 'find', '{', '}', 'wc', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 3, 4, 5, 5, 6, 7, 7, 0, 0, 8, 8, 0, 9, 9, 10, 22, 23, 26, 0, 33]]",
            "sibling_edges": "[[8, 1, 10, 2, 13, 3, 4, 5, 6, 7, 23, 26, 12, 33, 14, 17, 20, 22, 24, 27], [1, 26, 2, 12, 3, 4, 5, 6, 7, 22, 8, 9, 33, 13, 15, 18, 21, 23, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 34, 13, 14, 15, 16, 17, 18, 19, 20, 21, 30, 31, 24, 25, 1, 32, 27], [11, 12, 34, 13, 14, 15, 16, 17, 18, 19, 20, 21, 30, 31, 24, 25, 1, 32, 27, 28]]"
        }
    },
    {
        "code": "find Path -type f -print | xargs -i -I {} mv -f {} File {}",
        "text": "move all regular file under current director i to file ..",
        "id": 959,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'word', '-', 'i', '-', 'i', 'word', 'word', 'mv', '-', 'f', 'word', 'word', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 0, 0, 10, 0, 0, 11, 18, 18, 23, 24, 28, 29, 31, 32]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 18, 6, 7, 24, 8, 9, 29, 10, 13, 16, 19, 21, 23, 26, 28, 31, 34], [1, 18, 2, 3, 4, 5, 6, 7, 23, 8, 9, 28, 10, 31, 14, 17, 20, 22, 24, 27, 29, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 12, 13, 14, 15, 16, 17, 1, 34, 35, 19, 20, 21, 22, 36, 37, 25, 26, 27, 38, 39, 30, 40], [12, 13, 14, 15, 16, 17, 1, 34, 35, 19, 20, 21, 22, 36, 37, 25, 26, 27, 38, 39, 30, 40, 41]]"
        }
    },
    {
        "code": "find Path -printf . | wc -c",
        "text": "count number of file in director i tree who be e path n be match pattern file ..",
        "id": 960,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'print', 'f', '.', 'word', '-', 'c', 'find', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 0, 5, 5, 6, 12]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 12, 8, 9, 13], [1, 12, 2, 3, 4, 5, 9, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 1, 16, 13], [7, 8, 9, 10, 11, 1, 16, 13, 14]]"
        }
    },
    {
        "code": "read -sk",
        "text": "read a sing l char act from standard input in z sh ..",
        "id": 961,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'sk', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "find /var -maxdepth 2 -type d -exec stat -c %n %y {} ;",
        "text": "display director i name along with mod if i time for all file file ..",
        "id": 962,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'var', '-', 'max', 'depth', '<number>', '-', 'type', 'd', '-', 'exec', 'stat', '-', 'c', '%', 'n', '%', 'y', 'word', 'word', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 0, 0, 12, 31, 32]]",
            "sibling_edges": "[[32, 12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 19, 22, 25, 27, 29, 31], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 31, 14, 16, 17, 20, 23, 26, 28, 30, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 1]]"
        }
    },
    {
        "code": "less -N File",
        "text": "display file with line number and page interact through result ..",
        "id": 963,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'n', 'file', 'le']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -type f -name Regex \\( -exec grep -q Regex {} \\; -or -print \\)",
        "text": "find all file file in current director i tree that not contain a white spa c ..",
        "id": 964,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '\\\\', '(', '-', 'exec', 'grep', '-', 'q', 'regex', 'word', 'word', '\\\\', ';', '-', 'or', '-', 'print', '\\\\', ')', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 0, 0, 11, 11, 12, 12, 13, 13, 14, 14, 15, 31, 32]]",
            "sibling_edges": "[[15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 11, 12, 13, 17, 20, 23, 25, 28, 31, 33, 35, 37, 39], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 31, 11, 12, 13, 14, 18, 21, 24, 26, 29, 32, 34, 36, 38, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 42, 43, 33, 34, 35, 36, 37, 38, 39], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 42, 43, 33, 34, 35, 36, 37, 38, 39, 40]]"
        }
    },
    {
        "code": "find Path | sort",
        "text": "find all file in current folder and display them in sort order of name ..",
        "id": 965,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'path', 'word', 'find', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 2, 0, 3, 5]]",
            "sibling_edges": "[[2, 1, 3], [1, 5, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4, 1], [4, 1, 7]]"
        }
    },
    {
        "code": "find Path -print | xargs -I {} grep -l -i Regex {}",
        "text": "search for case in sen it pattern regex in all file under current director i tree and display match file ..",
        "id": 966,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'print', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'l', '-', 'i', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 0, 4, 4, 0, 0, 5, 6, 6, 7, 7, 8, 0, 0, 9, 13, 13, 16, 17, 24, 25]]",
            "sibling_edges": "[[3, 1, 9, 2, 13, 4, 17, 5, 6, 7, 8, 11, 14, 16, 19, 21, 24, 27], [1, 13, 2, 3, 4, 16, 5, 6, 7, 8, 24, 12, 15, 17, 20, 22, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 1, 27, 28, 14, 15, 29, 30, 18, 19, 20, 21, 22, 23, 31], [10, 11, 12, 1, 27, 28, 14, 15, 29, 30, 18, 19, 20, 21, 22, 23, 31, 32]]"
        }
    },
    {
        "code": "sed Program File | sed -n -f Program File",
        "text": "display on li line number list in regex from file regex ..",
        "id": 967,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'program', 'file', 'word', '-', 'n', '-', 'f', 'program', 'file', 's', 'ed', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 5, 6, 7, 8, 8, 11, 11]]",
            "sibling_edges": "[[3, 1, 8, 2, 11, 4, 5, 6, 12, 14, 18, 20], [1, 11, 2, 3, 4, 5, 6, 7, 13, 15, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 19, 9, 10, 1, 20, 21, 12, 13, 14, 15, 16], [19, 9, 10, 1, 20, 21, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -type d | xargs -I {} chmod Permission {}",
        "text": "c hang per miss to number for director i at current level and deep ..",
        "id": 968,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'type', 'd', 'word', '-', 'i', 'word', 'word', 'ch', 'mod', 'permission', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 0, 7, 7, 0, 0, 8, 8, 9, 0, 0, 10, 19, 19, 22, 23, 27, 28]]",
            "sibling_edges": "[[6, 1, 10, 2, 3, 4, 5, 19, 7, 23, 8, 9, 12, 13, 16, 20, 22, 24, 27, 30], [1, 19, 2, 3, 4, 5, 6, 7, 22, 8, 9, 27, 13, 14, 17, 21, 23, 25, 28, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 17, 18, 1, 30, 31, 20, 21, 32, 33, 24, 25, 26, 34], [11, 12, 13, 14, 15, 16, 17, 18, 1, 30, 31, 20, 21, 32, 33, 24, 25, 26, 34, 35]]"
        }
    },
    {
        "code": "find /starting/path -name target.out | xargs /path/to/simpleGrepScript.sh",
        "text": "find file file start from file and pas them as argument to file ..",
        "id": 969,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '/', 'start', '/', 'path', '-', 'name', 'target', '.', 'out', 'word', '/', 'path', '/', 'to', '/', 'simple', 'grep', 'script', '.', 'sh', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 4, 4, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 16, 16]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 16, 7, 8, 9, 11, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28], [1, 16, 2, 3, 4, 5, 8, 9, 10, 12, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 28, 29, 17, 18, 19, 20, 21, 22, 23, 24, 25], [7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 28, 29, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -i -r Regex {} \\;",
        "text": "search for a word in all file file in current director i ..",
        "id": 970,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'i', '-', 'r', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 20, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 21, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -i -I {} mv {} File {}",
        "text": "find file in current director i tree that be name regex and move them to director i regex ..",
        "id": 971,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', '-', 'i', 'word', 'word', 'mv', 'word', 'word', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 8, 8, 0, 0, 9, 0, 0, 10, 0, 0, 11, 19, 19, 26, 27, 29, 30, 32, 33]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 19, 6, 7, 8, 27, 9, 30, 10, 13, 16, 17, 20, 22, 24, 26, 29, 32, 35], [1, 19, 2, 3, 4, 5, 6, 7, 8, 26, 9, 29, 10, 32, 14, 17, 18, 21, 23, 25, 27, 30, 33, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 12, 13, 14, 15, 16, 17, 18, 1, 35, 36, 20, 21, 22, 23, 24, 25, 37, 38, 28, 39, 40, 31, 41], [12, 13, 14, 15, 16, 17, 18, 1, 35, 36, 20, 21, 22, 23, 24, 25, 37, 38, 28, 39, 40, 31, 41, 42]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "search for file and director i with case in sen it pattern file in file ..",
        "id": 972,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path $( pwd ) -name Regex -type f",
        "text": "search current director i tree for regular file who be e name end in file ..",
        "id": 973,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '$(', ')', '-', 'name', 'regex', '-', 'type', 'f', 'find', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 3, 4, 4, 5, 6, 0, 17]]",
            "sibling_edges": "[[6, 1, 9, 2, 3, 4, 8, 17, 10, 13], [1, 8, 2, 3, 4, 5, 17, 9, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 18, 9, 10, 11, 12, 13, 14], [7, 8, 18, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "pstree -p Regex | sed Program | grep Regex | sed Program",
        "text": "print all child process of a process with id number ..",
        "id": 974,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'p', 'regex', 'word', 'program', 'word', 'regex', 'word', 'program', 'ps', 'tree', 's', 'ed', 'grep', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 6, 0, 7, 0, 8, 9, 9, 13, 13, 15, 17, 17]]",
            "sibling_edges": "[[5, 1, 6, 2, 7, 3, 9, 4, 13, 15, 17, 10, 19, 21, 24], [1, 13, 2, 15, 3, 17, 4, 5, 6, 7, 8, 11, 20, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 20, 10, 11, 12, 1, 21, 22, 14, 2, 23, 16, 3, 24, 25], [20, 10, 11, 12, 1, 21, 22, 14, 2, 23, 16, 3, 24, 25, 18]]"
        }
    },
    {
        "code": "paste -d Regex File File | paste -d Regex File File | sed Program",
        "text": "print each line in regex and regex se par by a space ..",
        "id": 975,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', 'regex', 'file', 'file', 'word', '-', 'd', 'regex', 'file', 'file', 'word', 'program', 'paste', 'paste', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 6, 0, 7, 7, 8, 9, 10, 0, 11, 12, 18, 24, 24]]",
            "sibling_edges": "[[6, 1, 10, 2, 12, 3, 4, 5, 18, 7, 8, 9, 24, 13, 19, 28], [1, 18, 2, 24, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 20, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 13, 14, 15, 16, 17, 1, 27, 19, 20, 21, 22, 23, 2, 28, 29], [13, 14, 15, 16, 17, 1, 27, 19, 20, 21, 22, 23, 2, 28, 29, 25]]"
        }
    },
    {
        "code": "find . -type f | xargs stat --format=%s | awk {s+=$1} END {print s}",
        "text": "get total size in byte of all file in current director i tree ..",
        "id": 976,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', 'word', 'stat', '--', 'format', '=', '%', 's', 'word', 'word', 'word', '$', 'number', 'word', 'end', 'word', 'word', 'word', 'word', 'find', 'x', 'arg', 'a', 'wk', '{', 's', '+', '=', '<number>', '}', '{', 'print', 's', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 9, 14, 14, 21, 21, 22, 23, 23, 23, 25, 26, 28, 29, 30, 31]]",
            "sibling_edges": "[[5, 1, 7, 2, 9, 3, 4, 14, 6, 21, 24, 26, 8, 29, 11, 16, 17, 18, 19, 22, 23, 25, 28, 30, 33, 35, 38, 39], [1, 14, 2, 21, 3, 4, 5, 6, 7, 22, 25, 8, 28, 30, 12, 17, 18, 19, 20, 23, 24, 26, 29, 31, 34, 36, 39, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 10, 11, 12, 13, 1, 33, 34, 15, 16, 17, 18, 19, 20, 2, 35, 36, 37, 38, 39, 40, 24, 41, 42, 27, 43, 44, 45], [10, 11, 12, 13, 1, 33, 34, 15, 16, 17, 18, 19, 20, 2, 35, 36, 37, 38, 39, 40, 24, 41, 42, 27, 43, 44, 45, 46]]"
        }
    },
    {
        "code": "paste --delimiter=\\n --serial *.txt",
        "text": "print each file file in current director i ..",
        "id": 977,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'delimiter', '=', '--', 'serial', '*', '.', 'txt', 'paste']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 6, 8, 10, 11], [1, 2, 3, 6, 7, 9, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 5, 6, 7, 8, 9, 10, 11], [5, 6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -exec sed -i Program {} \\;",
        "text": "rep lac word app l with o ring in all file in current folder ..",
        "id": 978,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 's', 'ed', '-', 'i', 'program', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 0, 0, 6, 6, 7, 16, 17]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 17, 9, 11, 13, 16, 18], [1, 2, 3, 4, 5, 16, 6, 10, 12, 14, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18], [8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18, 19]]"
        }
    },
    {
        "code": "find Path | xargs -I {} tar -c -v -f File {}",
        "text": "c re at tar archiv file and cop i all file from director i tree file to it ..",
        "id": 979,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'word', '-', 'i', 'word', 'word', 'tar', '-', 'c', '-', 'v', '-', 'f', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 5, 5, 6, 6, 7, 7, 8, 0, 0, 9, 11, 11, 14, 15, 24, 25]]",
            "sibling_edges": "[[2, 1, 9, 11, 3, 15, 4, 5, 6, 7, 8, 12, 14, 17, 19, 21, 24, 27], [1, 11, 2, 3, 14, 4, 5, 6, 7, 8, 24, 13, 15, 18, 20, 22, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 1, 27, 28, 12, 13, 29, 30, 16, 17, 18, 19, 20, 21, 22, 23, 31], [10, 1, 27, 28, 12, 13, 29, 30, 16, 17, 18, 19, 20, 21, 22, 23, 31, 32]]"
        }
    },
    {
        "code": "find Path -depth -print | cpio -p -v -d Regex",
        "text": "cop i current director i tree to regex pre serv director i hi er arch i ..",
        "id": 980,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'depth', '-', 'print', 'word', '-', 'p', '-', 'v', '-', 'd', 'regex', 'find', 'cp', 'io']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 0, 5, 5, 6, 6, 7, 7, 8, 9, 15, 15]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 15, 5, 6, 7, 11, 13, 16, 18, 20, 24], [1, 15, 2, 3, 4, 5, 6, 7, 8, 12, 14, 17, 19, 21, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 1, 24, 25, 16, 17, 18, 19, 20, 21], [10, 11, 12, 13, 14, 1, 24, 25, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -type d -name Regex -prune",
        "text": "find all first occur r of director i name file under file director i tree ..",
        "id": 981,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', '-', 'prune', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "grep -o Regex <( comm File File )",
        "text": "print first word of line uni qu for regex file ..",
        "id": 982,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'o', 'regex', '<(', ')', 'grep', 'word', 'word', 'word', 'file', 'file', 'comm']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 1, 1, 2, 0, 0, 3, 0, 0, 0, 10, 11, 12]]",
            "sibling_edges": "[[3, 1, 2, 4, 7, 11, 12, 10], [1, 2, 7, 5, 12, 8, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 4, 5, 6, 7, 15, 13, 14], [4, 5, 6, 7, 15, 13, 14, 8]]"
        }
    },
    {
        "code": "find Path -type f -mtime Timespan -exec rm -f {} \\;",
        "text": "search file tree for regular file mod if i time span ago and r emo v them ..",
        "id": 983,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'm', 'time', 'timespan', '-', 'exec', 'rm', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 24, 25]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 25, 12, 15, 16, 19, 22, 24, 26], [1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 13, 16, 17, 20, 23, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26, 27]]"
        }
    },
    {
        "code": "find . -name *.txt | parallel ext='{/}' ; mv -- {} foo/{/.}.bar.${ext##*.}",
        "text": "find all text file in current folder and c hang ext en of t he be e file and move them to a not h folder ..",
        "id": 984,
        "graph": {
            "nodes": "['program', ';', '|', 'word', 'word', 'word', 'word', 'word', '--', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', '*', '.', 'txt', 'word', 'word', 'raw_string', 'mv', '{', '}', 'foo', '/', '{', '/', '.', '}', '.', 'bar', '.', '${', 'variable_name', '##', 'regex', '}', 'find', 'parallel', 'ext', '=', \"'\", '{', '/', '}', \"'\", 'ext', '*', '.']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 6, 6, 0, 0, 0, 7, 9, 10, 11, 11, 12, 13, 13, 14, 15, 15, 15, 0, 0, 0, 0, 0, 16, 23, 24, 24, 25, 25, 25, 25, 25, 39, 41, 41]]",
            "sibling_edges": "[[25, 1, 6, 2, 7, 3, 10, 16, 4, 5, 23, 9, 11, 12, 13, 14, 15, 18, 20, 21, 24, 29, 32, 35, 36, 38, 39, 40, 41, 45, 47, 48, 49, 50, 53], [1, 7, 2, 23, 3, 9, 11, 4, 5, 6, 24, 10, 12, 13, 14, 15, 38, 19, 21, 22, 25, 30, 33, 36, 37, 39, 40, 41, 42, 46, 48, 49, 50, 51, 54]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 17, 18, 19, 20, 21, 22, 2, 44, 45, 46, 47, 48, 49, 50, 51, 1, 26, 8, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 52, 40, 53, 54], [17, 18, 19, 20, 21, 22, 2, 44, 45, 46, 47, 48, 49, 50, 51, 1, 26, 8, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 52, 40, 53, 54, 42]]"
        }
    },
    {
        "code": "set -x",
        "text": "echo each command be for run ..",
        "id": 985,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'x', 'set']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "find Path -regextype posix-egrep -regex Regex -print0 | xargs -0 -n Quantity -I {} ls {}",
        "text": "list all file and director i under current director i match po ix e grep type regex file in name ..",
        "id": 986,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'type', 'po', 'ix', '-', 'e', 'grep', '-', 'regex', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'ls', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 10, 11, 11, 0, 0, 12, 0, 0, 13, 29, 29, 37, 38, 40, 41]]",
            "sibling_edges": "[[7, 1, 13, 2, 3, 4, 5, 6, 29, 8, 9, 10, 11, 38, 12, 15, 16, 18, 19, 20, 21, 23, 26, 27, 30, 32, 35, 37, 40, 43], [1, 29, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 37, 12, 40, 16, 17, 19, 20, 21, 22, 24, 27, 28, 31, 33, 36, 38, 41, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[42, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 43, 44, 30, 31, 32, 33, 34, 35, 36, 45, 46, 39, 47], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 43, 44, 30, 31, 32, 33, 34, 35, 36, 45, 46, 39, 47, 48]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search for file regex in folder file ..",
        "id": 987,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f Path",
        "text": "find regular file under file director i tree sa ti sf i file prov id in regex array with find command ..",
        "id": 988,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7], [1, 2, 3, 4, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rename Regex {} \\;",
        "text": "r en be recur all file in current director i tree that be call file to file ..",
        "id": 989,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rename', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 0, 0, 7, 7, 8, 17, 18]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 18, 10, 13, 17, 19], [1, 2, 3, 4, 5, 6, 17, 7, 11, 14, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19], [9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19, 20]]"
        }
    },
    {
        "code": "find Path -type d -perm Permission -print -exec chmod Permission {} \\;",
        "text": "find director i with per miss number and c hang them to number recur ..",
        "id": 990,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'perm', 'permission', '-', 'print', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 0, 0, 10, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 13, 16, 19, 21, 23, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 14, 17, 20, 22, 24, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28, 29]]"
        }
    },
    {
        "code": "echo Regex | tr Regex Regex | grep -v Regex | tr Regex Regex",
        "text": "r emo v path regex from path environ v aria bl ..",
        "id": 991,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', 'regex', 'regex', 'word', '-', 'v', 'regex', 'word', 'regex', 'regex', 'echo', 'tr', 'grep', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 6, 0, 7, 7, 8, 0, 9, 10, 11, 13, 16, 20]]",
            "sibling_edges": "[[4, 1, 6, 2, 8, 3, 11, 13, 5, 16, 7, 20, 9, 17], [1, 13, 2, 16, 3, 20, 4, 5, 6, 7, 8, 9, 10, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 12, 1, 24, 14, 15, 2, 25, 17, 18, 19, 3, 26, 21], [12, 1, 24, 14, 15, 2, 25, 17, 18, 19, 3, 26, 21, 22]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "display all file in en ti r file system which begin with regex ..",
        "id": 992,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "pwd dirname Regex",
        "text": "save current work director i and director i name of current script to v aria bl regex ..",
        "id": 993,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'dir', 'name', 'regex', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "hostname -I | cut -d Regex -f Number",
        "text": "print ip address of current host ..",
        "id": 994,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'i', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'host', 'name', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3, 3, 4, 5, 5, 6, 7, 7, 10]]",
            "sibling_edges": "[[2, 1, 7, 10, 3, 4, 5, 8, 11, 14, 17], [1, 10, 2, 3, 4, 5, 6, 9, 12, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 18, 8, 9, 1, 19, 11, 12, 13, 14, 15], [18, 8, 9, 1, 19, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "pstree -p Regex",
        "text": "print process tree of user regex process ..",
        "id": 995,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'p', 'regex', 'ps', 'tree']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "diff File File -r -X File",
        "text": "display differ between file and file excl ud file that match an i pattern in file file ..",
        "id": 996,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'file', '-', 'r', '-', 'x', 'file', 'diff']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 9, 11], [1, 2, 3, 4, 5, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex -type d | sort | uniq",
        "text": "print a sort list of uni qu director i path in en ti r file system that match pattern regex in name ..",
        "id": 997,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'd', 'word', 'word', 'find', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 16, 17, 17]]",
            "sibling_edges": "[[7, 1, 16, 2, 8, 3, 4, 5, 6, 10, 13, 20], [1, 16, 2, 17, 3, 4, 5, 6, 7, 11, 14, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 9, 10, 11, 12, 13, 14, 15, 1, 19, 2, 20], [9, 10, 11, 12, 13, 14, 15, 1, 19, 2, 20, 21]]"
        }
    },
    {
        "code": "find Path -not -path Regex -iname Regex",
        "text": "find all file file and director i under dir director i ig nor file path ..",
        "id": 998,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'not', '-', 'path', 'regex', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 11, 14, 15], [1, 2, 3, 4, 5, 6, 10, 12, 15, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "ps -o pid= --ppid $PPID | xargs kill -9",
        "text": "i mm ed i kill all child process of p be not process who be e id be specif i by v aria bl pp id ..",
        "id": 999,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', '-', 'o', 'pi', 'd', '=', '--', 'pp', 'id', '$', 'variable_name', 'word', 'kill', '-', '<number>', 'ps', 'pp', 'id', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 4, 4, 4, 0, 0, 0, 5, 6, 6, 7, 17, 17, 18, 18]]",
            "sibling_edges": "[[17, 1, 7, 2, 3, 4, 18, 5, 8, 10, 11, 13, 14, 16, 20, 23, 25], [1, 18, 2, 3, 4, 16, 5, 6, 9, 11, 12, 14, 15, 17, 21, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 1, 25, 26, 19, 20], [8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 1, 25, 26, 19, 20, 21]]"
        }
    },
    {
        "code": "chmod Permission File",
        "text": "set per miss of regex to read on li for owner ..",
        "id": 1000,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'permission', 'file', 'ch', 'mod']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "chmod +Permission File",
        "text": "add exe cut per miss to regex ..",
        "id": 1001,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '+', 'permission', 'file', 'ch', 'mod']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "ifconfig Regex | grep -o -E Regex",
        "text": "get mac address of regex network inter fa c ..",
        "id": 1002,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'o', '-', 'e', 'regex', 'if', 'config', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 5, 6, 6, 8]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 4, 9, 11, 14], [1, 8, 2, 3, 4, 5, 10, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 15, 7, 1, 16, 9, 10, 11, 12], [15, 7, 1, 16, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "$( mktemp )",
        "text": "c re at tempo rar i file and save path to it in regex v aria bl ..",
        "id": 1003,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', 'word', 'mk', 'temp']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 0, 3, 3]]",
            "sibling_edges": "[[1, 3, 4], [3, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 4, 5], [4, 5, 2]]"
        }
    },
    {
        "code": "nl -n ln File | sed Program",
        "text": "leave just if i number each non blank line in file as input to file ..",
        "id": 1004,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'ln', 'file', 'word', 'program', 'nl', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 0, 5, 6, 11, 11]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 11, 7, 14], [1, 11, 2, 3, 4, 5, 8, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 7, 8, 9, 10, 1, 14, 15], [7, 8, 9, 10, 1, 14, 15, 12]]"
        }
    },
    {
        "code": "fold -w1 file | pr -4t | tr -d \\n\\t\\-  | sed $a\\",
        "text": "print each column in regex with regex char act r emo v ..",
        "id": 1005,
        "graph": {
            "nodes": "['program', '|', '|', '|', 'ERROR', 'word', 'word', 'word', 'word', 'word', '\\\\', 'word', '-', 'w', '<number>', 'file', 'word', '-', '<number>', 't', 'word', '-', 'd', '\\\\', 't', '\\\\', '-', 'word', '$', 'variable_name', 'fold', 'pr', 'tr', 's', 'ed', 'a']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 5, 5, 6, 0, 7, 7, 7, 0, 8, 8, 9, 9, 9, 9, 0, 0, 0, 11, 16, 20, 27, 27, 29]]",
            "sibling_edges": "[[9, 6, 1, 7, 2, 3, 29, 11, 5, 16, 20, 8, 27, 12, 13, 17, 18, 21, 23, 24, 25, 28, 33], [3, 1, 16, 2, 20, 27, 4, 5, 6, 7, 8, 9, 28, 13, 14, 18, 19, 22, 24, 25, 26, 29, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 1, 31, 17, 18, 19, 2, 32, 21, 22, 23, 24, 25, 26, 3, 33, 34, 28, 35], [12, 13, 14, 15, 1, 31, 17, 18, 19, 2, 32, 21, 22, 23, 24, 25, 26, 3, 33, 34, 28, 35, 10]]"
        }
    },
    {
        "code": "find Path -type f -maxdepth Quantity -not -empty -print0 | xargs -0 -i -I {} cp File {} {}",
        "text": "t run cat all non e mp ti regular file under current director i ..",
        "id": 1006,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'max', 'depth', 'quantity', '-', 'not', '-', 'empty', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', '-', 'i', 'word', 'word', 'cp', 'file', 'word', 'word', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9, 9, 0, 10, 10, 11, 11, 12, 12, 0, 0, 13, 14, 0, 0, 0, 0, 15, 31, 31, 38, 39, 42, 43, 44, 45]]",
            "sibling_edges": "[[9, 1, 15, 2, 3, 4, 5, 6, 7, 8, 31, 10, 11, 12, 39, 13, 14, 43, 17, 20, 21, 24, 26, 28, 29, 32, 34, 36, 38, 42, 44, 47], [1, 31, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 38, 13, 14, 42, 44, 18, 21, 22, 25, 27, 29, 30, 33, 35, 37, 39, 43, 45, 48]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[46, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 47, 48, 32, 33, 34, 35, 36, 37, 49, 50, 40, 41, 51, 52, 53], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 47, 48, 32, 33, 34, 35, 36, 37, 49, 50, 40, 41, 51, 52, 53, 54]]"
        }
    },
    {
        "code": "command | tee /path/to/logfile",
        "text": "write output of regex to standard output and to file ..",
        "id": 1007,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '/', 'path', '/', 'to', '/', 'log', 'file', 'command', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[3, 1, 4, 5, 6, 7, 8, 9, 10], [1, 4, 2, 6, 7, 8, 9, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 1, 13, 5, 6, 7, 8, 9, 10], [1, 13, 5, 6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "gzip Regex",
        "text": "compress regex file use g zip ..",
        "id": 1008,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'g', 'zip']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "find Path -path Regex -prune -or -path Regex -prune -or -path Regex -prune -or -path Regex -prune -or -print | grep -E Regex | grep -v Regex | xargs -I {} cat {} | sed Program | wc -l",
        "text": "recur count non blank line in all file in a current folder that match regex file but skip folder file file file file and file like file ..",
        "id": 1009,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'print', 'word', '-', 'e', 'regex', 'word', '-', 'v', 'regex', 'word', '-', 'i', 'word', 'word', 'cat', 'word', 'word', 'word', 'program', 'word', '-', 'l', 'find', 'grep', 'grep', 'x', 'arg', '{', '}', '{', '}', 's', 'ed', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 19, 19, 20, 21, 21, 22, 22, 23, 23, 0, 24, 24, 25, 0, 26, 26, 27, 0, 28, 28, 0, 0, 29, 0, 0, 0, 30, 0, 31, 31, 32, 64, 68, 72, 72, 75, 76, 78, 79, 80, 80, 82]]",
            "sibling_edges": "[[23, 1, 25, 2, 27, 3, 79, 4, 30, 5, 32, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 64, 24, 68, 26, 72, 28, 76, 29, 80, 82, 34, 37, 39, 41, 44, 46, 48, 51, 53, 55, 58, 60, 62, 65, 69, 73, 75, 78, 83, 88, 94], [1, 64, 2, 68, 3, 72, 4, 80, 5, 82, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 75, 29, 78, 30, 31, 35, 38, 40, 42, 45, 47, 49, 52, 54, 56, 59, 61, 63, 66, 70, 74, 76, 79, 84, 89, 95]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[85, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 1, 86, 65, 66, 67, 2, 87, 69, 70, 71, 3, 88, 89, 73, 74, 90, 91, 77, 92, 93, 4, 94, 95, 81, 5, 96, 83], [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 1, 86, 65, 66, 67, 2, 87, 69, 70, 71, 3, 88, 89, 73, 74, 90, 91, 77, 92, 93, 4, 94, 95, 81, 5, 96, 83, 84]]"
        }
    },
    {
        "code": "find Path -type f",
        "text": "find all file under i mag director i ..",
        "id": 1010,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find -printf %P\\0 -exec uuid -v 4 ; | sort | awk -F\\0 { print $2 ' ' $1}",
        "text": "genus t u uid for file from current director i tree ..",
        "id": 1011,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'number', '|', '|', 'word', '-', 'print', 'f', '%', 'p', '\\\\', '<number>', '-', 'exec', 'u', 'uid', '-', 'v', '<number>', 'word', 'word', 'word', 'raw_string', 'find', 'word', 'word', '-', 'f', '\\\\', '<number>', '{', 'print', '$', 'variable_name', \"'\", \"'\", 'word', 'sort', 'a', 'wk', '<number>', '$', 'variable_name', '}', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 0, 0, 0, 0, 10, 0, 0, 25, 25, 25, 25, 26, 27, 0, 0, 28, 28, 0, 30, 31, 31, 39, 0, 0, 42, 48]]",
            "sibling_edges": "[[7, 1, 8, 10, 2, 3, 4, 5, 6, 30, 9, 11, 12, 14, 15, 16, 18, 20, 22, 31, 25, 26, 27, 39, 28, 32, 33, 34, 38, 40, 48, 44, 47], [1, 8, 30, 2, 3, 4, 5, 6, 7, 9, 31, 12, 13, 15, 16, 17, 19, 21, 23, 25, 26, 27, 38, 28, 47, 33, 34, 35, 39, 41, 42, 45, 48]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 8, 43, 9, 44, 45, 32, 33, 34, 35, 36, 37, 38, 46, 40, 41, 47, 50], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 8, 43, 9, 44, 45, 32, 33, 34, 35, 36, 37, 38, 46, 40, 41, 47, 50, 49]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -exec chmod Permission {} \\;",
        "text": "c hang per miss of all script file in a director i ..",
        "id": 1012,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 20, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 21, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "sort File | uniq -c",
        "text": "sort content of file file e li min dup li c en tr i and prefix each en tr i with number of occur r ..",
        "id": 1013,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'file', 'word', '-', 'c', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 2, 0, 3, 3, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 7, 10], [1, 6, 2, 3, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 1, 10, 11, 7], [5, 1, 10, 11, 7, 8]]"
        }
    },
    {
        "code": "find Path Path -f -mtime -Timespan",
        "text": "search current director i recur for regular file last mod if i le than time span ago ..",
        "id": 1014,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'f', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 9, 11, 12, 14], [1, 2, 3, 4, 5, 10, 12, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find . -type f -name *cache.html -exec sh -c gzip < {} > {}.gz ;",
        "text": "compress ever i file in current director i tree that match file and keep origin file ..",
        "id": 1015,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '<', '>', 'word', '.', '-', 'type', 'f', '-', 'name', '*', 'cache', '.', 'html', '-', 'exec', 'sh', '-', 'c', 'g', 'zip', 'word', 'word', 'word', 'word', 'word', 'find', '{', '}', '{', '}', '.', 'gz']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 9, 9, 10, 10, 0, 0, 0, 0, 0, 13, 31, 32, 33, 34, 35, 35]]",
            "sibling_edges": "[[35, 10, 32, 13, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 18, 20, 21, 22, 24, 27, 29, 31, 33, 34, 41], [1, 11, 12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 31, 33, 16, 19, 21, 22, 23, 25, 28, 30, 32, 34, 35, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 11, 37, 38, 12, 39, 40, 41, 42], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 11, 37, 38, 12, 39, 40, 41, 42, 1]]"
        }
    },
    {
        "code": "awk Program Program | column -t",
        "text": "append regex and regex column in file regex with val u depend on current tab l content ..",
        "id": 1016,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'program', 'program', 'word', '-', 't', 'a', 'wk', 'column']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 5, 8]]",
            "sibling_edges": "[[3, 1, 5, 2, 8, 9, 11], [1, 8, 2, 3, 4, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 6, 7, 1, 13, 9], [12, 6, 7, 1, 13, 9, 10]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -maxdepth Quantity -type d -printf '%P\\n'",
        "text": "list name of director i in current director i without go into sub director i ..",
        "id": 1017,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'max', 'depth', 'quantity', '-', 'type', 'd', '-', 'print', 'f', \"'\", '%', 'p', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 10]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 16, 17, 20, 23, 24, 26, 27, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 17, 18, 21, 24, 25, 27, 28, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]"
        }
    },
    {
        "code": "find Path -size +Size -mtime +Timespan -exec ls -l {} \\;",
        "text": "display a long list of all file in file system which be big than size and which not be mod if i in time span ..",
        "id": 1018,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'm', 'time', '+', 'timespan', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 26, 27]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 27, 12, 14, 16, 17, 19, 21, 24, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 26, 9, 13, 15, 17, 18, 20, 22, 25, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28, 29]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan | xargs -0 -I {} cp File {}",
        "text": "find all file in file folder that be mod if i within time span and cop i them to directory ..",
        "id": 1019,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'cp', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 0, 5, 5, 6, 6, 0, 0, 7, 8, 0, 0, 9, 16, 16, 21, 22, 25, 26]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 16, 5, 6, 22, 7, 8, 11, 12, 14, 17, 19, 21, 25, 28], [1, 16, 2, 3, 4, 5, 6, 21, 7, 8, 25, 12, 13, 15, 18, 20, 22, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 15, 1, 28, 29, 17, 18, 19, 20, 30, 31, 23, 24, 32], [10, 11, 12, 13, 14, 15, 1, 28, 29, 17, 18, 19, 20, 30, 31, 23, 24, 32, 33]]"
        }
    },
    {
        "code": "chown -R Regex File",
        "text": "recur c hang owner and group to regex of regex ..",
        "id": 1020,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -exec echo Regex Regex {} \\;",
        "text": "display c hang owner command for all regular file in current folder ..",
        "id": 1021,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'echo', 'regex', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 7, 0, 0, 8, 8, 9, 19, 20]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 20, 11, 14, 19, 21], [1, 2, 3, 4, 5, 6, 7, 19, 8, 12, 15, 20, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 21], [10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 21, 22]]"
        }
    },
    {
        "code": "ls -a -l File",
        "text": "print long list of file file ..",
        "id": 1022,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'a', '-', 'l', 'file', 'ls']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7], [1, 2, 3, 6, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -uid Regex",
        "text": "find all file in file director i tree with permission ..",
        "id": 1023,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'uid', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -print0 | xargs -0 -I {} rm {}",
        "text": "non recur find all file file in a current folder and r emo v them ..",
        "id": 1024,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 0, 0, 11, 23, 23, 28, 29, 31, 32]]",
            "sibling_edges": "[[7, 1, 11, 2, 3, 4, 5, 6, 23, 8, 9, 29, 10, 13, 14, 17, 20, 21, 24, 26, 28, 31, 34], [1, 23, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 31, 14, 15, 18, 21, 22, 25, 27, 29, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 34, 35, 24, 25, 26, 27, 36, 37, 30, 38], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 34, 35, 24, 25, 26, 27, 36, 37, 30, 38, 39]]"
        }
    },
    {
        "code": "find Path -name Regex -type f",
        "text": "find regular file name file under root directory director i ..",
        "id": 1025,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find $(pwd -P) -type d ( -path /path/to/dir1 -or -path /path/to/dir2 ) -prune -or -not ( -path /path/to/file1 -or -path /path/to/file2 ) -print0 | gnutar --null --no-recursion -czf archive.tar.gz --files-from -",
        "text": "archiv present work director i excl ud sever file and director i ..",
        "id": 1026,
        "graph": {
            "nodes": "['program', ';', ';', 'word', 'word', '-', 'word', 'word', '|', 'word', '$(', ')', '-', 'type', 'd', '(', ')', 'word', '-', 'or', '-', 'not', '(', ')', '-', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'find', 'word', 'word', 'word', 'word', 'word', 'prune', 'word', 'word', 'word', 'word', 'print', '<number>', 'word', '--', 'null', '--', 'no', '-', 'recursion', '-', 'czf', 'archive', '.', 'tar', '.', 'gz', '--', 'file', '-', 'from', '-', 'word', '-', 'p', 'word', '/', 'path', '/', 'to', '/', 'dir', '<number>', '-', 'or', '-', 'path', '/', 'path', '/', 'to', '/', 'dir', '<number>', 'word', '/', 'path', '/', 'to', '/', 'file', '<number>', '-', 'or', '-', 'path', '/', 'path', '/', 'to', '/', 'file', '<number>', 'gnu', 'tar', 'pwd', '-', 'path', '-', 'path']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 0, 0, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 25, 25, 0, 26, 26, 27, 27, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 31, 0, 33, 33, 0, 34, 34, 34, 34, 34, 34, 34, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 37, 0, 39, 39, 39, 39, 39, 39, 39, 40, 40, 41, 41, 42, 42, 42, 42, 42, 42, 42, 45, 45, 64, 67, 67, 86, 86]]",
            "sibling_edges": "[[4, 1, 5, 7, 2, 9, 11, 3, 16, 17, 6, 23, 25, 8, 10, 33, 12, 15, 37, 18, 20, 22, 42, 24, 45, 26, 27, 28, 29, 30, 64, 67, 34, 35, 36, 86, 39, 40, 41, 43, 46, 48, 49, 50, 52, 54, 55, 56, 57, 59, 60, 61, 65, 68, 69, 70, 71, 72, 73, 75, 77, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 94, 96, 98, 99, 100, 101, 102, 103, 105, 108, 110], [1, 15, 17, 2, 22, 10, 3, 4, 5, 6, 7, 24, 8, 45, 64, 11, 13, 67, 16, 19, 21, 86, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 47, 49, 50, 51, 53, 55, 56, 57, 58, 60, 61, 62, 66, 69, 70, 71, 72, 73, 74, 76, 78, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 106, 109, 111]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 10, 107, 65, 66, 11, 12, 13, 14, 1, 15, 108, 109, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 16, 5, 38, 18, 19, 20, 21, 2, 22, 110, 111, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 23, 24, 43, 44, 8, 105, 106, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], [10, 107, 65, 66, 11, 12, 13, 14, 1, 15, 108, 109, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 16, 5, 38, 18, 19, 20, 21, 2, 22, 110, 111, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 23, 24, 43, 44, 8, 105, 106, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]]"
        }
    },
    {
        "code": "shopt -s execfail",
        "text": "en a bl shell option regex ..",
        "id": 1027,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 's', 'exec', 'fail', 'shop', 't']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 1, 1, 2, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 6, 8], [1, 2, 5, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 9, 4, 5, 6], [9, 4, 5, 6, 7]]"
        }
    },
    {
        "code": "rename Regex Regex",
        "text": "r en be all file file c hang string file into file ..",
        "id": 1028,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'regex', 'rename']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "tmux set-option -g renumber-windows on",
        "text": "when a window be close in a session auto mat number other window in num er order ..",
        "id": 1029,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'set', '-', 'option', '-', 'g', 'renumber', '-', 'window', 'on', 't', 'mu', 'x']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 7, 9, 11, 12, 15, 16], [1, 2, 3, 4, 7, 8, 10, 12, 13, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13], [16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find . -maxdepth 1 -type d -print0 | xargs -0 -I {} sh -c echo $(find {} | wc -l) \\\\t {} | sort -rn | less",
        "text": "count all file in a current folder and in sub fold one level low sort result and pipe to le pager ..",
        "id": 1030,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'number', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'max', 'depth', '<number>', '-', 'type', 'd', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'sh', '-', 'c', 'echo', '$(', ')', '\\\\\\\\', 't', 'word', 'word', 'word', '-', 'rn', 'word', 'find', 'x', 'arg', '{', '}', '|', '{', '}', 'sort', 'le', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'find', '{', '}', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 5, 6, 7, 7, 8, 9, 9, 9, 0, 10, 10, 11, 11, 0, 0, 12, 13, 13, 14, 0, 0, 15, 15, 0, 0, 0, 16, 16, 0, 17, 29, 29, 34, 35, 0, 44, 45, 46, 49, 0, 0, 0, 0, 0, 60, 60, 61, 62, 63, 64]]",
            "sibling_edges": "[[9, 1, 45, 2, 16, 3, 17, 4, 5, 6, 7, 8, 29, 10, 11, 35, 12, 13, 14, 41, 15, 46, 19, 20, 23, 26, 27, 30, 32, 34, 37, 40, 60, 42, 44, 47, 51, 63, 55, 61, 64, 62, 65], [1, 29, 2, 46, 3, 49, 4, 5, 6, 7, 8, 9, 10, 11, 34, 12, 13, 14, 40, 15, 44, 16, 20, 21, 24, 27, 28, 31, 33, 35, 38, 61, 41, 43, 45, 48, 52, 55, 64, 62, 60, 63, 66]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[50, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 51, 52, 30, 31, 32, 33, 53, 54, 36, 37, 38, 39, 40, 67, 68, 69, 55, 70, 65, 66, 41, 42, 43, 56, 57, 2, 58, 47, 48, 3], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 51, 52, 30, 31, 32, 33, 53, 54, 36, 37, 38, 39, 40, 67, 68, 69, 55, 70, 65, 66, 41, 42, 43, 56, 57, 2, 58, 47, 48, 3, 59]]"
        }
    },
    {
        "code": "find Path -name Regex ! -wholename Regex -print",
        "text": "search current director i tree for file file ig nor file sub director i ..",
        "id": 1031,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '!', '-', 'whole', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 14, 15, 18], [1, 2, 3, 4, 5, 6, 7, 11, 15, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\;",
        "text": "add exe cut and read per miss for all and write per miss for user to regex director i and all of it sub director i ..",
        "id": 1032,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find | xargs ipython nbconvert",
        "text": "run i python convert with all file or director i path under current director i as argument ..",
        "id": 1033,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'i', 'python', 'nb', 'convert', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 5]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 8, 11], [1, 5, 2, 3, 7, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 1, 11, 12, 6, 7, 8], [1, 11, 12, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "source $( dirname Regex )",
        "text": "sour c script file in folder where current script be loc at ..",
        "id": 1034,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'source', 'word', 'word', 'regex', 'dir', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 1, 0, 0, 5, 6, 6]]",
            "sibling_edges": "[[1, 2, 5, 6, 8], [2, 6, 3, 5, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 8, 9, 7], [2, 8, 9, 7, 3]]"
        }
    },
    {
        "code": "find Path -type f \\( -name Regex -or -name Regex -or -name Regex \\) -exec ls {} \\;",
        "text": "list all file file and file file under current director i ..",
        "id": 1035,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'exec', 'ls', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 0, 0, 16, 16, 17, 42, 43]]",
            "sibling_edges": "[[17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 43, 19, 22, 24, 27, 29, 32, 34, 37, 39, 42, 44], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 42, 16, 20, 23, 25, 28, 30, 33, 35, 38, 40, 43, 45]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[46, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 44], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 44, 45]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i expand by regex v aria bl ..",
        "id": 1036,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "find Path -name Regex -exec ls -l -d {} \\;",
        "text": "give a long list of all file file beneath current director i ..",
        "id": 1037,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'ls', '-', 'l', '-', 'd', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 0, 0, 8, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 14, 17, 19, 21, 23], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 15, 18, 20, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23, 24]]"
        }
    },
    {
        "code": "touch filename_`/bin/date +%Y%m%d%H%M%S`.txt",
        "text": "c re at e mp ti file name with full timestamp ..",
        "id": 1038,
        "graph": {
            "nodes": "['command', 'word', 'word', 'filename', 'word', 'touch', '`', '`', '.', 'txt', 'word', 'word', '+', '%', 'y', '%', 'm', '%', 'd', '%', 'h', '%', 'm', '%', 's', '/', 'bin', '/', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 1, 0, 2, 0, 0, 4, 4, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11]]",
            "sibling_edges": "[[2, 1, 7, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27], [1, 6, 4, 11, 7, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3, 6, 25, 26, 27, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 7, 8], [3, 6, 25, 26, 27, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -type d -perm Permission -print -exec chmod Permission {} \\;",
        "text": "find all director i in root director i with number per miss and c hang regex with ch mod comma d ..",
        "id": 1039,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'perm', 'permission', '-', 'print', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 0, 0, 10, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 13, 16, 19, 21, 23, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 14, 17, 20, 22, 24, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28, 29]]"
        }
    },
    {
        "code": "find Path -name Regex -exec chmod Permission {} \\;",
        "text": "set read bite for regex on all file file in current director i tree ..",
        "id": 1040,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -mmin Quantity",
        "text": "list all file in current director i tree that be mod if i time span ago ..",
        "id": 1041,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'mm', 'in', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -print0 | xargs -0 -I {} grep -i Regex {}",
        "text": "search for case in sen it regex expand by regex in all file name regex under current director i ..",
        "id": 1042,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', '-', 'i', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 11, 11, 12, 0, 0, 13, 24, 24, 29, 30, 35, 36]]",
            "sibling_edges": "[[7, 1, 13, 2, 3, 4, 5, 6, 24, 8, 9, 30, 10, 11, 12, 15, 18, 21, 22, 25, 27, 29, 32, 35, 38], [1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 29, 10, 11, 12, 35, 16, 19, 22, 23, 26, 28, 30, 33, 36, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 38, 39, 25, 26, 27, 28, 40, 41, 31, 32, 33, 34, 42], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 38, 39, 25, 26, 27, 28, 40, 41, 31, 32, 33, 34, 42, 43]]"
        }
    },
    {
        "code": "find Path -name Regex -mtime Timespan -type f",
        "text": "display all text file in folder file which be mod if i in date time ..",
        "id": 1043,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'm', 'time', 'timespan', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 13, 14, 17], [1, 2, 3, 4, 5, 6, 7, 11, 14, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -not -iwholename Regex",
        "text": "search current director i tree for all file except svn one ..",
        "id": 1044,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'not', '-', 'i', 'whole', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9, 10, 11], [1, 2, 3, 4, 8, 10, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find /mnt/zip -name *prefs copy -print0 | xargs> -p rm",
        "text": "find regex file under file and de let them with confirm prompt ..",
        "id": 1045,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'p', 'rm', 'word', '/', 'mnt', '/', 'zip', '-', 'name', '*', 'pref', 'copy', '-', 'print', '<number>', 'word', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 5, 5, 5, 5, 6, 6, 7, 7, 8, 9, 9, 9, 0, 13, 26, 26]]",
            "sibling_edges": "[[26, 9, 1, 2, 3, 13, 5, 6, 7, 8, 10, 14, 15, 16, 18, 20, 23, 24, 28], [2, 1, 26, 3, 4, 5, 6, 7, 8, 9, 11, 15, 16, 17, 19, 21, 24, 25, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 28, 29, 2, 10, 11], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 28, 29, 2, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -size -Size | xargs -I {} echo Regex Regex {}",
        "text": "display command to f orc de let all file file in current director i which be le than size and not search in sub director i ..",
        "id": 1046,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'size', '-', 'size', 'word', '-', 'i', 'word', 'word', 'echo', 'regex', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 0, 9, 9, 0, 0, 10, 11, 12, 0, 0, 13, 26, 26, 29, 30, 34, 35]]",
            "sibling_edges": "[[8, 1, 13, 2, 3, 4, 5, 6, 7, 26, 9, 30, 10, 11, 12, 15, 16, 19, 22, 24, 27, 29, 34, 37], [1, 26, 2, 3, 4, 5, 6, 7, 8, 9, 29, 10, 11, 12, 34, 16, 17, 20, 23, 25, 28, 30, 35, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 37, 38, 27, 28, 39, 40, 31, 32, 33, 41], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 37, 38, 27, 28, 39, 40, 31, 32, 33, 41, 42]]"
        }
    },
    {
        "code": "find Path -name Regex -execdir vim {} \\;",
        "text": "search for file file in current folder and open it in vi editor ..",
        "id": 1047,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'dir', 'vim', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 0, 0, 6, 6, 7, 16, 17]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 17, 9, 12, 13, 16, 18], [1, 2, 3, 4, 5, 16, 6, 10, 13, 14, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18], [8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18, 19]]"
        }
    },
    {
        "code": "find Path -type d -printf '%T+ %p\\n' | sort",
        "text": "sort all director i under current director i place file with least mod if time at first ..",
        "id": 1048,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'type', 'd', '-', 'print', 'f', \"'\", '%', 't', '+', '%', 'p', \"'\", 'word', 'find', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 0, 7, 22]]",
            "sibling_edges": "[[6, 1, 7, 2, 3, 4, 5, 9, 12, 13, 15, 16, 17, 18, 19, 20], [1, 22, 2, 3, 4, 5, 6, 10, 13, 14, 16, 17, 18, 19, 20, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 24]]"
        }
    },
    {
        "code": "cat File | ssh Regex command",
        "text": "cop i local file regex to host regex into host director i regex ..",
        "id": 1049,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'file', 'word', 'regex', 'command', 'cat', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 2, 0, 3, 4, 5, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3], [1, 7, 2, 3, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 6, 1, 11, 8], [6, 1, 11, 8, 9]]"
        }
    },
    {
        "code": "find Path -type f -name Regex | xargs --replace Regex -I {} sed --in-place Regex Program {}",
        "text": "rep lac first occur r of regex with regex on ever i line in file file from current director i tree ..",
        "id": 1050,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'word', '--', 'replace', 'regex', '-', 'i', 'word', 'word', 's', 'ed', '--', 'in', '-', 'place', 'regex', 'program', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 0, 7, 7, 8, 9, 9, 0, 0, 10, 10, 11, 11, 11, 11, 12, 13, 0, 0, 14, 22, 22, 28, 29, 38, 39]]",
            "sibling_edges": "[[6, 1, 14, 2, 3, 4, 5, 22, 7, 8, 9, 29, 10, 11, 12, 13, 16, 19, 23, 26, 28, 30, 32, 33, 34, 38, 41], [1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 11, 12, 13, 38, 17, 20, 24, 27, 29, 31, 33, 34, 35, 39, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[40, 15, 16, 17, 18, 19, 20, 21, 1, 41, 42, 23, 24, 25, 26, 27, 43, 44, 30, 31, 32, 33, 34, 35, 36, 37, 45], [15, 16, 17, 18, 19, 20, 21, 1, 41, 42, 23, 24, 25, 26, 27, 43, 44, 30, 31, 32, 33, 34, 35, 36, 37, 45, 46]]"
        }
    },
    {
        "code": "grep Regex File | tr Regex Regex",
        "text": "search for regex in file regex and print match line by se par them with space instead of new l in ..",
        "id": 1051,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'regex', 'file', 'word', 'regex', 'regex', 'grep', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 0, 2, 3, 0, 4, 5, 6, 9]]",
            "sibling_edges": "[[3, 1, 6, 2, 9, 4], [1, 9, 2, 3, 4, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 7, 8, 1, 13, 10], [7, 8, 1, 13, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all regex file under current director i ..",
        "id": 1052,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "ifconfig | grep Regex",
        "text": "print string with mac address config ur of each network inter fa c in system ..",
        "id": 1053,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'if', 'config', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 2, 3, 3, 4]]",
            "sibling_edges": "[[3, 1, 4, 6], [1, 4, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 1, 8], [7, 1, 8, 5]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i file ..",
        "id": 1054,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "dig Regex Regex a",
        "text": "print a record for domain regex from file name serv ..",
        "id": 1055,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'regex', 'regex', 'a', 'dig']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2], [1, 2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 6], [5, 6, 7]]"
        }
    },
    {
        "code": "find ./ -type f -name *.c* -print0 | xargs -0 rm -rf &>> log_del.txt",
        "text": "find all regular file in current folder which specif word in name and f orc de let all t he be e file and save file to file file ..",
        "id": 1056,
        "graph": {
            "nodes": "['redirected_statement', '|', '&>>', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'log', 'del', '.', 'txt', 'word', '.', '/', '-', 'type', 'f', '-', 'name', '*', '.', 'c', '*', '-', 'print', '<number>', 'word', '-', '<number>', 'rm', '-', 'rf', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 4, 4, 5, 5, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 0, 10, 10, 11, 12, 12, 17, 32, 32]]",
            "sibling_edges": "[[12, 9, 1, 2, 17, 4, 5, 6, 7, 8, 32, 10, 11, 13, 14, 15, 18, 20, 23, 25, 26, 27, 29, 30, 33, 36, 39], [2, 1, 32, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 24, 26, 27, 28, 30, 31, 34, 37, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 39, 40, 33, 34, 35, 36, 37, 2, 13, 14, 15], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 39, 40, 33, 34, 35, 36, 37, 2, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "cd $( find Path -name Regex | xargs -I {} dirname {} )",
        "text": "find all file file and director i under current director i and enter into p be not director i of first one find ..",
        "id": 1057,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'cd', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'dir', 'name', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 8, 0, 9, 9, 0, 0, 10, 10, 0, 0, 11, 16, 16, 19, 20, 23, 24]]",
            "sibling_edges": "[[1, 2, 24, 8, 5, 11, 6, 7, 16, 9, 20, 10, 13, 17, 19, 21, 23, 26], [2, 11, 3, 5, 16, 6, 7, 8, 9, 19, 10, 23, 14, 18, 20, 22, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 25, 12, 13, 14, 15, 5, 26, 27, 17, 18, 28, 29, 21, 22, 30, 31], [2, 25, 12, 13, 14, 15, 5, 26, 27, 17, 18, 28, 29, 21, 22, 30, 31, 3]]"
        }
    },
    {
        "code": "find Path -amin -Quantity",
        "text": "find all file in file system which be access in time span ..",
        "id": 1058,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'be', 'in', '-', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -s",
        "text": "find all file and director i under current director i bypass file hi er arch i in le xi co graph order ..",
        "id": 1059,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'path', '-', 's', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 2, 3]]",
            "sibling_edges": "[[3, 1, 5], [1, 2, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find . -print0 | xargs -0 stat -f %i ",
        "text": "find all file and director i under current director i and display i nod of each one use stat command on file ..",
        "id": 1060,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'number', 'word', 'word', 'word', 'word', '.', '-', 'print', '<number>', 'word', '-', '<number>', 'stat', '-', 'f', '%', 'i', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 0, 4, 4, 5, 6, 6, 7, 7, 8, 13, 13]]",
            "sibling_edges": "[[3, 1, 8, 2, 13, 4, 5, 6, 10, 11, 14, 17, 19, 22], [1, 13, 2, 3, 4, 5, 6, 7, 11, 12, 15, 18, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 1, 22, 23, 14, 15, 16, 17, 18, 19], [9, 10, 11, 12, 1, 22, 23, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "echo Regex | rev | cut -d Regex -f Number | rev",
        "text": "display last dot se par field in case file ..",
        "id": 1061,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'echo', 'rev', 'cut', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 5, 6, 7, 7, 8, 0, 9, 11, 12, 19]]",
            "sibling_edges": "[[4, 1, 11, 2, 8, 3, 9, 12, 5, 6, 7, 13, 16], [1, 11, 2, 12, 3, 19, 4, 5, 6, 7, 8, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 10, 1, 21, 2, 22, 13, 14, 15, 16, 17, 18, 3], [10, 1, 21, 2, 22, 13, 14, 15, 16, 17, 18, 3, 23]]"
        }
    },
    {
        "code": "more File",
        "text": "display content of file wait for user input at each page ..",
        "id": 1062,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'more']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "bind Regex",
        "text": "bind word regex to key code regex ..",
        "id": 1063,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'bind']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -name Regex -exec ls {} \\;",
        "text": "list all file file and director i under current director i ..",
        "id": 1064,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'ls', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    }
]