[
    {
        "code": "cal -h",
        "text": "print current month calendar without highlight of a current date ..",
        "id": 1,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'h', 'cal']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -i -I {} cat {} {} | grep Regex",
        "text": "search for regex in all file under file director i en ur white space safe ti in file n be ..",
        "id": 2,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', '-', 'i', 'word', 'word', 'cat', 'word', 'word', 'word', 'word', 'word', 'regex', 'find', 'x', 'arg', '{', '}', '{', '}', '{', '}', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 0, 7, 7, 8, 8, 9, 9, 0, 0, 10, 0, 0, 0, 0, 0, 11, 12, 20, 20, 27, 28, 30, 31, 32, 33, 34]]",
            "sibling_edges": "[[6, 1, 33, 2, 12, 3, 4, 5, 20, 7, 8, 9, 28, 10, 31, 34, 14, 17, 18, 21, 23, 25, 27, 30, 32, 37], [1, 20, 2, 34, 3, 4, 5, 6, 7, 8, 9, 27, 10, 30, 32, 11, 15, 18, 19, 22, 24, 26, 28, 31, 33, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 13, 14, 15, 16, 17, 18, 19, 1, 37, 38, 21, 22, 23, 24, 25, 26, 39, 40, 29, 41, 42, 43, 44, 2, 45], [13, 14, 15, 16, 17, 18, 19, 1, 37, 38, 21, 22, 23, 24, 25, 26, 39, 40, 29, 41, 42, 43, 44, 2, 45, 35]]"
        }
    },
    {
        "code": "input_prog 2>&1 | tee /dev/tty | my_editor",
        "text": "write output of regex to standard output and error on con sol and as input to command regex ..",
        "id": 3,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'file_descriptor', '>&', 'number', 'word', '/', 'dev', '/', 'tt', 'y', 'word', 'word', '<number>', '<number>', 'tee', 'my_editor', 'input_prog']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 4, 6, 7, 13, 14]]",
            "sibling_edges": "[[6, 1, 3, 2, 14, 7, 4, 5, 8, 9, 10, 11], [1, 7, 2, 13, 4, 3, 5, 6, 9, 10, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 15, 5, 16, 1, 17, 8, 9, 10, 11, 12, 2], [15, 5, 16, 1, 17, 8, 9, 10, 11, 12, 2, 18]]"
        }
    },
    {
        "code": "grep -v Regex File | cut -d Regex -f Number | nl -w Quantity -s Regex",
        "text": "de let line number in number file regex and number ..",
        "id": 4,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'v', 'regex', 'file', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', '-', 'w', 'quantity', '-', 's', 'regex', 'grep', 'cut', 'nl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 0, 6, 6, 7, 8, 8, 9, 0, 10, 10, 11, 12, 12, 13, 14, 19, 26]]",
            "sibling_edges": "[[5, 1, 9, 2, 14, 3, 4, 19, 6, 7, 8, 26, 10, 11, 12, 15, 20, 23, 27, 30], [1, 19, 2, 26, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 21, 24, 28, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 15, 16, 17, 18, 1, 34, 20, 21, 22, 23, 24, 25, 2, 35, 27, 28, 29, 30, 31], [15, 16, 17, 18, 1, 34, 20, 21, 22, 23, 24, 25, 2, 35, 27, 28, 29, 30, 31, 32]]"
        }
    },
    {
        "code": "find Path ! -perm -Permission",
        "text": "find file and director i that not write per miss for group or other ..",
        "id": 5,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '!', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 8, 10], [1, 2, 3, 4, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "diff <( echo Regex ) <( echo Regex )",
        "text": "com par text regex and regex line by line ..",
        "id": 6,
        "graph": {
            "nodes": "['command', 'word', '<(', ')', '<(', ')', 'diff', 'word', 'word', 'word', 'regex', 'word', 'regex', 'echo', 'echo']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 8, 9, 11]]",
            "sibling_edges": "[[1, 3, 2, 7, 4, 8, 9, 11], [2, 4, 9, 3, 11, 5, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 2, 13, 10, 3, 4, 14, 12], [2, 13, 10, 3, 4, 14, 12, 5]]"
        }
    },
    {
        "code": "tree -d -L Number -i --noreport",
        "text": "print director i in current director i as a list with no report inform ..",
        "id": 7,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', '-', 'l', 'number', '-', 'i', '--', 'noreport', 'tree']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 9, 12, 14], [1, 2, 3, 4, 5, 8, 10, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -type d",
        "text": "find all director i name regex in en ti r file system ..",
        "id": 8,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -exec echo Regex {} \\;",
        "text": "find all file in director i tree regex ..",
        "id": 9,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'echo', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 0, 0, 5, 5, 6, 12, 13]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 13, 8, 12, 14], [1, 2, 3, 4, 12, 5, 9, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 17, 18, 14], [7, 8, 9, 10, 11, 17, 18, 14, 15]]"
        }
    },
    {
        "code": "head --lines -Quantity File",
        "text": "r emo v last n line from file ..",
        "id": 10,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'line', '-', 'quantity', 'file', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7], [1, 2, 3, 6, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex -size Size -delete",
        "text": "find file in current director i tree who be e name begin with regex and who be e size be number and r emo v them ..",
        "id": 11,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'size', 'size', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "echo $( ls $( pwd ) )",
        "text": "list director i content of current work director i ..",
        "id": 12,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'echo', 'word', '$(', ')', 'ls', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 0, 0, 0, 5, 0, 9]]",
            "sibling_edges": "[[1, 2, 7, 5, 6, 9], [2, 5, 3, 6, 9, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 8, 6, 10, 7], [2, 8, 6, 10, 7, 3]]"
        }
    },
    {
        "code": "ls -d File",
        "text": "list all sub director i in current director i with a trail slash ..",
        "id": 13,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'd', 'file', 'ls']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "find all number per miss file and director i under current director i tree ..",
        "id": 14,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "octave -q --eval printf (\"%f\\n\", [0:0.1:pi/2])|nl|tee x.txt",
        "text": "cal cu l val u of interv from number to file with a step of number add a line number and write output to standard output and file ..",
        "id": 15,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', '|', '|', 'word', '-', 'q', '--', 'eval', 'print', 'f', '(', ')', 'word', 'octave', 'word', 'word', 'x', '.', 'txt', 'word', 'word', 'word', 'nl', 'tee', 'raw_string', 'word', '[', '<number>', ':', '<number>', '.', '<number>', ':', 'pi', '/', '<number>', ']', \"'\", '%', 'f', \"'\", ',']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 4, 0, 0, 0, 7, 0, 0, 16, 16, 16, 0, 0, 0, 18, 19, 0, 0, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 28, 28, 28, 28, 29]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 15, 5, 18, 6, 8, 10, 12, 14, 25, 19, 29, 20, 21, 23, 24, 28, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43], [1, 14, 2, 3, 4, 5, 18, 6, 19, 9, 11, 13, 28, 15, 16, 23, 21, 22, 24, 25, 29, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 1, 14, 41, 42, 43, 44, 45, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 15, 5, 26, 6, 27, 20, 21], [8, 9, 10, 11, 12, 13, 1, 14, 41, 42, 43, 44, 45, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 15, 5, 26, 6, 27, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -n Quantity -I {} gzip -d {}",
        "text": "find and uncompress all file in current director i tree end in file ..",
        "id": 16,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'g', 'zip', '-', 'd', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 8, 9, 9, 0, 0, 10, 10, 11, 11, 0, 0, 12, 20, 20, 28, 29, 34, 35]]",
            "sibling_edges": "[[5, 1, 12, 2, 3, 4, 20, 6, 7, 8, 9, 29, 10, 11, 14, 17, 18, 21, 23, 26, 28, 30, 32, 34, 37], [1, 20, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 11, 34, 15, 18, 19, 22, 24, 27, 29, 31, 33, 35, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 13, 14, 15, 16, 17, 18, 19, 1, 37, 38, 21, 22, 23, 24, 25, 26, 27, 39, 40, 30, 31, 32, 33, 41], [13, 14, 15, 16, 17, 18, 19, 1, 37, 38, 21, 22, 23, 24, 25, 26, 27, 39, 40, 30, 31, 32, 33, 41, 42]]"
        }
    },
    {
        "code": "find Path -exec grep -q Regex {} \\; -print",
        "text": "search for word regex in all file in current folder ..",
        "id": 17,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'grep', '-', 'q', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 7, 8, 16, 17]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 17, 6, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 16, 6, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 23, 24, 18, 19, 20], [9, 10, 11, 12, 13, 14, 15, 23, 24, 18, 19, 20, 21]]"
        }
    },
    {
        "code": "echo Regex | xargs -I {} gzip -9 {}",
        "text": "compress all file with file ext en under current director i ..",
        "id": 18,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'number', 'word', 'regex', 'word', '-', 'i', 'word', 'word', 'g', 'zip', '-', '<number>', 'word', 'word', 'echo', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 4, 5, 5, 0, 0, 6, 8, 8, 11, 12, 17, 18]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 12, 4, 5, 9, 11, 13, 15, 17, 20], [1, 8, 2, 3, 11, 4, 5, 17, 10, 12, 14, 16, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 7, 1, 20, 21, 9, 10, 22, 23, 13, 14, 15, 16, 24], [7, 1, 20, 21, 9, 10, 22, 23, 13, 14, 15, 16, 24, 25]]"
        }
    },
    {
        "code": "chown Regex File",
        "text": "c hang owner of regex to regex ..",
        "id": 19,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} sed -i Program File {}",
        "text": "find all regular file in current folder and rep lac a word in all t he be e file ..",
        "id": 20,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', 'program', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 8, 9, 9, 10, 11, 0, 0, 12, 20, 20, 25, 26, 33, 34]]",
            "sibling_edges": "[[5, 1, 12, 2, 3, 4, 20, 6, 7, 26, 8, 9, 10, 11, 14, 17, 18, 21, 23, 25, 27, 29, 33, 36], [1, 20, 2, 3, 4, 5, 6, 7, 25, 8, 9, 10, 11, 33, 15, 18, 19, 22, 24, 26, 28, 30, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 13, 14, 15, 16, 17, 18, 19, 1, 36, 37, 21, 22, 23, 24, 38, 39, 27, 28, 29, 30, 31, 32, 40], [13, 14, 15, 16, 17, 18, 19, 1, 36, 37, 21, 22, 23, 24, 38, 39, 27, 28, 29, 30, 31, 32, 40, 41]]"
        }
    },
    {
        "code": "sort File -o File",
        "text": "sort line of file file and c hang it in p lac ..",
        "id": 21,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'file', '-', 'o', 'file', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find . -maxdepth 1 -type d -print0 | xargs -0 -I {} sh -c echo -e $(find {} | wc -l) {} | sort -n",
        "text": "print list of top level sub fold in a current folder sort by number of contain file ..",
        "id": 22,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'number', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'max', 'depth', '<number>', '-', 'type', 'd', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'sh', '-', 'c', 'echo', '-', 'e', '$(', ')', 'word', 'word', 'word', '-', 'n', 'find', 'x', 'arg', '{', '}', '|', '{', '}', 'sort', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'find', '{', '}', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 8, 0, 9, 9, 10, 10, 0, 0, 11, 12, 12, 13, 14, 14, 0, 0, 0, 0, 0, 15, 15, 16, 28, 28, 33, 34, 0, 43, 44, 45, 0, 0, 0, 0, 0, 57, 57, 58, 59, 60, 61]]",
            "sibling_edges": "[[8, 1, 44, 2, 16, 3, 4, 5, 6, 7, 28, 9, 10, 34, 11, 12, 13, 14, 42, 45, 18, 19, 22, 25, 26, 29, 31, 33, 36, 39, 41, 57, 43, 46, 49, 60, 53, 58, 61, 59, 62], [1, 28, 2, 45, 3, 4, 5, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 41, 43, 15, 19, 20, 23, 26, 27, 30, 32, 34, 37, 40, 58, 42, 44, 47, 50, 53, 61, 59, 57, 60, 63]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[48, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 49, 50, 29, 30, 31, 32, 51, 52, 35, 36, 37, 38, 39, 40, 41, 64, 65, 66, 53, 67, 62, 63, 42, 54, 55, 2, 56, 46], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 49, 50, 29, 30, 31, 32, 51, 52, 35, 36, 37, 38, 39, 40, 41, 64, 65, 66, 53, 67, 62, 63, 42, 54, 55, 2, 56, 46, 47]]"
        }
    },
    {
        "code": "find Path -iname Regex -exec bash -c rm -r -f {} \\;",
        "text": "find an i file or director i call file under current director i and run a recur de let command on each one ..",
        "id": 23,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'exec', 'bash', '-', 'c', 'rm', '-', 'r', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 0, 0, 10, 10, 11, 27, 28]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 13, 14, 17, 20, 23, 25, 27, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 10, 14, 15, 18, 21, 24, 26, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 29], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 29, 30]]"
        }
    },
    {
        "code": "find Path -type f -print | xargs -I {} grep -i -l Regex {}",
        "text": "list file in file director i tree contain text file ..",
        "id": 24,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'i', '-', 'l', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 0, 6, 6, 0, 0, 7, 8, 8, 9, 9, 10, 0, 0, 11, 18, 18, 21, 22, 29, 30]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 18, 6, 22, 7, 8, 9, 10, 13, 16, 19, 21, 24, 26, 29, 32], [1, 18, 2, 3, 4, 5, 6, 21, 7, 8, 9, 10, 29, 14, 17, 20, 22, 25, 27, 30, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 1, 32, 33, 19, 20, 34, 35, 23, 24, 25, 26, 27, 28, 36], [12, 13, 14, 15, 16, 17, 1, 32, 33, 19, 20, 34, 35, 23, 24, 25, 26, 27, 28, 36, 37]]"
        }
    },
    {
        "code": "find . -xdev -print0 | cpio -oa0V | gzip > path_to_save.cpio.gz",
        "text": "find all file and director i under current director i without cross over to other partit and archiv them into file ..",
        "id": 25,
        "graph": {
            "nodes": "['redirected_statement', '|', '|', '>', 'word', 'word', 'word', 'word', 'word', 'path_to_save', '.', 'cp', 'io', '.', 'gz', 'word', '.', '-', 'x', 'dev', '-', 'print', '<number>', 'word', '-', 'oa0v', 'word', 'find', 'cp', 'io', 'g', 'zip']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 5, 6, 6, 6, 7, 7, 7, 0, 8, 8, 0, 15, 23, 23, 26, 26]]",
            "sibling_edges": "[[26, 7, 1, 8, 2, 3, 15, 5, 6, 23, 9, 10, 11, 12, 13, 17, 18, 20, 21, 24, 28, 30], [3, 1, 23, 2, 26, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 18, 19, 21, 22, 25, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 16, 17, 18, 19, 20, 21, 22, 1, 28, 29, 24, 25, 2, 30, 31, 3, 9, 10, 11, 12, 13], [16, 17, 18, 19, 20, 21, 22, 1, 28, 29, 24, 25, 2, 30, 31, 3, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "du -h -s -x File | sort -r -h | head - Quantity",
        "text": "find number large file in current director i and it sub director i ..",
        "id": 26,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'h', '-', 's', '-', 'x', 'file', 'word', '-', 'r', '-', 'h', 'word', '-', 'quantity', 'du', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 5, 6, 0, 7, 7, 8, 8, 0, 9, 10, 11, 19, 24]]",
            "sibling_edges": "[[6, 1, 8, 2, 11, 3, 4, 5, 19, 7, 24, 9, 12, 14, 16, 20, 22], [1, 19, 2, 24, 3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 17, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 12, 13, 14, 15, 16, 17, 18, 1, 28, 20, 21, 22, 23, 2, 29, 25], [12, 13, 14, 15, 16, 17, 18, 1, 28, 20, 21, 22, 23, 2, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "display all file script in folder file ..",
        "id": 27,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "rsync -a -v -z -r -u --delete-excluded File File",
        "text": "archiv directory on host regex to local director i directory and skip file that be new in d in de let an i file in d in not in sour c and compress data du re trans ..",
        "id": 28,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'v', '-', 'z', '-', 'r', '-', 'u', '--', 'delete', '-', 'exclude', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 8, 9, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 10, 12, 14, 16, 18, 20, 21, 22, 26], [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 17, 19, 21, 22, 23, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 27, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [27, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -type f -mmin -Quantity",
        "text": "find all regular file in and below home director i that be mod if i in time span ..",
        "id": 29,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'mm', 'in', '-', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14], [1, 2, 3, 4, 5, 9, 12, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "awk {gsub(/^[ \\t]+|[ \\t]+$/,\"\"); print;} in.txt | hexdump -C | less",
        "text": "r emo v lead and trail space from line in file file interact page through a hexdump of result ..",
        "id": 30,
        "graph": {
            "nodes": "['program', ';', ';', '|', ')', '|', '|', '+', '$', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '[', 'word', ']', 'print', 'word', 'in', '.', 'txt', 'word', '-', 'c', 'word', 'a', 'wk', '{', 'gsub', '(', '/', '^', '[', '\\\\', 't', ']', '+', '\\\\', 't', 'word', 'raw_string', '}', 'hexdump', 'le', '/', ',', \"''\"]",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 10, 10, 10, 0, 11, 11, 0, 12, 12, 13, 14, 0, 15, 15, 16, 17, 17, 18, 19, 21, 21, 0, 0, 24, 28, 31, 46, 46, 47]]",
            "sibling_edges": "[[47, 4, 1, 9, 2, 19, 3, 8, 10, 5, 11, 6, 12, 16, 22, 7, 24, 28, 13, 14, 36, 15, 17, 18, 20, 21, 25, 26, 29, 32, 37, 40, 44, 46, 51], [4, 1, 9, 2, 24, 3, 20, 46, 5, 28, 6, 31, 13, 17, 7, 8, 10, 11, 14, 36, 15, 16, 18, 19, 21, 22, 26, 27, 30, 33, 38, 41, 45, 47, 52]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 3, 20, 44, 45, 22, 7, 8, 51, 52, 53, 4, 1, 23, 2, 48, 25, 26, 27, 5, 49, 29, 30, 6], [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 3, 20, 44, 45, 22, 7, 8, 51, 52, 53, 4, 1, 23, 2, 48, 25, 26, 27, 5, 49, 29, 30, 6, 50]]"
        }
    },
    {
        "code": "history | awk Program",
        "text": "print hist or i with first field r emo v ..",
        "id": 31,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'program', 'history', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 2, 3, 4, 4]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 4, 2, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 1, 7, 8], [1, 7, 8, 5]]"
        }
    },
    {
        "code": "awk Program Program",
        "text": "display input fi l all on one line ..",
        "id": 32,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'program', 'program', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find Path -type d | sed -r Program",
        "text": "display all director i in current folder and c re at a skeleton of make director i command with all t he be e folder ..",
        "id": 33,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', 'word', '-', 'r', 'program', 'find', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 7, 12, 12]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 9, 13, 17], [1, 12, 2, 3, 4, 5, 6, 10, 14, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 9, 10, 11, 1, 17, 18, 13, 14], [8, 9, 10, 11, 1, 17, 18, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -type l -lname Regex",
        "text": "find find s ym link point to file in en ti r file system ..",
        "id": 34,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'l', '-', 'l', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\;",
        "text": "c hang ever i director i under directory to per miss number ..",
        "id": 35,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "sort -n File",
        "text": "num er sort each line in file regex and print result to con sol ..",
        "id": 36,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'n', 'file', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -type f -atime +Timespan -exec rm {} \\;",
        "text": "de let all file that not be access in time span ..",
        "id": 37,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'a', 'time', '+', 'timespan', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 0, 0, 8, 8, 9, 22, 23]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 23, 11, 14, 15, 17, 19, 22, 24], [1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 15, 16, 18, 20, 23, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24, 25]]"
        }
    },
    {
        "code": "mount Regex Regex Directory",
        "text": "mount partit with label regex on file ..",
        "id": 38,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'regex', 'regex', 'directory', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2], [1, 2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 6], [5, 6, 7]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -i Regex {} \\; -print",
        "text": "find pattern text ig nor letter case in all file file print match string and name of file with that string ..",
        "id": 39,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'i', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 9, 10, 21, 22]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 15, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 21, 8, 9, 13, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 23, 24, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "comm -2 -3 <( sort File ) <( sort File )",
        "text": "print line in sort content of regex that be not in sort content of regex ..",
        "id": 40,
        "graph": {
            "nodes": "['command', 'number', 'number', 'word', '-', '<number>', '-', '<number>', '<(', ')', '<(', ')', 'comm', 'word', 'word', 'word', 'file', 'word', 'file', 'sort', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 13, 0, 14, 15, 17]]",
            "sibling_edges": "[[3, 1, 2, 9, 4, 6, 8, 13, 10, 14, 15, 17], [1, 2, 8, 10, 5, 7, 15, 9, 17, 11, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 4, 5, 6, 7, 8, 19, 16, 9, 10, 20, 18], [4, 5, 6, 7, 8, 19, 16, 9, 10, 20, 18, 11]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} +",
        "text": "c hang file per miss on all regular file within a director i ..",
        "id": 41,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 20]]"
        }
    },
    {
        "code": "find Path -type f ! -name Regex -exec ln -s File Regex \\;",
        "text": "c re at symbol link in current director i for all file excl ud regex loc at under file director i tree ..",
        "id": 42,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '!', '-', 'name', 'regex', '-', 'exec', 'ln', '-', 's', 'file', 'regex', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 12, 12, 13]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 19, 22, 25, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 20, 23, 26, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]]"
        }
    },
    {
        "code": "find . -name *\\?* > output.txt",
        "text": "find file with a question mark in name and save output as a file ..",
        "id": 43,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', '>', 'word', 'word', '.', '-', 'name', '*', '\\\\', '?', '*', 'output', '.', 'txt', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 3, 5, 5, 5, 6]]",
            "sibling_edges": "[[3, 6, 1, 2, 4, 8, 10, 11, 12, 14, 15], [4, 1, 2, 3, 5, 9, 11, 12, 13, 15, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 7, 8, 9, 10, 11, 12, 13, 4, 14, 15], [7, 8, 9, 10, 11, 12, 13, 4, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -group Regex",
        "text": "print all file on system own by group regex ..",
        "id": 44,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'group', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "echo hey hey, we're the monkees | tee >(gzip --stdout > my_log.gz)",
        "text": "write regex to standard output and as input to file ..",
        "id": 45,
        "graph": {
            "nodes": "['program', 'word', 'word', 'word', 'ERROR', 'word', 'hey', 'hey', ',', 'we', 'be', 'the', 'monkees', '|', 'tee', '>', '(', 'g', 'zip', '--', 'stdout', '>', 'my_log', '.', 'gz', ')', 'echo']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5]]",
            "sibling_edges": "[[3, 5, 1, 2, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [4, 1, 2, 3, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -exec grep -l Regex {} \\;",
        "text": "search file from current director i tree for regex ..",
        "id": 46,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'grep', '-', 'l', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} +",
        "text": "find all director i under htdoc director i and set per miss to number ..",
        "id": 47,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 20]]"
        }
    },
    {
        "code": "find . -name *.py -type f > output.txt",
        "text": "save list of all file file under and below current director i to file ..",
        "id": 48,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', '>', 'word', 'word', '.', '-', 'name', '*', '.', 'py', '-', 'type', 'f', 'output', '.', 'txt', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 5, 7, 7, 7, 8]]",
            "sibling_edges": "[[5, 8, 1, 2, 3, 4, 6, 10, 12, 13, 15, 18, 19], [6, 1, 2, 3, 4, 5, 7, 11, 13, 14, 16, 19, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 6, 18, 19], [9, 10, 11, 12, 13, 14, 15, 16, 17, 6, 18, 19, 20]]"
        }
    },
    {
        "code": "rsync -a -z File File",
        "text": "archiv pre serv per miss and ownership file in directory on host file to local directory ..",
        "id": 49,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'z', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 12], [1, 2, 3, 4, 7, 9, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 13, 6, 7, 8, 9, 10], [13, 6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i file ..",
        "id": 50,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex",
        "text": "find passwd file under root and number level down ..",
        "id": 51,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12], [1, 2, 3, 4, 5, 9, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "ssh -q Regex command",
        "text": "login to regex and c re at file regex if it not exist ..",
        "id": 52,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'q', 'regex', 'command', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "rm File File",
        "text": "recur r emo v all file like regex and file from directory folder ..",
        "id": 53,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'file', 'file', 'rm']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "tar -t -f File | cut -d Regex -f Number | uniq",
        "text": "set v aria bl regex to list of top level director i and file contain in tar archiv specif i by v aria bl file ..",
        "id": 54,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', '-', 'f', 'file', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'tar', 'cut', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 0, 6, 6, 7, 8, 8, 9, 0, 10, 16, 23, 23]]",
            "sibling_edges": "[[5, 1, 9, 2, 10, 3, 4, 16, 6, 7, 8, 11, 13, 17, 20, 26], [1, 16, 2, 23, 3, 4, 5, 6, 7, 8, 9, 12, 14, 18, 21, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 11, 12, 13, 14, 15, 1, 25, 17, 18, 19, 20, 21, 22, 2, 26], [11, 12, 13, 14, 15, 1, 25, 17, 18, 19, 20, 21, 22, 2, 26, 27]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search everywher for hide file file ..",
        "id": 55,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -prune",
        "text": "find all file and director i name regex without descend into director i with same name under current director i tree ..",
        "id": 56,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec sed -i Program {} +",
        "text": "rep lac word foo to bar in current folder in all regular file contain word regex in name ..",
        "id": 57,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 's', 'ed', '-', 'i', 'program', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 0, 0, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 13, 16, 19, 21, 23, 26], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 14, 17, 20, 22, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 28]]"
        }
    },
    {
        "code": "find / -size 0 -ok rm { } ;",
        "text": "de let all e mp ti file in file system after user confirm ..",
        "id": 58,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'number', 'word', 'word', 'word', 'word', '/', '-', 'size', '<number>', '-', 'ok', 'rm', '{', '}', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8]]",
            "sibling_edges": "[[7, 8, 2, 3, 4, 5, 6, 10, 13, 16], [1, 2, 3, 4, 5, 6, 7, 11, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 1]]"
        }
    },
    {
        "code": "find Path -type d -name Regex | sort | tail -n +Quantity | xargs -I {} echo Regex {}",
        "text": "find all regex director i under directory and print all but first number append with string regex ..",
        "id": 59,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', 'word', 'word', '-', 'n', '+', 'quantity', 'word', '-', 'i', 'word', 'word', 'echo', 'regex', 'word', 'word', 'find', 'sort', 'tail', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 8, 0, 0, 9, 9, 10, 10, 0, 11, 11, 0, 0, 12, 13, 0, 0, 14, 22, 23, 28, 28, 31, 32, 35, 36]]",
            "sibling_edges": "[[8, 1, 22, 2, 10, 3, 14, 4, 5, 6, 7, 23, 9, 28, 11, 32, 12, 13, 16, 19, 24, 26, 29, 31, 35, 40], [1, 22, 2, 23, 3, 28, 4, 5, 6, 7, 8, 9, 10, 11, 31, 12, 13, 35, 17, 20, 25, 27, 30, 32, 36, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 15, 16, 17, 18, 19, 20, 21, 1, 38, 2, 39, 24, 25, 26, 27, 3, 40, 41, 29, 30, 42, 43, 33, 34, 44], [15, 16, 17, 18, 19, 20, 21, 1, 38, 2, 39, 24, 25, 26, 27, 3, 40, 41, 29, 30, 42, 43, 33, 34, 44, 45]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec mv {} File \\;",
        "text": "find all file in current folder with name regex and move them to folder regex ..",
        "id": 60,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'mv', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 9, 9, 10, 21, 22]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 15, 18, 21, 24], [1, 2, 3, 4, 5, 6, 7, 21, 8, 9, 13, 16, 19, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 23, 24], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 23, 24, 25]]"
        }
    },
    {
        "code": "echo $( sleep Timespan )",
        "text": "wait time span and print regex ..",
        "id": 61,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'echo', 'word', 'word', 'timespan', 'sleep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 0, 0, 5, 6]]",
            "sibling_edges": "[[1, 2, 5, 6], [2, 6, 3, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 8, 7], [2, 8, 7, 3]]"
        }
    },
    {
        "code": "grep Regex File | cut -d Regex -f Number | tr Regex Regex",
        "text": "search regex in file take regex colon se par field rep lac comma with new l in and save result to v aria bl regex ..",
        "id": 62,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'file', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'regex', 'regex', 'grep', 'cut', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 5, 5, 6, 7, 7, 8, 0, 9, 10, 11, 14, 21]]",
            "sibling_edges": "[[4, 1, 8, 2, 11, 3, 14, 5, 6, 7, 21, 9, 15, 18], [1, 14, 2, 21, 3, 4, 5, 6, 7, 8, 9, 10, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 12, 13, 1, 25, 15, 16, 17, 18, 19, 20, 2, 26, 22], [12, 13, 1, 25, 15, 16, 17, 18, 19, 20, 2, 26, 22, 23]]"
        }
    },
    {
        "code": "find Path -newermt Regex",
        "text": "find file mod if i at least time span in futur ..",
        "id": 63,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'mt', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -type f -iregex Regex -mtime +Timespan -exec rm {} \\;",
        "text": "de let all file under file director i tree with file or file ext en that be mod if i more that time span ago ..",
        "id": 64,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'regex', 'regex', '-', 'm', 'time', '+', 'timespan', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 8, 8, 9, 0, 0, 10, 10, 11, 28, 29]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 29, 13, 16, 17, 20, 21, 23, 25, 28, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 14, 17, 18, 21, 22, 24, 26, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 30], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 30, 31]]"
        }
    },
    {
        "code": "find Path -type d -exec mkdir Directory \\;",
        "text": "cop i director i hi er arch i from regex to regex ..",
        "id": 65,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'mk', 'dir', 'directory', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 13, 15, 18], [1, 2, 3, 4, 5, 6, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -user Regex -exec chown -h Regex {} \\;",
        "text": "c hang user ownership to regex for file with permission ..",
        "id": 66,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'exec', 'chow', 'n', '-', 'h', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 0, 0, 8, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 14, 16, 18, 21, 23], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 15, 17, 19, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23, 24]]"
        }
    },
    {
        "code": "rsync --recursive File File",
        "text": "recur cop i regex to file ..",
        "id": 67,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '--', 'recursive', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "pstree -ap `pidof cron`",
        "text": "print process tree of a cron process with command argument and process id number ..",
        "id": 68,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'ap', '`', '`', 'ps', 'tree', 'word', 'word', 'cron', 'p', 'id', 'of']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 9, 10, 10, 10]]",
            "sibling_edges": "[[2, 1, 3, 5, 9, 7, 10, 12, 13], [1, 5, 4, 10, 6, 8, 9, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 3, 4, 5, 12, 13, 14, 11], [8, 3, 4, 5, 12, 13, 14, 11, 6]]"
        }
    },
    {
        "code": "mktemp -p Directory",
        "text": "c re at tempo rar i file in a current folder and save path to it in regex v aria bl ..",
        "id": 69,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'p', 'directory', 'mk', 'temp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "cd $( find Path -name Regex -printf '%h\\n' )",
        "text": "search for file under current director i and go to director i contain it ..",
        "id": 70,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'cd', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'f', \"'\", '%', 'h', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 10]]",
            "sibling_edges": "[[1, 2, 9, 10, 5, 6, 7, 8, 12, 15, 16, 18, 19, 20], [2, 10, 3, 5, 6, 7, 8, 9, 13, 16, 17, 19, 20, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [2, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3]]"
        }
    },
    {
        "code": "find Path -name Regex | grep Regex | xargs -i -I {} cp -p {} File {}",
        "text": "cop i all file under current folder like file with regex in path to root of current folder pre serv mode ownership and timestamp attr i but ..",
        "id": 71,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', 'regex', 'word', '-', 'i', '-', 'i', 'word', 'word', 'cp', '-', 'p', 'word', 'word', 'file', 'word', 'word', 'find', 'grep', 'x', 'arg', '{', '}', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 0, 7, 7, 8, 8, 0, 0, 9, 10, 10, 0, 0, 11, 0, 0, 12, 17, 19, 19, 24, 25, 29, 30, 32, 33]]",
            "sibling_edges": "[[5, 1, 6, 2, 12, 3, 4, 17, 19, 7, 8, 25, 9, 10, 30, 11, 14, 20, 22, 24, 27, 29, 32, 36], [1, 17, 2, 19, 3, 4, 5, 6, 7, 8, 24, 9, 10, 29, 11, 32, 15, 21, 23, 25, 28, 30, 33, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 13, 14, 15, 16, 1, 35, 18, 2, 36, 37, 20, 21, 22, 23, 38, 39, 26, 27, 28, 40, 41, 31, 42], [13, 14, 15, 16, 1, 35, 18, 2, 36, 37, 20, 21, 22, 23, 38, 39, 26, 27, 28, 40, 41, 31, 42, 43]]"
        }
    },
    {
        "code": "find Path -type f -exec sed -i Program {} \\;",
        "text": "rep lac regex with regex in all file under current director i ..",
        "id": 72,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 's', 'ed', '-', 'i', 'program', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 0, 0, 8, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 14, 16, 18, 21, 23], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 15, 17, 19, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23, 24]]"
        }
    },
    {
        "code": "find Path | awk -F Regex Program",
        "text": "find all file and director i under current director i and print on li regex field from output delimit by directory ..",
        "id": 73,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'path', 'word', '-', 'f', 'regex', 'program', 'find', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 6, 8, 8]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 4, 9, 14], [1, 8, 2, 3, 4, 5, 10, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 7, 1, 14, 15, 9, 10, 11], [7, 1, 14, 15, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path ! -name Regex -delete",
        "text": "de let all file in file folder except file ..",
        "id": 74,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '!', '-', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 9, 12], [1, 2, 3, 4, 5, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "which Regex",
        "text": "print full path of command file ..",
        "id": 75,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -I -w Regex {} + | grep -E -v Regex",
        "text": "search current director i for file who be e name start with regex ig nor svn git and file file ..",
        "id": 76,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'i', '-', 'w', 'regex', 'word', 'word', '+', 'word', '-', 'e', '-', 'v', 'regex', 'find', '{', '}', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 0, 0, 10, 0, 11, 11, 12, 12, 13, 14, 27, 28, 30]]",
            "sibling_edges": "[[10, 1, 14, 2, 3, 4, 5, 6, 7, 8, 9, 28, 30, 11, 12, 16, 19, 22, 24, 27, 31, 33], [1, 30, 2, 3, 4, 5, 6, 7, 8, 9, 27, 10, 11, 12, 13, 17, 20, 23, 25, 28, 32, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 37, 38, 29, 1, 39, 31, 32, 33, 34], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 37, 38, 29, 1, 39, 31, 32, 33, 34, 35]]"
        }
    },
    {
        "code": "find /usr -type f | samefile -g 10000 >usr.dups",
        "text": "find all i dent file in file director i tree that be big than size and write result to file ..",
        "id": 77,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'word', 'word', 'word', 'word', 'number', 'us', 'r', '.', 'dups', 'word', '/', 'us', 'r', '-', 'type', 'f', 'word', '-', 'g', '<number>', 'find', 'same', 'file']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 4, 4, 4, 5, 5, 6, 0, 7, 7, 8, 13, 20, 20]]",
            "sibling_edges": "[[8, 6, 1, 2, 13, 4, 5, 20, 7, 9, 10, 11, 14, 15, 17, 21, 25], [2, 1, 20, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 18, 22, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 14, 15, 16, 17, 18, 19, 1, 25, 26, 21, 22, 23, 2, 9, 10, 11], [14, 15, 16, 17, 18, 19, 1, 25, 26, 21, 22, 23, 2, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find . -name my.txt 2>/dev/null",
        "text": "find all inst an c of a file in current folder and discard error ..",
        "id": 78,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'file_descriptor', '>', 'word', 'word', '.', '-', 'name', 'my', '.', 'txt', '<number>', '/', 'dev', '/', 'null', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 6, 6, 6, 6, 7]]",
            "sibling_edges": "[[3, 7, 1, 2, 4, 5, 9, 11, 12, 15, 16, 17], [4, 1, 2, 3, 5, 6, 10, 12, 13, 16, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 5, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 5, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -iname Regex -exec echo Regex {} \\;",
        "text": "find all file file and director i under current director i and print regex for each of them where regex be expand to file or director i path ..",
        "id": 79,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'exec', 'echo', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 11, 14, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 12, 15, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -type f",
        "text": "find all file under regex ..",
        "id": 80,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -printf \"%p:%T@\\n\" | sort -t Regex -k Number",
        "text": "list all file with name regex and mod if time under current director i sort by old mod if i to new mod if i ..",
        "id": 81,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'f', \"'\", '%', 'p', ':', '%', 't', '@', \"'\", 'word', '-', 't', 'regex', '-', 'k', 'number', 'find', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 0, 7, 7, 8, 9, 9, 10, 11, 27]]",
            "sibling_edges": "[[6, 1, 11, 2, 3, 4, 5, 27, 7, 8, 9, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 28, 31], [1, 27, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 35, 28, 29, 30, 31, 32], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 35, 28, 29, 30, 31, 32, 33]]"
        }
    },
    {
        "code": "ssh -o UserKnownHostsFile=/dev/null Regex",
        "text": "connect to host regex as user regex by f orc host key confirm ..",
        "id": 82,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'o', 'user', 'know', 'host', 'file', '=', '/', 'dev', '/', 'null', 'regex', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find /path/to/dir1 -printf %U %G %m %p\\n > /tmp/dir1.txt",
        "text": "print permission of owner permission of group per miss bite and path into file for all file and director i under file ..",
        "id": 83,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', 'word', '>', 'word', 'word', '/', 'path', '/', 'to', '/', 'dir', '<number>', '-', 'print', 'f', '%', 'u', '%', 'g', '%', 'm', '%', 'p', '/', 'tmp', '/', 'dir', '<number>', '.', 'txt', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 8, 8, 8, 8, 8, 8, 8, 9]]",
            "sibling_edges": "[[6, 9, 1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 24, 26, 28, 29, 30, 31, 32, 33], [7, 1, 2, 3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 18, 19, 21, 23, 25, 27, 29, 30, 31, 32, 33, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 7, 28, 29, 30, 31, 32, 33], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 7, 28, 29, 30, 31, 32, 33, 34]]"
        }
    },
    {
        "code": "./aaa.sh |& tee -a log",
        "text": "write standard output and error to con sol and append to file file ..",
        "id": 84,
        "graph": {
            "nodes": "['pipeline', '|&', 'word', 'word', 'word', 'word', '-', 'a', 'log', '.', '/', 'aaa', '.', 'sh', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 4, 4, 4, 5]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 9, 10, 11, 12], [1, 5, 2, 3, 7, 10, 11, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 11, 12, 13, 1, 14, 6, 7], [10, 11, 12, 13, 1, 14, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type d -printf \"%T@\\n\" | cut -f Number -d Regex | sort -n -r",
        "text": "find all director i under regex take first field as delimit regex from timestamp and revers sort them num er ..",
        "id": 85,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'print', 'f', \"'\", '%', 't', '@', \"'\", 'word', '-', 'f', 'number', '-', 'd', 'regex', 'word', '-', 'n', '-', 'r', 'find', 'cut', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 7, 7, 7, 7, 7, 0, 8, 8, 9, 10, 10, 11, 0, 12, 12, 13, 13, 14, 27, 34]]",
            "sibling_edges": "[[7, 1, 11, 2, 14, 3, 4, 5, 6, 27, 8, 9, 10, 34, 12, 16, 19, 20, 22, 23, 24, 25, 28, 31, 35, 37], [1, 27, 2, 34, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 20, 21, 23, 24, 25, 26, 29, 32, 36, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 40, 28, 29, 30, 31, 32, 33, 2, 41, 35, 36, 37], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 40, 28, 29, 30, 31, 32, 33, 2, 41, 35, 36, 37, 38]]"
        }
    },
    {
        "code": "echo -e Regex | xargs -I {} touch {}",
        "text": "c re at an e mp ti file with a carriag return char act in it name ..",
        "id": 86,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'e', 'regex', 'word', '-', 'i', 'word', 'word', 'touch', 'word', 'word', 'echo', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 4, 4, 0, 0, 5, 0, 0, 6, 10, 10, 13, 14, 16, 17]]",
            "sibling_edges": "[[3, 1, 6, 2, 10, 4, 14, 5, 7, 11, 13, 16, 19], [1, 10, 2, 3, 4, 13, 5, 16, 8, 12, 14, 17, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 1, 19, 20, 11, 12, 21, 22, 15, 23], [7, 8, 9, 1, 19, 20, 11, 12, 21, 22, 15, 23, 24]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "display all file in folder directory which start with word regex ..",
        "id": 87,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "grep -v Regex File | nl -n ln",
        "text": "r emo v line match regex from file and add leave just if i line number ..",
        "id": 88,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'v', 'regex', 'file', 'word', '-', 'n', 'ln', 'grep', 'nl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 0, 5, 5, 6, 7, 12]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 8, 13], [1, 12, 2, 3, 4, 5, 6, 9, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 9, 10, 11, 1, 17, 13, 14], [8, 9, 10, 11, 1, 17, 13, 14, 15]]"
        }
    },
    {
        "code": "find . -name * -type f -exec dos2unix {} ;",
        "text": "convert all regular file in current folder from do to unix format ..",
        "id": 89,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', '*', '-', 'type', 'f', '-', 'exec', 'dos2unix', 'word', 'word', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 0, 0, 9, 20, 21]]",
            "sibling_edges": "[[21, 9, 2, 3, 4, 5, 6, 7, 8, 11, 14, 17, 20], [1, 2, 3, 4, 5, 6, 7, 8, 20, 12, 15, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 1]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search current director i recur for file file who be e name begin with regex ..",
        "id": 90,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "shopt -s globstar nullglob",
        "text": "set shell option regex and regex ..",
        "id": 91,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 's', 'glob', 'tar', 'null', 'glob', 'shop', 't']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 9, 11], [1, 2, 3, 6, 8, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 5, 6, 7, 8, 9], [12, 5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -type type_descriptor",
        "text": "find file by type ..",
        "id": 92,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'type_descriptor', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "tmux show-environment -t sessname | grep RBENV",
        "text": "check if regex v aria bl be def in in t mu x session regex environ ..",
        "id": 93,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'show', '-', 'environment', '-', 't', 'sessname', 'word', 'rbenv', 't', 'mu', 'x', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 4, 0, 5, 6, 6, 6, 13]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 13, 7, 8, 10, 15, 16], [1, 13, 2, 3, 4, 5, 8, 9, 11, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 16, 17, 7, 8, 9, 10, 11, 12, 1, 18], [16, 17, 7, 8, 9, 10, 11, 12, 1, 18, 14]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} \\;",
        "text": "set per miss of all file under file to number ..",
        "id": 94,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -cmin -Quantity | less -R",
        "text": "find all file mod if i le than time span ago and page interact through output ..",
        "id": 95,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'cm', 'in', '-', 'quantity', 'word', '-', 'r', 'find', 'le']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 0, 5, 5, 6, 13]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 13, 8, 9, 11, 14], [1, 13, 2, 3, 4, 5, 9, 10, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 1, 17, 14], [7, 8, 9, 10, 11, 12, 1, 17, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -prune -or -name Regex -prune -or -name Regex -prune -or -print0 | xargs -0 -I {} grep -I -R Regex {}",
        "text": "search for regex in all file file under current director i without descend into file and file director i ..",
        "id": 96,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', '-', 'i', '-', 'r', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 15, 0, 16, 16, 17, 17, 0, 0, 18, 19, 19, 20, 20, 21, 0, 0, 22, 48, 48, 53, 54, 61, 62]]",
            "sibling_edges": "[[15, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 48, 16, 17, 54, 18, 19, 20, 21, 24, 27, 29, 31, 34, 36, 38, 41, 43, 45, 46, 49, 51, 53, 56, 58, 61, 64], [1, 48, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 53, 18, 19, 20, 21, 61, 25, 28, 30, 32, 35, 37, 39, 42, 44, 46, 47, 50, 52, 54, 57, 59, 62, 65]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[63, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 64, 65, 49, 50, 51, 52, 66, 67, 55, 56, 57, 58, 59, 60, 68], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 64, 65, 49, 50, 51, 52, 66, 67, 55, 56, 57, 58, 59, 60, 68, 69]]"
        }
    },
    {
        "code": "read -p $( echo -e Regex ) Regex",
        "text": "read a line from standard input into v aria bl regex with es cap prompt regex ..",
        "id": 97,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'p', '$(', ')', 'regex', 'read', 'word', 'word', 'word', '-', 'e', 'regex', 'echo']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 1, 1, 0, 0, 2, 3, 0, 0, 0, 10, 10, 11, 12]]",
            "sibling_edges": "[[3, 1, 7, 4, 6, 11, 12, 10, 13], [1, 6, 2, 5, 12, 7, 10, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 4, 5, 6, 16, 13, 14, 15, 7], [4, 5, 6, 16, 13, 14, 15, 7, 8]]"
        }
    },
    {
        "code": "grep -r Regex File",
        "text": "find match text in def in path recur but not follow s ym link ..",
        "id": 98,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path Path -name Regex -type f -ls",
        "text": "find file in number differ director i have regex string and list them ..",
        "id": 99,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 11, 14, 17], [1, 2, 3, 4, 5, 6, 7, 12, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "chown Regex File",
        "text": "c hang owner and group of regex to regex ..",
        "id": 100,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find Path -type f -size +Size -exec ls -l -h {} \\; | awk Program",
        "text": "list file great than size under file and print time and size on stdout ..",
        "id": 101,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'size', '+', 'size', '-', 'exec', 'ls', '-', 'l', '-', 'h', 'word', 'word', '\\\\', ';', 'word', 'program', 'find', '{', '}', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 0, 0, 11, 11, 0, 12, 13, 29, 30, 33, 33]]",
            "sibling_edges": "[[11, 1, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 33, 15, 18, 20, 22, 25, 27, 29, 31, 38], [1, 33, 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 11, 12, 16, 19, 21, 23, 26, 28, 30, 32, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 31, 32, 1, 38, 39], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 31, 32, 1, 38, 39, 34]]"
        }
    },
    {
        "code": "cat File | xargs -i -I {} dig -x {} Regex {}",
        "text": "send revers request to get domain name for each address in regex list ..",
        "id": 102,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'i', '-', 'i', 'word', 'word', 'dig', '-', 'x', 'word', 'word', 'regex', 'word', 'word', 'cat', 'x', 'arg', '{', '}', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 0, 0, 5, 6, 6, 0, 0, 7, 0, 0, 8, 10, 10, 15, 16, 20, 21, 23, 24]]",
            "sibling_edges": "[[2, 1, 8, 10, 3, 4, 16, 5, 6, 21, 7, 11, 13, 15, 18, 20, 23, 26], [1, 10, 2, 3, 4, 15, 5, 6, 20, 7, 23, 12, 14, 16, 19, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 9, 1, 26, 27, 11, 12, 13, 14, 28, 29, 17, 18, 19, 30, 31, 22, 32], [9, 1, 26, 27, 11, 12, 13, 14, 28, 29, 17, 18, 19, 30, 31, 22, 32, 33]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -printf '\"%p\"\\n' | xargs -I {} rm -f {}",
        "text": "r emo v all file file in current director i tree ..",
        "id": 103,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'print', 'f', 'raw_string', 'word', 'raw_string', 'word', '-', 'i', 'word', 'word', 'rm', '-', 'f', 'word', 'word', 'find', \"''\", '%', 'p', \"'\", \"'\", 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 7, 0, 0, 0, 0, 8, 8, 0, 0, 9, 10, 10, 0, 0, 11, 22, 23, 23, 24, 24, 25, 25, 28, 29, 33, 34]]",
            "sibling_edges": "[[24, 1, 11, 2, 3, 4, 5, 6, 7, 25, 8, 29, 9, 10, 13, 16, 19, 20, 22, 23, 26, 28, 31, 33, 37, 39, 41], [1, 25, 2, 3, 4, 5, 6, 7, 22, 8, 28, 9, 10, 33, 14, 17, 20, 21, 23, 24, 27, 29, 32, 34, 38, 40, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 36, 37, 38, 39, 40, 1, 41, 42, 26, 27, 43, 44, 30, 31, 32, 45], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 36, 37, 38, 39, 40, 1, 41, 42, 26, 27, 43, 44, 30, 31, 32, 45, 46]]"
        }
    },
    {
        "code": "... | column -s$\\t -t",
        "text": "format output of file as a tab se par tab l ..",
        "id": 104,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 't', '...', 'column', '-', 's', '$', '\\\\', 't']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 5, 5, 0, 6, 6]]",
            "sibling_edges": "[[3, 1, 4, 6, 5, 13, 7, 11, 14], [1, 4, 5, 2, 13, 6, 8, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 1, 10, 11, 12, 13, 14, 15, 7], [1, 10, 11, 12, 13, 14, 15, 7, 8]]"
        }
    },
    {
        "code": "find Path -path Regex -prune -or -name Regex -print -exec grep -H -n Regex {} \\;",
        "text": "find all regex file in regex path excl ud file and search for regex expand by regex in those file ..",
        "id": 105,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'name', 'regex', '-', 'print', '-', 'exec', 'grep', '-', 'h', '-', 'n', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 0, 0, 14, 14, 15, 37, 38]]",
            "sibling_edges": "[[15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 17, 20, 22, 24, 27, 29, 32, 34, 37, 39], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 37, 14, 18, 21, 23, 25, 28, 30, 33, 35, 38, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 39], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 39, 40]]"
        }
    },
    {
        "code": "cat File | ",
        "text": "pipe content of file file to input of command regex ..",
        "id": 106,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'file', 'word', 'cat']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 2, 0, 3]]",
            "sibling_edges": "[[2, 1, 3], [1, 5, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4, 1], [4, 1, 5]]"
        }
    },
    {
        "code": "find Path ! -type d -printf \"%T@ %p\\n\" | sort -n | head -n Quantity",
        "text": "find old normal file in current director i and display with it timestamp ..",
        "id": 107,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'path', '!', '-', 'type', 'd', '-', 'print', 'f', \"'\", '%', 't', '@', '%', 'p', \"'\", 'word', '-', 'n', 'word', '-', 'n', 'quantity', 'find', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 5, 5, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 0, 9, 9, 0, 10, 10, 11, 12, 28, 31]]",
            "sibling_edges": "[[8, 1, 9, 2, 12, 3, 4, 5, 6, 7, 28, 31, 10, 15, 18, 19, 21, 22, 23, 24, 25, 26, 29, 32], [1, 28, 2, 31, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 19, 20, 22, 23, 24, 25, 26, 27, 30, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 36, 29, 30, 2, 37, 32, 33], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 36, 29, 30, 2, 37, 32, 33, 34]]"
        }
    },
    {
        "code": "find Path -type d -name Regex -prune -or -name Regex",
        "text": "excl ud director i from find command ..",
        "id": 108,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 10]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 18, 20, 22], [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 19, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "find file in current director i tree who be e per miss be number ..",
        "id": 109,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "read -p Regex Regex",
        "text": "read a line from standard input into v aria bl regex with prompt file ..",
        "id": 110,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'p', 'regex', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "find all perl file in current folder ..",
        "id": 111,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "od -t uI -N File File | awk Program",
        "text": "save a random size unsign integ from file to v aria bl regex ..",
        "id": 112,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', 'ui', '-', 'n', 'file', 'file', 'word', 'program', 'od', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 5, 6, 0, 7, 8, 16, 16]]",
            "sibling_edges": "[[6, 1, 8, 2, 3, 4, 5, 16, 9, 12, 19], [1, 16, 2, 3, 4, 5, 6, 7, 10, 13, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 9, 10, 11, 12, 13, 14, 15, 1, 19, 20], [9, 10, 11, 12, 13, 14, 15, 1, 19, 20, 17]]"
        }
    },
    {
        "code": "find Path -type d",
        "text": "display all director i in folder symfoni ..",
        "id": 113,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search for all file in current director i recur who be e name begin with regex ..",
        "id": 114,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type f | md5sum",
        "text": "cal cu l regex sum of list of file in current director i ..",
        "id": 115,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'f', 'word', 'find', 'md', '<number>', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 0, 7, 16, 16, 16]]",
            "sibling_edges": "[[6, 1, 7, 2, 3, 4, 5, 9, 10, 13, 18, 19], [1, 16, 2, 3, 4, 5, 6, 10, 11, 14, 19, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15, 1, 18, 19], [8, 9, 10, 11, 12, 13, 14, 15, 1, 18, 19, 20]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex -delete",
        "text": "find all file file start from current director i and de let them ..",
        "id": 116,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 13, 16], [1, 2, 3, 4, 5, 6, 10, 13, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "readlink -f File",
        "text": "convert rel at path file into ab sol ut path with resolv symbol link ..",
        "id": 117,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'f', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "echo Regex | cut -d Regex -f Number",
        "text": "print first field from semicolon sepr line regex ..",
        "id": 118,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'echo', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 6, 7, 9]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 4, 5, 10, 13], [1, 9, 2, 3, 4, 5, 6, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 1, 17, 10, 11, 12, 13, 14], [8, 1, 17, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep Regex {} \\;",
        "text": "search for regex in all file with file ext en under file director i ..",
        "id": 119,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 0, 0, 7, 7, 8, 17, 18]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 18, 10, 13, 17, 19], [1, 2, 3, 4, 5, 6, 17, 7, 11, 14, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19], [9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19, 20]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} grep -H Regex {}",
        "text": "search file from current director i tree for text regex ..",
        "id": 120,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', '-', 'h', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 10, 0, 0, 11, 19, 19, 24, 25, 30, 31]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 19, 6, 7, 25, 8, 9, 10, 13, 16, 17, 20, 22, 24, 27, 30, 33], [1, 19, 2, 3, 4, 5, 6, 7, 24, 8, 9, 10, 30, 14, 17, 18, 21, 23, 25, 28, 31, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 1, 33, 34, 20, 21, 22, 23, 35, 36, 26, 27, 28, 29, 37], [12, 13, 14, 15, 16, 17, 18, 1, 33, 34, 20, 21, 22, 23, 35, 36, 26, 27, 28, 29, 37, 38]]"
        }
    },
    {
        "code": "who File Regex | awk Program",
        "text": "print ip address of ssh session ..",
        "id": 121,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'file', 'regex', 'word', 'program', 'who', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 3, 0, 4, 5, 8, 8]]",
            "sibling_edges": "[[3, 1, 5, 2, 8, 11], [1, 8, 2, 3, 4, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 6, 7, 1, 11, 12], [6, 7, 1, 11, 12, 9]]"
        }
    },
    {
        "code": "for i in `find . -exec echo {} ;`; do cmd1 $i; cmd2 $i; done",
        "text": "run regex and regex on each file or director i under current director i with file or director i path as a posit argument to those command ..",
        "id": 122,
        "graph": {
            "nodes": "['program', 'pipeline', 'command', '|', 'command', 'command_name', 'word', 'word', 'command_name', 'word', 'word', 'file', 'regex']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 3, 0, 4, 5, 8, 8]]",
            "sibling_edges": "[[3, 1, 5, 2, 8, 11], [1, 8, 2, 3, 4, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 6, 7, 1, 11, 12], [6, 7, 1, 11, 12, 9]]"
        }
    },
    {
        "code": "find Path -type f -perm Permission -print",
        "text": "search for all regular file in folder file which per miss number ..",
        "id": 123,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', 'permission', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type f -name Regex -exec mv {} File \\; -or -name Regex -exec mv {} File \\;",
        "text": "find all regular file in current folder which end with regex or which begin and end with regex and and move them to temp folder ..",
        "id": 124,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'mv', 'word', 'word', 'file', '\\\\', ';', '-', 'or', '-', 'name', 'regex', '-', 'exec', 'mv', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 0, 0, 10, 11, 11, 12, 12, 13, 13, 14, 15, 15, 16, 0, 0, 17, 18, 18, 19, 34, 35, 47, 48]]",
            "sibling_edges": "[[19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 35, 10, 11, 12, 13, 14, 15, 16, 48, 17, 21, 22, 25, 28, 31, 34, 37, 39, 41, 44, 47, 50], [1, 2, 3, 4, 5, 6, 7, 8, 9, 34, 10, 11, 12, 13, 14, 15, 16, 47, 17, 18, 22, 23, 26, 29, 32, 35, 38, 40, 42, 45, 48, 51]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[52, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 53, 54, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 55, 56, 49, 50], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 53, 54, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 55, 56, 49, 50, 51]]"
        }
    },
    {
        "code": "find Path -exec grep Regex {} \\;",
        "text": "search file from current director i tree for regex ..",
        "id": 125,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'grep', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 0, 0, 5, 5, 6, 12, 13]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 13, 8, 12, 14], [1, 2, 3, 4, 12, 5, 9, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 17, 18, 14], [7, 8, 9, 10, 11, 17, 18, 14, 15]]"
        }
    },
    {
        "code": "rsync -a -H -v -z File File",
        "text": "archiv directory to file pre serv hard link and compress data du re trans miss ..",
        "id": 126,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'h', '-', 'v', '-', 'z', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 10, 12, 14, 18], [1, 2, 3, 4, 5, 6, 9, 11, 13, 15, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 16], [19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -size +Size -print",
        "text": "find all file in current folder which be big than size ..",
        "id": 127,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9, 11], [1, 2, 3, 4, 8, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find . -type d -print0 | tar cf directory-structure.tar --null --files-from - --no-recursion",
        "text": "archiv director i str uctu r under current director i into file ..",
        "id": 128,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'd', '-', 'print', '<number>', 'word', 'cf', 'directory', '-', 'structure', '.', 'tar', '--', 'null', '--', 'file', '-', 'from', '-', '--', 'no', '-', 'recursion', 'find', 'tar']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 10, 11, 11, 11, 11, 12, 20]]",
            "sibling_edges": "[[5, 1, 12, 2, 3, 4, 20, 6, 7, 8, 9, 10, 14, 17, 18, 22, 23, 24, 25, 27, 29, 30, 31, 34, 35, 36], [1, 20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 18, 19, 23, 24, 25, 26, 28, 30, 31, 32, 35, 36, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 13, 14, 15, 16, 17, 18, 19, 1, 39, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [13, 14, 15, 16, 17, 18, 19, 1, 39, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]]"
        }
    },
    {
        "code": "ls -t -p | grep -v Regex | tail -n +Quantity | xargs -I {} rm -- {}",
        "text": "r emo v all file but regex new one from current folder ..",
        "id": 129,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', '-', 'p', 'word', '-', 'v', 'regex', 'word', '-', 'n', '+', 'quantity', 'word', '-', 'i', 'word', 'word', 'rm', '--', 'word', 'word', 'ls', 'grep', 'tail', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 5, 0, 6, 6, 7, 0, 8, 8, 9, 9, 0, 10, 10, 0, 0, 11, 12, 0, 0, 13, 18, 22, 27, 27, 30, 31, 34, 35]]",
            "sibling_edges": "[[5, 1, 7, 2, 9, 3, 13, 4, 18, 6, 22, 8, 27, 10, 31, 11, 12, 14, 16, 19, 23, 25, 28, 30, 34, 39], [1, 18, 2, 22, 3, 27, 4, 5, 6, 7, 8, 9, 10, 30, 11, 12, 34, 15, 17, 20, 24, 26, 29, 31, 35, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 14, 15, 16, 17, 1, 37, 19, 20, 21, 2, 38, 23, 24, 25, 26, 3, 39, 40, 28, 29, 41, 42, 32, 33, 43], [14, 15, 16, 17, 1, 37, 19, 20, 21, 2, 38, 23, 24, 25, 26, 3, 39, 40, 28, 29, 41, 42, 32, 33, 43, 44]]"
        }
    },
    {
        "code": "find Path -type d",
        "text": "find all director i under and below regex ..",
        "id": 130,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "search for file which be writ a bl by somebodi ..",
        "id": 131,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec chmod Permission {} \\;",
        "text": "c hang per miss to number recur for file file ..",
        "id": 132,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 20, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 21, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find . -type f -exec bash -c for f do d=${f%/*} b=${f##*/} nb=${b//[^A-Za-z0-9._-]/_}; [[ $b = \"$nb\" ]] || echo mv \"$f\" \"$d/$nb\"; done _ {} +",
        "text": "r en be file from current director i tree to ascii standard ..",
        "id": 133,
        "graph": {
            "nodes": "['program', ';', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '||', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'exec', 'bash', '-', 'c', 'for', 'f', 'do', 'word', 'word', 'word', '[[', ']]', 'word', 'raw_string', 'raw_string', 'word', '_', 'word', 'word', '+', 'find', 'd', '=', '${', 'variable_name', '%', 'regex', '}', 'b', '=', '${', 'variable_name', '##', 'regex', '}', 'nb', '=', '${', 'variable_name', '//', 'regex', '/', 'word', '}', '=', 'raw_string', 'word', 'mv', \"'\", '$', 'f', \"'\", \"'\", '$', 'd', '/', '$', 'nb', \"'\", 'do', '{', '}', 'f', '/', '*', 'f', '*', '/', 'b', '[', '^', 'a', '-', 'za', '-', 'z0', '-', '<number>', '.', '_', '-', ']', '_', '$', 'variable_name', \"'\", '$', 'nb', \"'\", 'echo', 'b']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 15, 28, 28, 0, 0, 0, 0, 0, 29, 29, 0, 0, 0, 0, 0, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 38, 39, 45, 47, 47, 52, 54, 54, 59, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 63, 0, 0, 66, 66, 66, 66, 67, 105]]",
            "sibling_edges": "[[64, 1, 35, 2, 15, 3, 4, 5, 6, 7, 8, 9, 10, 11, 48, 55, 32, 12, 36, 13, 39, 17, 20, 23, 28, 29, 30, 31, 66, 67, 33, 34, 38, 42, 44, 45, 46, 47, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 105, 65, 69, 70, 71, 73, 74, 75, 76, 77, 78, 84, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 107, 108], [1, 31, 2, 36, 3, 4, 5, 6, 7, 8, 9, 10, 11, 28, 29, 30, 12, 67, 13, 38, 14, 18, 21, 24, 44, 51, 58, 104, 32, 33, 34, 35, 39, 43, 45, 46, 47, 48, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 74, 75, 76, 77, 78, 79, 85, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 42, 43, 44, 83, 46, 84, 85, 48, 49, 50, 51, 86, 53, 87, 88, 55, 56, 57, 58, 89, 60, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 62, 103, 64, 1, 31, 104, 111, 65, 106, 107, 108, 109, 32, 12, 110, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 2, 80, 37, 81, 82], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 42, 43, 44, 83, 46, 84, 85, 48, 49, 50, 51, 86, 53, 87, 88, 55, 56, 57, 58, 89, 60, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 62, 103, 64, 1, 31, 104, 111, 65, 106, 107, 108, 109, 32, 12, 110, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 2, 80, 37, 81, 82, 40]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep Regex {} + | wc -l",
        "text": "find all file name regex ..",
        "id": 134,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', 'regex', 'word', 'word', '+', 'word', '-', 'l', 'find', '{', '}', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 0, 0, 8, 0, 9, 9, 10, 19, 20, 22]]",
            "sibling_edges": "[[8, 1, 10, 2, 3, 4, 5, 6, 7, 20, 22, 12, 15, 19, 23], [1, 22, 2, 3, 4, 5, 6, 7, 19, 8, 9, 13, 16, 20, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 11, 12, 13, 14, 15, 16, 17, 18, 26, 27, 21, 1, 28, 23], [11, 12, 13, 14, 15, 16, 17, 18, 26, 27, 21, 1, 28, 23, 24]]"
        }
    },
    {
        "code": "yes 0 | script -c ispell text.txt /dev/null",
        "text": "auto mat spell check file file use regex command ..",
        "id": 135,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'word', 'word', 'word', 'word', 'word', '<number>', 'word', '-', 'c', 'ispell', 'text', '.', 'txt', '/', 'dev', '/', 'null', 'yes', 'script']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 7, 9]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 4, 5, 10, 13, 14, 16, 17, 18], [1, 9, 2, 3, 4, 5, 6, 11, 14, 15, 17, 18, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 1, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18], [8, 1, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all regex file and director i under file director i ..",
        "id": 136,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "[[ $(find . -maxdepth 1 -cmin +60 -name file) =  ]] && echo old",
        "text": "check if file name regex in number level down current director i who be e status be c hang more than time span ago be not find and print old if that 's true ..",
        "id": 137,
        "graph": {
            "nodes": "['ERROR', '[[', 'word', '=', 'old', '$(', ')', '&&', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'echo', 'word', '.', '-', 'max', 'depth', '<number>', '-', 'cm', 'in', '+', '<number>', '-', 'name', 'file', ']', ']', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 10, 10, 10, 11, 12, 12, 12, 13, 13, 14, 14, 15, 16, 17, 19]]",
            "sibling_edges": "[[1, 8, 6, 3, 5, 15, 17, 7, 19, 9, 10, 11, 12, 13, 14, 16, 21, 22, 25, 26, 28, 30], [5, 2, 3, 16, 19, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 22, 23, 26, 27, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 5, 35, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 6, 3, 33, 34, 7, 18], [5, 35, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 6, 3, 33, 34, 7, 18, 4]]"
        }
    },
    {
        "code": "find Path -name Regex | awk Program",
        "text": "find all file file in current folder and move them to a not h director i ..",
        "id": 138,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', 'program', 'find', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 6, 11, 11]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 11, 8, 14], [1, 11, 2, 3, 4, 5, 9, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 7, 8, 9, 10, 1, 14, 15], [7, 8, 9, 10, 1, 14, 15, 12]]"
        }
    },
    {
        "code": "find Path -type f ! -name Regex -exec gzip {} \\;",
        "text": "find all file excl ud file file in current director i tree and compress them with g zip ..",
        "id": 139,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '!', '-', 'name', 'regex', '-', 'exec', 'g', 'zip', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 16, 19, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 17, 20, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -name Regex | grep -n Regex",
        "text": "search for regex in all regex file under current director i and show match line with line number ..",
        "id": 140,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'n', 'regex', 'find', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 7, 12]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 9, 13], [1, 12, 2, 3, 4, 5, 6, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 9, 10, 11, 1, 17, 13, 14], [8, 9, 10, 11, 1, 17, 13, 14, 15]]"
        }
    },
    {
        "code": "su - jenkins -s /bin/bash",
        "text": "run a shell as user jenkin ..",
        "id": 141,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'jenkins', '-', 's', '/', 'bin', '/', 'bash', 'su']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 8, 10, 11, 12], [1, 2, 3, 4, 9, 11, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path Path",
        "text": "find all file in current folder which be read a bl ..",
        "id": 142,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'path', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "find Path | xargs -I {} grep Regex -l -s {}",
        "text": "search file from current director i tree for regex ..",
        "id": 143,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'word', '-', 'i', 'word', 'word', 'grep', 'regex', '-', 'l', '-', 's', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 5, 6, 6, 7, 7, 0, 0, 8, 10, 10, 13, 14, 21, 22]]",
            "sibling_edges": "[[2, 1, 8, 10, 3, 14, 4, 5, 6, 7, 11, 13, 17, 19, 21, 24], [1, 10, 2, 3, 13, 4, 5, 6, 7, 21, 12, 14, 18, 20, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 1, 24, 25, 11, 12, 26, 27, 15, 16, 17, 18, 19, 20, 28], [9, 1, 24, 25, 11, 12, 26, 27, 15, 16, 17, 18, 19, 20, 28, 29]]"
        }
    },
    {
        "code": "watch echo -e Regex",
        "text": "exe cut regex ever i time span ..",
        "id": 144,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'echo', '-', 'e', 'regex', 'watch']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "y=$(bash -c read -n 1 c; echo \\$c)",
        "text": "read a sing l char act from standard input and save to v aria bl regex ..",
        "id": 145,
        "graph": {
            "nodes": "['variable_assignment', 'variable_name', '=', 'y', '$(', ';', ')', 'word', 'word', 'word', 'number', 'word', 'word', 'word', '-', 'c', 'read', '-', 'n', '<number>', 'c', 'word', '\\\\', '$', 'c', 'bash', 'echo']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 8, 9, 9, 10, 11, 0, 12, 12, 12, 13, 21]]",
            "sibling_edges": "[[1, 2, 4, 11, 5, 12, 13, 7, 8, 9, 10, 21, 14, 17, 22, 23], [2, 4, 13, 5, 21, 6, 7, 8, 9, 10, 11, 12, 15, 18, 23, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 2, 4, 25, 14, 15, 16, 17, 18, 19, 20, 5, 26, 22, 23, 24], [2, 4, 25, 14, 15, 16, 17, 18, 19, 20, 5, 26, 22, 23, 24, 6]]"
        }
    },
    {
        "code": "mount | grep $( readlink -f File )",
        "text": "check if a drive with u uid regex be mount ..",
        "id": 146,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', '$(', ')', 'mount', 'grep', 'word', 'word', 'word', '-', 'f', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 8, 8, 9, 10, 10]]",
            "sibling_edges": "[[2, 1, 3, 4, 9, 10, 8, 11, 14], [1, 3, 4, 10, 5, 8, 9, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 1, 7, 4, 14, 15, 11, 12, 13], [1, 7, 4, 14, 15, 11, 12, 13, 5]]"
        }
    },
    {
        "code": "find Path -newer File",
        "text": "find all file in current director i which be mod if i after a file ..",
        "id": 147,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -daystart -mtime -Timespan",
        "text": "find all file that be mod if i in time span ..",
        "id": 148,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'day', 'start', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 13, 15, 16, 18], [1, 2, 3, 4, 5, 6, 10, 13, 14, 16, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "mkdir -p Directory",
        "text": "c re at in term i director i regex and regex as re qui r and c re at regex ..",
        "id": 149,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'p', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "cat filename | python -cfrom fileinput import input; print sum(map(int, input()))",
        "text": "ma them at sum all line in regex ..",
        "id": 150,
        "graph": {
            "nodes": "['program', ';', '|', ')', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '(', ')', 'word', 'filename', 'word', '-', 'cfrom', 'fileinput', 'import', 'input', 'print', 'sum', 'cat', 'python', 'word', '(', ')', 'map', 'word', '(', 'word', 'input', 'int', ',']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 5, 6, 7, 8, 9, 10, 13, 15, 0, 0, 0, 25, 0, 0, 0, 29, 31, 31]]",
            "sibling_edges": "[[8, 1, 12, 4, 2, 9, 10, 13, 15, 5, 6, 7, 11, 27, 16, 25, 26, 29, 30, 31, 33], [1, 9, 3, 2, 15, 10, 11, 4, 5, 6, 7, 8, 25, 12, 17, 26, 31, 30, 27, 29, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 14, 2, 24, 16, 17, 18, 19, 20, 1, 21, 22, 11, 28, 26, 33, 34, 32, 30, 27, 12], [14, 2, 24, 16, 17, 18, 19, 20, 1, 21, 22, 11, 28, 26, 33, 34, 32, 30, 27, 12, 3]]"
        }
    },
    {
        "code": "find Path -type d -name Regex -exec touch File \\;",
        "text": "c re at an e mp ti file in each director i name regex under current director i ..",
        "id": 151,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', '-', 'exec', 'touch', 'file', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9, 10]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 18, 22], [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 19, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path -daystart -mtime -Timespan",
        "text": "find all file that be mod if i exact time span ago ..",
        "id": 152,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'day', 'start', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 10, 11, 13], [1, 2, 3, 4, 8, 9, 11, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 6, 7, 8, 9, 10, 11, 12, 13], [6, 7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} grep -n Regex {}",
        "text": "search for regex in all file with file ext en under current director i tree and show match line with line number and file n be ..",
        "id": 153,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'n', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 8, 0, 0, 9, 14, 14, 17, 18, 23, 24]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 18, 6, 7, 8, 11, 15, 17, 20, 23, 26], [1, 14, 2, 3, 4, 5, 17, 6, 7, 8, 23, 12, 16, 18, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30], [10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30, 31]]"
        }
    },
    {
        "code": "find Path \\( -perm Permission -or -perm Permission \\) -print | diff File File",
        "text": "search for all file in en ti r file system which either permission or permission en a bl and find of diff of t he be e file with file file ..",
        "id": 154,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'perm', 'permission', '-', 'or', '-', 'perm', 'permission', '\\\\', ')', '-', 'print', 'word', 'file', 'file', 'find', 'diff']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 0, 11, 12, 13, 29]]",
            "sibling_edges": "[[10, 1, 13, 2, 3, 4, 5, 6, 7, 8, 9, 29, 11, 15, 17, 20, 22, 25, 27], [1, 29, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 18, 21, 23, 26, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 33, 30], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 33, 30, 31]]"
        }
    },
    {
        "code": "ping Regex | awk Program",
        "text": "print a time stamp for each success ping to regex ..",
        "id": 155,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', 'program', 'ping', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 9], [1, 6, 2, 3, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 1, 9, 10], [5, 1, 9, 10, 7]]"
        }
    },
    {
        "code": "find Path -not -name Regex -print0 | xargs -0 -I {} chown Regex {}",
        "text": "c hang owner of all file in director i tree regex excl ud file regex to regex ..",
        "id": 156,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'not', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'chow', 'n', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 6, 6, 6, 0, 7, 7, 8, 8, 0, 0, 9, 9, 10, 0, 0, 11, 21, 21, 26, 27, 31, 32]]",
            "sibling_edges": "[[6, 1, 11, 2, 3, 4, 5, 21, 7, 8, 27, 9, 10, 13, 15, 18, 19, 22, 24, 26, 28, 31, 34], [1, 21, 2, 3, 4, 5, 6, 7, 8, 26, 9, 10, 31, 14, 16, 19, 20, 23, 25, 27, 29, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 34, 35, 22, 23, 24, 25, 36, 37, 28, 29, 30, 38], [12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 34, 35, 22, 23, 24, 25, 36, 37, 28, 29, 30, 38, 39]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "print a list of all file file from current director i tree ..",
        "id": 157,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -size +Size -exec ls -l -h {} \\; | awk Program",
        "text": "find file on system that be big than size ..",
        "id": 158,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'size', '+', 'size', '-', 'exec', 'ls', '-', 'l', '-', 'h', 'word', 'word', '\\\\', ';', 'word', 'program', 'find', '{', '}', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 0, 0, 11, 11, 0, 12, 13, 29, 30, 33, 33]]",
            "sibling_edges": "[[11, 1, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 33, 15, 18, 20, 22, 25, 27, 29, 31, 38], [1, 33, 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 11, 12, 16, 19, 21, 23, 26, 28, 30, 32, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 31, 32, 1, 38, 39], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 31, 32, 1, 38, 39, 34]]"
        }
    },
    {
        "code": "find Path -path Regex -prune -or -type f",
        "text": "print list of file in current director i tree skip git file ..",
        "id": 159,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 13, 15, 17], [1, 2, 3, 4, 5, 6, 7, 11, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -type f ! -newer File ! -samefile Regex -exec rm {} +",
        "text": "find all regular file under regex director i tree which be mod if i be for file regex excl ud file regex and de let them ..",
        "id": 160,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '!', '-', 'new', 'file', '!', '-', 'same', 'file', 'regex', '-', 'exec', 'rm', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 8, 9, 10, 10, 11, 0, 0, 12, 13, 30, 31]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 31, 15, 19, 23, 24, 27, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 30, 12, 16, 20, 24, 25, 28, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 32]]"
        }
    },
    {
        "code": "tmux -2 new-session -s name another_script.sh $1",
        "text": "start t mu x session regex f orc t mu x to assum term in support number colour and exe cut def in script within ..",
        "id": 161,
        "graph": {
            "nodes": "['command', 'number', 'word', 'word', 'word', 'word', 'word', '-', '<number>', 'new', '-', 'session', '-', 's', 'name', 'another_script', '.', 'sh', '$', 'variable_name', 't', 'mu', 'x', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 0, 0, 6, 6, 6, 19]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 5, 7, 9, 10, 12, 15, 16, 18, 20, 21], [1, 2, 3, 4, 5, 18, 8, 10, 11, 13, 16, 17, 19, 21, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 21, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [21, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23]]"
        }
    },
    {
        "code": "find Path -name Regex -mtime +Timespan -print0 | xargs -0 -I {} rm {}",
        "text": "de let all file file under current director i that be old than time span ..",
        "id": 162,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'm', 'time', '+', 'timespan', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 0, 0, 11, 24, 24, 29, 30, 32, 33]]",
            "sibling_edges": "[[7, 1, 11, 2, 3, 4, 5, 6, 24, 8, 9, 30, 10, 13, 16, 17, 19, 21, 22, 25, 27, 29, 32, 35], [1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 29, 10, 32, 14, 17, 18, 20, 22, 23, 26, 28, 30, 33, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 35, 36, 25, 26, 27, 28, 37, 38, 31, 39], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 35, 36, 25, 26, 27, 28, 37, 38, 31, 39, 40]]"
        }
    },
    {
        "code": "dirname $( readlink -f File )",
        "text": "put ab sol ut director i path to current script to regex v aria bl ..",
        "id": 163,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'dir', 'name', 'word', 'word', 'word', '-', 'f', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 1, 1, 0, 0, 0, 6, 6, 7, 8, 8]]",
            "sibling_edges": "[[1, 2, 7, 4, 8, 6, 9, 12], [2, 8, 3, 5, 6, 7, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 2, 12, 13, 9, 10, 11], [5, 2, 12, 13, 9, 10, 11, 3]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan -print",
        "text": "find all file in file system which be mod if i in time span ..",
        "id": 164,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 10, 12], [1, 2, 3, 4, 8, 9, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -type f \\( -name Regex -or -name Regex \\)",
        "text": "find all shell script or perl file in current director i ..",
        "id": 165,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 18, 21, 23, 26], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 19, 22, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "wc File",
        "text": "print new l in word and byte count for each file in a current folder ..",
        "id": 166,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'wc']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "rmdir Directory Directory",
        "text": "r emo v e mp ti folder regex and regex ..",
        "id": 167,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'directory', 'directory', 'rm', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "echo -e $( ) | grep -v $( date +%Y-%m-%d ) | tail - Quantity",
        "text": "filter out current date in current time zone from regex and regex represent of current date and show last one ..",
        "id": 168,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', '-', 'e', '$(', ')', 'word', '-', 'v', '$(', ')', 'word', '-', 'quantity', 'echo', 'grep', 'word', 'tail', 'word', 'word', '+', '%', 'y', '-', '%', 'm', '-', '%', 'd', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 4, 4, 0, 0, 0, 5, 6, 7, 12, 0, 17, 0, 0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25]]",
            "sibling_edges": "[[11, 1, 16, 2, 7, 3, 12, 4, 17, 5, 8, 10, 24, 13, 15, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33], [1, 12, 2, 17, 3, 10, 4, 15, 5, 6, 9, 24, 11, 14, 25, 16, 22, 27, 28, 29, 30, 31, 32, 33, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 24, 11, 1, 21, 13, 14, 15, 35, 26, 27, 28, 29, 30, 31, 32, 33, 34, 16, 2, 23, 18], [8, 9, 10, 24, 11, 1, 21, 13, 14, 15, 35, 26, 27, 28, 29, 30, 31, 32, 33, 34, 16, 2, 23, 18, 19]]"
        }
    },
    {
        "code": "sed Program File | join -a Quantity -e Regex -j Regex -o 1.1,2.2 File File",
        "text": "for each line in file output line ad regex if same line appear in file and regex otherwis line in file be in same order as appear in file ..",
        "id": 169,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'program', 'file', 'word', '-', 'a', 'quantity', '-', 'e', 'regex', '-', 'j', 'regex', '-', 'o', '<number>', '.', '<number>', ',', '<number>', '.', '<number>', 'file', 'file', 's', 'ed', 'join']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 13, 14, 14, 17]]",
            "sibling_edges": "[[3, 1, 14, 2, 17, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 21, 24, 27, 29, 30, 31, 32, 33, 34, 38], [1, 17, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 22, 25, 28, 30, 31, 32, 33, 34, 35, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 39, 15, 16, 1, 40, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [39, 15, 16, 1, 40, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]]"
        }
    },
    {
        "code": "cd $( which Regex | xargs -I {} dirname {} )",
        "text": "c hang director i to director i contain exe cut file of command regex ..",
        "id": 170,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'cd', '|', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'i', 'word', 'word', 'dir', 'name', 'word', 'word', 'which', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 7, 7, 0, 0, 8, 8, 0, 0, 9, 11, 11, 14, 15, 18, 19]]",
            "sibling_edges": "[[1, 2, 19, 6, 5, 9, 11, 7, 15, 8, 12, 14, 16, 18, 21], [2, 9, 3, 5, 11, 6, 7, 14, 8, 18, 13, 15, 17, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 20, 10, 5, 21, 22, 12, 13, 23, 24, 16, 17, 25, 26], [2, 20, 10, 5, 21, 22, 12, 13, 23, 24, 16, 17, 25, 26, 3]]"
        }
    },
    {
        "code": "tail -n +Quantity File",
        "text": "print file start at line number ..",
        "id": 171,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', '+', 'quantity', 'file', 'tail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7], [1, 2, 3, 6, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "w | sort",
        "text": "print file in user in sort order ..",
        "id": 172,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'w', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 0, 2, 3]]",
            "sibling_edges": "[[2, 1], [1, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 1], [1, 5]]"
        }
    },
    {
        "code": "mount -o remount,rw -t yaffs2 Regex Regex",
        "text": "remount file on file with read and write per miss ..",
        "id": 173,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'o', 'remount', ',', 'rw', '-', 't', 'yaffs2', 'regex', 'regex', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 10, 11, 13], [1, 2, 3, 4, 5, 6, 9, 11, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "mkdir -p -v Directory",
        "text": "make director i to file as need and print a me sag for each c re at director i ..",
        "id": 174,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'p', '-', 'v', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 10], [1, 2, 3, 6, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 5, 6, 7, 8], [11, 5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "ssh -q $HOST [[ -f $FILE_PATH ]] && echo File exists || echo File does not exist;",
        "text": "check if regex exist on regex ..",
        "id": 175,
        "graph": {
            "nodes": "['program', ';', '||', '&&', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'do', 'not', 'exist', 'word', '-', 'q', '$', 'variable_name', 'word', 'word', '-', 'f', '$', 'variable_name', 'word', 'word', 'word', 'file', 'exist', 'echo', 'ssh', 'host', '[', '[', 'file_path', ']', ']', 'echo']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 0, 8, 8, 0, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 10, 11, 12, 17, 21, 22, 23, 27, 28, 29, 30]]",
            "sibling_edges": "[[7, 11, 2, 29, 3, 12, 4, 5, 6, 17, 8, 21, 23, 9, 27, 30, 10, 18, 20, 22, 24, 26, 28], [1, 2, 12, 3, 30, 4, 5, 6, 7, 8, 20, 22, 9, 26, 28, 10, 11, 19, 21, 23, 25, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 18, 19, 20, 35, 36, 37, 24, 25, 26, 38, 39, 40, 3, 41, 31, 32, 2, 33, 13, 14, 15, 16], [18, 19, 20, 35, 36, 37, 24, 25, 26, 38, 39, 40, 3, 41, 31, 32, 2, 33, 13, 14, 15, 16, 1]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -i Regex {} \\;",
        "text": "search file file from directory director i tree for to do line ..",
        "id": 176,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'i', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 20, 21]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 21, 11, 14, 17, 20, 22], [1, 2, 3, 4, 5, 6, 7, 20, 8, 12, 15, 18, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22, 23]]"
        }
    },
    {
        "code": "chmod +Permission File",
        "text": "add exe cut per miss to all file end in file ..",
        "id": 177,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '+', 'permission', 'file', 'ch', 'mod']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "od -A n -t d -N File File",
        "text": "print size from file as a sign decim val u and no address radix ..",
        "id": 178,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', 'n', '-', 't', 'd', '-', 'n', 'file', 'file', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 12, 15], [1, 2, 3, 4, 5, 6, 7, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "info -O Regex",
        "text": "open gawk info manual and goe to command l in option node ..",
        "id": 179,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'o', 'regex', 'info']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "tail -n $( grep -n Regex File | head -n Quantity | cut -d Regex -f Number ) File",
        "text": "print line contain term in and every th after in regex ..",
        "id": 180,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'n', '$(', ')', 'file', 'tail', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'regex', 'file', 'word', '-', 'n', 'quantity', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'grep', 'head', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 1, 1, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 13, 14, 0, 15, 15, 16, 0, 17, 17, 18, 19, 19, 20, 21, 26, 30]]",
            "sibling_edges": "[[3, 1, 7, 4, 6, 20, 14, 10, 16, 11, 21, 12, 13, 26, 15, 30, 17, 18, 19, 22, 27, 31, 34], [1, 6, 2, 5, 21, 7, 10, 26, 11, 30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 28, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 4, 5, 6, 37, 22, 23, 24, 25, 10, 38, 27, 28, 29, 11, 39, 31, 32, 33, 34, 35, 36, 7], [4, 5, 6, 37, 22, 23, 24, 25, 10, 38, 27, 28, 29, 11, 39, 31, 32, 33, 34, 35, 36, 7, 8]]"
        }
    },
    {
        "code": "git diff --name-only | xargs dirname | uniq",
        "text": "get list of folder contain file with c hang ..",
        "id": 181,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'diff', '--', 'name', '-', 'only', 'word', 'dir', 'name', 'word', 'git', 'x', 'arg', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 4, 0, 5, 5, 0, 6, 12, 12, 15, 15]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 3, 12, 8, 9, 10, 13, 17, 19], [1, 12, 2, 15, 3, 4, 5, 9, 10, 11, 14, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 1, 17, 18, 13, 14, 2, 19], [7, 8, 9, 10, 11, 1, 17, 18, 13, 14, 2, 19, 20]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} rm {}",
        "text": "r emo v all file file from file director i tree ..",
        "id": 182,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 0, 0, 7, 12, 12, 15, 16, 18, 19]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 16, 6, 9, 13, 15, 18, 21], [1, 12, 2, 3, 4, 5, 15, 6, 18, 10, 14, 16, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 1, 21, 22, 13, 14, 23, 24, 17, 25], [8, 9, 10, 11, 1, 21, 22, 13, 14, 23, 24, 17, 25, 26]]"
        }
    },
    {
        "code": "find . -depth -name *.zip -exec /usr/bin/unzip -n {} ; -delete",
        "text": "find all file file in current director i tree and unzip them de let archiv on success ..",
        "id": 183,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'depth', '-', 'name', '*', '.', 'zip', '-', 'exec', '/', 'us', 'r', '/', 'bin', '/', 'unzip', '-', 'n', 'word', 'word', 'word', 'find', '{', '}', '-', 'delete']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 9, 29, 30, 31, 31]]",
            "sibling_edges": "[[30, 1, 9, 2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 18, 20, 21, 22, 23, 24, 25, 27, 29, 35], [1, 31, 2, 3, 4, 5, 6, 7, 8, 29, 12, 14, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 30, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 1, 35], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 1, 35, 36]]"
        }
    },
    {
        "code": "find . -type f -exec perl -wnl -e /\\s1$/ and print {} +",
        "text": "search for regex regex in all file under current director i ..",
        "id": 184,
        "graph": {
            "nodes": "['program', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '$', 'word', '}', '+', 'word', '.', '-', 'type', 'f', '-', 'exec', 'perl', '-', 'wnl', '-', 'e', '/', '\\\\', 's1', '/', 'and', 'print', '{', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 8, 10, 10, 10, 10, 13]]",
            "sibling_edges": "[[8, 13, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 15, 18, 21, 23, 25, 26, 28, 29, 30], [9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 16, 19, 22, 24, 26, 27, 29, 30, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 9, 28, 29, 30, 31, 11], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 9, 28, 29, 30, 31, 11, 12]]"
        }
    },
    {
        "code": "find Path -name Regex -delete",
        "text": "de let all text file start with name regex in file system ..",
        "id": 185,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "mkdir $( seq -f \"$HOME/Labs/lab4a/folder%03g\" Number )",
        "text": "make number director i name file follow by a number width number pad number from number to number ..",
        "id": 186,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'mk', 'dir', 'word', 'raw_string', 'word', 'word', '-', 'f', \"'\", '$', 'home', '/', 'lab', '/', 'lab4a', '/', 'folder', '%', '03g', \"'\", 'number', 'seq']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 1, 1, 0, 0, 0, 0, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9]]",
            "sibling_edges": "[[1, 2, 8, 4, 9, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [2, 9, 3, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 2, 25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [5, 2, 25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 3]]"
        }
    },
    {
        "code": "find . -name *.JPG -exec convert {} -resize 50% {} ;",
        "text": "find all file file in current folder and resiz them to regex of origin size ..",
        "id": 187,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', '*', '.', 'jpg', '-', 'exec', 'convert', 'word', 'word', '-', 'resize', '<number>', '%', 'word', 'word', 'find', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 8, 0, 0, 9, 19, 20, 25, 26]]",
            "sibling_edges": "[[26, 9, 2, 3, 4, 5, 6, 20, 7, 8, 11, 13, 14, 16, 19, 21, 23, 25], [1, 2, 3, 4, 5, 6, 19, 7, 8, 25, 12, 14, 15, 17, 20, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 15, 16, 17, 18, 28, 29, 21, 22, 23, 24, 30, 31], [10, 11, 12, 13, 14, 15, 16, 17, 18, 28, 29, 21, 22, 23, 24, 30, 31, 1]]"
        }
    },
    {
        "code": "sort -n -k Number",
        "text": "num er sort standard input by second word of each line ..",
        "id": 188,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', '-', 'k', 'number', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7], [1, 2, 3, 6, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "od -a File",
        "text": "display a name char act dump of file ..",
        "id": 189,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'a', 'file', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\;",
        "text": "find all director i under current director i and set read write exe cut per miss for owner read exe cut per miss for group and other for those director i ..",
        "id": 190,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "ls -1 | wc -l",
        "text": "count all top level file in a current folder ..",
        "id": 191,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'word', 'word', '-', '<number>', 'word', '-', 'l', 'ls', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 2, 2, 0, 3, 3, 4, 7]]",
            "sibling_edges": "[[2, 1, 4, 7, 5, 8], [1, 7, 2, 3, 6, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 1, 11, 8], [5, 6, 1, 11, 8, 9]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -not -samefile Regex",
        "text": "find all file under current director i that be not same file as file ..",
        "id": 192,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'not', '-', 'same', 'file', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 10, 13, 15, 16], [1, 2, 3, 4, 5, 6, 10, 11, 14, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -name Regex -ls",
        "text": "list all file file in current director i tree ..",
        "id": 193,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find / -maxdepth 1 -xdev -type f -exec grep -Zli stringtofind {} + | parallel -0 sed '/./d' {}",
        "text": "de let all content form file that contain case in sen it regex regex in maximum number level down directory director i excl ud other partit ..",
        "id": 194,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'raw_string', 'word', '/', '-', 'max', 'depth', '<number>', '-', 'x', 'dev', '-', 'type', 'f', '-', 'exec', 'grep', '-', 'zli', 'stringtofind', 'word', 'word', '+', 'word', '-', '<number>', 's', 'ed', \"'\", '/', '.', '/', 'd', \"'\", 'word', 'word', 'find', '{', '}', 'parallel', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 0, 0, 12, 0, 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 0, 0, 16, 34, 35, 37, 48, 49]]",
            "sibling_edges": "[[12, 1, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 37, 13, 14, 15, 18, 19, 22, 23, 25, 28, 31, 34, 38, 40, 42, 43, 44, 45, 46, 48], [1, 37, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 34, 12, 13, 14, 15, 48, 19, 20, 23, 24, 26, 29, 32, 35, 39, 41, 43, 44, 45, 46, 47, 49]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[50, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 52, 36, 1, 53, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 52, 36, 1, 53, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55]]"
        }
    },
    {
        "code": "alias pwd=echo -n $(/bin/pwd) | pbcopy",
        "text": "set alia regex for command regex ..",
        "id": 195,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'pwd', '=', 'echo', '-', 'n', '$(', ')', 'word', 'alias', 'pbcopy', 'word', '/', 'bin', '/', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 2, 2, 2, 3, 3, 0, 0, 0, 4, 12, 0, 15, 15, 15, 15]]",
            "sibling_edges": "[[11, 1, 4, 2, 3, 5, 6, 8, 10, 15, 16, 17, 18], [1, 12, 2, 3, 10, 6, 7, 9, 15, 11, 17, 18, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 11, 1], [5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 11, 1, 14]]"
        }
    },
    {
        "code": "cp $( ls | grep -v Regex ) File",
        "text": "cop i all file in current director i except those contain regex to file ..",
        "id": 196,
        "graph": {
            "nodes": "['command', 'word', 'word', '$(', ')', 'file', 'cp', '|', 'word', 'word', 'word', 'word', '-', 'v', 'regex', 'ls', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 8, 8, 9, 10, 11]]",
            "sibling_edges": "[[2, 4, 3, 9, 10, 7, 11, 8, 12], [3, 1, 10, 4, 7, 11, 8, 9, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 15, 7, 16, 12, 13, 14, 4], [3, 15, 7, 16, 12, 13, 14, 4, 5]]"
        }
    },
    {
        "code": "find xargstest/ -name file?? | xargs myscript.sh",
        "text": "process all file match pattern regex ..",
        "id": 197,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'xargstest', '/', '-', 'name', 'file', '??', 'word', 'myscript', '.', 'sh', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 4, 0, 5, 5, 5, 6, 13, 13]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 13, 7, 9, 11, 14, 15, 18], [1, 13, 2, 3, 4, 5, 8, 10, 12, 15, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 7, 8, 9, 10, 11, 12, 1, 18, 19, 14, 15], [7, 8, 9, 10, 11, 12, 1, 18, 19, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -regex Regex",
        "text": "find all file file in current folder use regular express ..",
        "id": 198,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find -name Regex Path {} Path Path",
        "text": "c re at backup of all text file present in current folder ..",
        "id": 199,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'name', 'regex', 'path', 'word', 'word', 'path', 'path', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 0, 0, 4, 5, 6, 11, 12]]",
            "sibling_edges": "[[6, 1, 2, 3, 12, 4, 7, 11], [1, 2, 3, 11, 4, 5, 8, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 16, 17, 13], [7, 8, 9, 10, 16, 17, 13, 14]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\;",
        "text": "c hang per miss to number for all director i in file director i tree ..",
        "id": 200,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -type f -size +Size -print0 | xargs -0 -I {} rm {}",
        "text": "loc at l arg file in directory for regex ..",
        "id": 201,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'size', '+', 'size', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 0, 0, 11, 23, 23, 28, 29, 31, 32]]",
            "sibling_edges": "[[7, 1, 11, 2, 3, 4, 5, 6, 23, 8, 9, 29, 10, 13, 16, 18, 20, 21, 24, 26, 28, 31, 34], [1, 23, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 31, 14, 17, 19, 21, 22, 25, 27, 29, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 34, 35, 24, 25, 26, 27, 36, 37, 30, 38], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 34, 35, 24, 25, 26, 27, 36, 37, 30, 38, 39]]"
        }
    },
    {
        "code": "find Path -type f -name Regex | cut -c Number | nl",
        "text": "r emo v first number char act of each file file n be in file director i tree and number output ..",
        "id": 202,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'word', '-', 'c', 'number', 'word', 'find', 'cut', 'nl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 0, 8, 8, 9, 0, 10, 18, 22]]",
            "sibling_edges": "[[7, 1, 9, 2, 10, 3, 4, 5, 6, 18, 8, 12, 15, 19], [1, 18, 2, 22, 3, 4, 5, 6, 7, 8, 9, 13, 16, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 11, 12, 13, 14, 15, 16, 17, 1, 24, 19, 20, 21, 2], [11, 12, 13, 14, 15, 16, 17, 1, 24, 19, 20, 21, 2, 25]]"
        }
    },
    {
        "code": "yes | rm -i File",
        "text": "r emo v all file and director i in current director i by answer with regex to all prompt ..",
        "id": 203,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'i', 'file', 'yes', 'rm']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 0, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[4, 1, 5, 2, 6], [1, 5, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 1, 10, 6, 7], [1, 10, 6, 7, 8]]"
        }
    },
    {
        "code": "find . -name *.doc | while read i; do antiword -i 1 ${i} >${i/doc/txt} && rm ${i}; done",
        "text": "convert file file in current director i tree to file format and r emo v origin file ..",
        "id": 204,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'while', ';', 'word', '.', '-', 'name', '*', '.', 'doc', 'word', 'do', ';', 'done', 'find', 'word', 'i', '&&', 'read', 'word', 'number', '>', 'word', '${', 'variable_name', '}', 'word', '-', 'i', '<number>', '${', 'variable_name', '}', '${', 'variable_name', '/', 'regex', '/', 'word', '}', 'rm', 'i', 'antiword', 'i', 'i', 'doc', 'txt']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 0, 0, 0, 0, 7, 0, 14, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 23, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 28, 30, 35, 38, 40, 42]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 5, 14, 6, 9, 11, 12, 19, 15, 29, 16, 43, 21, 36, 26, 30, 23, 24, 25, 27, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42], [1, 5, 2, 3, 4, 19, 6, 15, 10, 12, 13, 14, 30, 16, 17, 21, 26, 25, 27, 23, 24, 34, 37, 28, 29, 32, 35, 36, 38, 39, 40, 41, 42, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 1, 5, 22, 20, 6, 15, 46, 31, 32, 33, 34, 47, 36, 25, 37, 48, 39, 49, 41, 50, 43, 21, 44, 27, 45, 29, 16], [8, 9, 10, 11, 12, 13, 1, 5, 22, 20, 6, 15, 46, 31, 32, 33, 34, 47, 36, 25, 37, 48, 39, 49, 41, 50, 43, 21, 44, 27, 45, 29, 16, 17]]"
        }
    },
    {
        "code": "rsync -r -t -u -v File File",
        "text": "synchron file with file in directory if file be new ..",
        "id": 205,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 't', '-', 'u', '-', 'v', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 10, 12, 14, 18], [1, 2, 3, 4, 5, 6, 9, 11, 13, 15, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 16], [19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -type f -exec basename {} \\;",
        "text": "find all file in file and print on li file n be ..",
        "id": 206,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'base', 'name', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 0, 0, 6, 6, 7, 16, 17]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 17, 9, 12, 14, 16, 18], [1, 2, 3, 4, 5, 16, 6, 10, 13, 15, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18], [8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18, 19]]"
        }
    },
    {
        "code": "find Path -type d -name Regex",
        "text": "find all director i under current director i who be e name be number char act long ..",
        "id": 207,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -type f -mtime +Timespan -mtime -Timespan -exec rm {} \\;",
        "text": "find all file that be mod if i between number to time span ago in home director i and de let ..",
        "id": 208,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'm', 'time', '+', 'timespan', '-', 'm', 'time', '-', 'timespan', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 0, 0, 10, 10, 11, 29, 30]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 30, 13, 16, 17, 19, 21, 22, 24, 26, 29, 31], [1, 2, 3, 4, 5, 6, 7, 8, 9, 29, 10, 14, 17, 18, 20, 22, 23, 25, 27, 30, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 31], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 31, 32]]"
        }
    },
    {
        "code": "find Path -ctime Timespan -type f",
        "text": "find all file that be c hang exact time span ago ..",
        "id": 209,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'c', 'time', 'timespan', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12], [1, 2, 3, 4, 5, 9, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan -print",
        "text": "find all file and director i under file director i tree that not be mod if i in time span ..",
        "id": 210,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 10, 12], [1, 2, 3, 4, 8, 9, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "hostname -I | awk Program",
        "text": "print ip address of host name ..",
        "id": 211,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '-', 'i', 'word', 'program', 'host', 'name', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 2, 2, 0, 3, 4, 4, 7, 7]]",
            "sibling_edges": "[[2, 1, 4, 7, 5, 9, 11], [1, 7, 2, 3, 6, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 1, 11, 12], [10, 5, 6, 1, 11, 12, 8]]"
        }
    },
    {
        "code": "tmux",
        "text": "open new t mu x session ..",
        "id": 212,
        "graph": {
            "nodes": "['word', 't', 'mu', 'x']",
            "base_edges": "[[1, 2, 3], [0, 0, 0]]",
            "sibling_edges": "[[1, 2], [2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 2], [2, 3]]"
        }
    },
    {
        "code": "find Path -nouser | xargs -0 -I {} rm {}",
        "text": "de let all file not own by valid user ..",
        "id": 213,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'no', 'user', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 0, 4, 4, 5, 5, 0, 0, 6, 0, 0, 7, 12, 12, 17, 18, 20, 21]]",
            "sibling_edges": "[[3, 1, 7, 2, 12, 4, 5, 18, 6, 9, 10, 13, 15, 17, 20, 23], [1, 12, 2, 3, 4, 5, 17, 6, 20, 10, 11, 14, 16, 18, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 8, 9, 10, 11, 1, 23, 24, 13, 14, 15, 16, 25, 26, 19, 27], [8, 9, 10, 11, 1, 23, 24, 13, 14, 15, 16, 25, 26, 19, 27, 28]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file and director i under current director i ..",
        "id": 214,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "groups Regex | grep -q Regex",
        "text": "return number if user regex belong to group regex ..",
        "id": 215,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'q', 'regex', 'group', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 8], [1, 7, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 1, 12, 8, 9], [6, 1, 12, 8, 9, 10]]"
        }
    },
    {
        "code": "uname -v | grep -o Regex",
        "text": "retriev on li build number of current kernel ie regex ..",
        "id": 216,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'v', 'word', '-', 'o', 'regex', 'u', 'name', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 2, 2, 0, 3, 3, 4, 5, 5, 8]]",
            "sibling_edges": "[[2, 1, 5, 8, 3, 6, 9, 12], [1, 8, 2, 3, 4, 7, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 13, 6, 7, 1, 14, 9, 10], [13, 6, 7, 1, 14, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -type f -exec ln -s {} \\;",
        "text": "c re at s ym link to all file file with same name in current director i ..",
        "id": 217,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ln', '-', 's', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "cat File | rev | cut -d Regex -f Number | rev",
        "text": "get second to last comma se par field of each line in file ..",
        "id": 218,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'cat', 'rev', 'cut', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 5, 6, 7, 7, 8, 0, 9, 11, 12, 19]]",
            "sibling_edges": "[[4, 1, 11, 2, 8, 3, 9, 12, 5, 6, 7, 13, 16], [1, 11, 2, 12, 3, 19, 4, 5, 6, 7, 8, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 10, 1, 21, 2, 22, 13, 14, 15, 16, 17, 18, 3], [10, 1, 21, 2, 22, 13, 14, 15, 16, 17, 18, 3, 23]]"
        }
    },
    {
        "code": "n_jobs=`expr $(jobs | wc -l)`",
        "text": "print number of job ..",
        "id": 219,
        "graph": {
            "nodes": "['variable_assignment', 'variable_name', '=', 'n_jobs', '`', '`', 'word', '$(', ')', 'expr', '|', 'word', 'word', 'word', '-', 'l', 'job', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 11, 11, 12, 13]]",
            "sibling_edges": "[[1, 2, 4, 8, 6, 7, 11, 12, 10, 13, 14], [2, 4, 6, 5, 7, 12, 8, 10, 13, 11, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 2, 4, 9, 7, 16, 10, 17, 14, 15, 8], [2, 4, 9, 7, 16, 10, 17, 14, 15, 8, 5]]"
        }
    },
    {
        "code": "rsync -a -v File File",
        "text": "archiv director i specif i by v aria bl regex to current director i ..",
        "id": 220,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'v', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 12], [1, 2, 3, 4, 7, 9, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 13, 6, 7, 8, 9, 10], [13, 6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "ls -l -R File | tee -a File",
        "text": "print long recur list of all content of a root folder append output to file ..",
        "id": 221,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'l', '-', 'r', 'file', 'word', '-', 'a', 'file', 'ls', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 0, 5, 5, 6, 7, 13]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 13, 5, 8, 10, 14], [1, 13, 2, 3, 4, 5, 6, 9, 11, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 1, 18, 14, 15], [8, 9, 10, 11, 12, 1, 18, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -type f -maxdepth Quantity | more",
        "text": "list all en tr i name contain direct by director i regex in current director i pa us for user input at each page ..",
        "id": 222,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'max', 'depth', 'quantity', 'word', 'find', 'more']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 0, 7, 16]]",
            "sibling_edges": "[[6, 1, 7, 2, 3, 4, 5, 9, 12, 13], [1, 16, 2, 3, 4, 5, 6, 10, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15, 1], [8, 9, 10, 11, 12, 13, 14, 15, 1, 18]]"
        }
    },
    {
        "code": "cat File | tr -c -d Regex | head -c Quantity",
        "text": "print first number hex a dec im char act from file ..",
        "id": 223,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'c', '-', 'd', 'regex', 'word', '-', 'c', 'quantity', 'cat', 'tr', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 5, 6, 0, 7, 7, 8, 9, 11, 17]]",
            "sibling_edges": "[[3, 1, 6, 2, 9, 11, 4, 5, 17, 7, 12, 14, 18], [1, 11, 2, 17, 3, 4, 5, 6, 7, 8, 13, 15, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 1, 22, 12, 13, 14, 15, 16, 2, 23, 18, 19], [10, 1, 22, 12, 13, 14, 15, 16, 2, 23, 18, 19, 20]]"
        }
    },
    {
        "code": "diff -u Quantity File File",
        "text": "com par regex and file line by line output number line of un if i context and print file function c hang be in ..",
        "id": 224,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'u', 'quantity', 'file', 'file', 'diff']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6], [1, 2, 3, 4, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "df -h File",
        "text": "print file system disk space u sag in human read a bl format of root file system ..",
        "id": 225,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'h', 'file', 'df']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "chown -R Regex File File",
        "text": "recur c hang owner and group of file and number to regex ..",
        "id": 226,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 11], [1, 2, 3, 4, 7, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 6, 7, 8, 9], [12, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -print0 | xargs -0 -I {} sed -i -e Program {}",
        "text": "rep lac occur r of regex with regex on c per each line of file file from current director i tree ..",
        "id": 227,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', '-', 'e', 'program', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 10, 11, 11, 12, 12, 13, 0, 0, 14, 25, 25, 30, 31, 39, 40]]",
            "sibling_edges": "[[7, 1, 14, 2, 3, 4, 5, 6, 25, 8, 9, 31, 10, 11, 12, 13, 16, 19, 22, 23, 26, 28, 30, 32, 34, 36, 39, 42], [1, 25, 2, 3, 4, 5, 6, 7, 8, 9, 30, 10, 11, 12, 13, 39, 17, 20, 23, 24, 27, 29, 31, 33, 35, 37, 40, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 42, 43, 26, 27, 28, 29, 44, 45, 32, 33, 34, 35, 36, 37, 38, 46], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 42, 43, 26, 27, 28, 29, 44, 45, 32, 33, 34, 35, 36, 37, 38, 46, 47]]"
        }
    },
    {
        "code": "ps x -o %p %r %y %x %c ",
        "text": "show all process that a tti in format regex ..",
        "id": 228,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'x', '-', 'o', '%', 'p', '%', 'r', '%', 'y', '%', 'x', '%', 'c', 'ps']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 12, 14, 16, 18, 20], [1, 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]]"
        }
    },
    {
        "code": "sudo yum clean all",
        "text": "r emo v all ca ch yum data from a system ..",
        "id": 229,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'yum', 'clean', 'all', 'su', 'do']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 8], [1, 2, 3, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 9, 5, 6], [9, 5, 6, 7]]"
        }
    },
    {
        "code": "find Path -name Regex | grep -v Regex | grep -v Regex | grep -v Regex",
        "text": "list all java script file which whole name not contain excludeddir or regex or regex ..",
        "id": 230,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'v', 'regex', 'word', '-', 'v', 'regex', 'word', '-', 'v', 'regex', 'find', 'grep', 'grep', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 0, 7, 7, 8, 0, 9, 9, 10, 0, 11, 11, 12, 13, 18, 22, 26]]",
            "sibling_edges": "[[6, 1, 8, 2, 10, 3, 13, 4, 5, 18, 7, 22, 9, 26, 11, 15, 19, 23, 27], [1, 18, 2, 22, 3, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 20, 24, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 14, 15, 16, 17, 1, 31, 19, 20, 21, 2, 32, 23, 24, 25, 3, 33, 27, 28], [14, 15, 16, 17, 1, 31, 19, 20, 21, 2, 32, 23, 24, 25, 3, 33, 27, 28, 29]]"
        }
    },
    {
        "code": "echo Regex | tr Regex Regex | tail -n Quantity",
        "text": "print last space se par word from regex ..",
        "id": 231,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', 'regex', 'regex', 'word', '-', 'n', 'quantity', 'echo', 'tr', 'tail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 5, 0, 6, 6, 7, 8, 10, 13]]",
            "sibling_edges": "[[3, 1, 5, 2, 8, 10, 4, 13, 6, 14], [1, 10, 2, 13, 3, 4, 5, 6, 7, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 9, 1, 18, 11, 12, 2, 19, 14, 15], [9, 1, 18, 11, 12, 2, 19, 14, 15, 16]]"
        }
    },
    {
        "code": "objdump -x `which tail`",
        "text": "display all avail header inform for exe cut file of command regex ..",
        "id": 232,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'x', '`', '`', 'objdump', 'word', 'word', 'tail', 'which']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 1, 1, 0, 0, 2, 0, 0, 8, 9]]",
            "sibling_edges": "[[2, 1, 3, 5, 8, 9], [1, 5, 4, 9, 6, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 3, 4, 5, 11, 10], [3, 4, 5, 11, 10, 6]]"
        }
    },
    {
        "code": "find Path \\( ! -name Regex -and ! -name Regex \\) | xargs -I {} cp -p {} File",
        "text": "find file not match pattern regex and regex in name under regex and cop i them to regex ..",
        "id": 233,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '!', '-', 'name', 'regex', '-', 'and', '!', '-', 'name', 'regex', '\\\\', ')', 'word', '-', 'i', 'word', 'word', 'cp', '-', 'p', 'word', 'word', 'file', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 0, 12, 12, 0, 0, 13, 14, 14, 0, 0, 15, 16, 32, 32, 35, 36, 40, 41]]",
            "sibling_edges": "[[11, 1, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 12, 36, 13, 14, 41, 18, 21, 24, 27, 30, 33, 35, 38, 40, 44], [1, 32, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 35, 13, 14, 40, 15, 19, 22, 25, 28, 31, 34, 36, 39, 41, 45]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 44, 45, 33, 34, 46, 47, 37, 38, 39, 48, 49], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 44, 45, 33, 34, 46, 47, 37, 38, 39, 48, 49, 42]]"
        }
    },
    {
        "code": "find Path -type f -mmin -Quantity -print0 | xargs -r -0 -I {} ls -l {}",
        "text": "list all regular file from current director i tree that be mod if i le than time span ago ..",
        "id": 234,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'mm', 'in', '-', 'quantity', '-', 'print', '<number>', 'word', '-', 'r', '-', '<number>', '-', 'i', 'word', 'word', 'ls', '-', 'l', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 7, 7, 7, 0, 8, 8, 9, 9, 10, 10, 0, 0, 11, 12, 12, 0, 0, 13, 26, 26, 33, 34, 38, 39]]",
            "sibling_edges": "[[7, 1, 13, 2, 3, 4, 5, 6, 26, 8, 9, 10, 34, 11, 12, 15, 18, 19, 21, 23, 24, 27, 29, 31, 33, 36, 38, 41], [1, 26, 2, 3, 4, 5, 6, 7, 8, 9, 10, 33, 11, 12, 38, 16, 19, 20, 22, 24, 25, 28, 30, 32, 34, 37, 39, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[40, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 41, 42, 27, 28, 29, 30, 31, 32, 43, 44, 35, 36, 37, 45], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 41, 42, 27, 28, 29, 30, 31, 32, 43, 44, 35, 36, 37, 45, 46]]"
        }
    },
    {
        "code": "find Path -name Regex -printf \"%p\\0\" -printf \"newdir/%P\\0\" | xargs -0 -L Quantity -I {} cp -n {}",
        "text": "cop i all file name file in director i regex to director i regex ..",
        "id": 235,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'raw_string', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'f', \"'\", '%', 'p', '\\\\', '<number>', \"'\", '-', 'print', 'f', \"'\", 'newdir', '/', '%', 'p', '\\\\', '<number>', \"'\", 'word', '-', '<number>', '-', 'l', 'quantity', '-', 'i', 'word', 'word', 'cp', '-', 'n', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 0, 9, 9, 10, 10, 11, 12, 12, 0, 0, 13, 14, 14, 0, 0, 15, 40, 40, 48, 49, 53, 54]]",
            "sibling_edges": "[[8, 1, 15, 2, 3, 4, 5, 6, 7, 40, 9, 10, 11, 12, 49, 13, 14, 17, 20, 21, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 43, 46, 48, 51, 53, 56], [1, 40, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 48, 13, 14, 53, 18, 21, 22, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 42, 44, 47, 49, 52, 54, 57]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[55, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 1, 56, 57, 41, 42, 43, 44, 45, 46, 47, 58, 59, 50, 51, 52, 60], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 1, 56, 57, 41, 42, 43, 44, 45, 46, 47, 58, 59, 50, 51, 52, 60, 61]]"
        }
    },
    {
        "code": "find Path -user Regex",
        "text": "find all file and director i under current director i tree that belong to user regex ..",
        "id": 236,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -exec echo {} +",
        "text": "find all file and director i under current director i and print path ..",
        "id": 237,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'echo', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 1, 2, 2, 3, 0, 0, 4, 5, 10, 11]]",
            "sibling_edges": "[[5, 1, 2, 3, 11, 7, 10], [1, 2, 3, 10, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 14, 15], [6, 7, 8, 9, 14, 15, 12]]"
        }
    },
    {
        "code": "find Path -type f -perm -Permission",
        "text": "find file with number per miss in en ti r file system ..",
        "id": 238,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 13], [1, 2, 3, 4, 5, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "tar -I File -c -f File File",
        "text": "c re at an archiv use regex as a compress program ..",
        "id": 239,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'i', 'file', '-', 'c', '-', 'f', 'file', 'file', 'tar']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 11, 13], [1, 2, 3, 4, 5, 6, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": " | md5",
        "text": "find regex of number ..",
        "id": 240,
        "graph": {
            "nodes": "['program', '|', 'word', 'md5']",
            "base_edges": "[[1, 2, 3], [0, 0, 2]]",
            "sibling_edges": "[[1], [2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1], [3]]"
        }
    },
    {
        "code": "find Path -size -Size",
        "text": "find all file in current folder which be le than size ..",
        "id": 241,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'size', '-', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 8], [1, 2, 3, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "basename Regex Regex",
        "text": "r emo v contain director i and suffix file from specif i path output result ..",
        "id": 242,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'regex', 'base', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "rsync --exclude Regex --exclude Regex File File",
        "text": "error need to add regex or regex for recur cop i ..",
        "id": 243,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '--', 'exclude', 'regex', '--', 'exclude', 'regex', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 6, 7, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 11, 16], [1, 2, 3, 4, 5, 6, 9, 12, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 17, 8, 9, 10, 11, 12, 13, 14], [17, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "mv $( ls ) File",
        "text": "move all file and director i in current director i to file ..",
        "id": 244,
        "graph": {
            "nodes": "['command', 'word', 'word', '$(', ')', 'file', 'mv', 'word', 'ls']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 1, 2, 0, 7]]",
            "sibling_edges": "[[2, 4, 3, 7], [3, 1, 7, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 8, 4], [3, 8, 4, 5]]"
        }
    },
    {
        "code": "find Path -type f | sort | tee File",
        "text": "find all file under file and redirect sort list to myfil ..",
        "id": 245,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', 'word', 'file', 'find', 'sort', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 0, 6, 7, 12, 13]]",
            "sibling_edges": "[[5, 1, 12, 2, 7, 3, 4, 13, 9], [1, 12, 2, 13, 3, 4, 5, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 8, 9, 10, 11, 1, 16, 2, 17], [8, 9, 10, 11, 1, 16, 2, 17, 14]]"
        }
    },
    {
        "code": "alias rmc=find . -iname core -exec rm {} \\;",
        "text": "assign alia rec to a find command that de let all core dump file in current director i and below ..",
        "id": 246,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'rmc', '=', 'find', '.', '-', 'i', 'name', 'core', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'alias', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 6, 0, 0, 7, 7, 8, 20, 21]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 21, 9, 10, 13, 14, 17, 20, 22], [1, 2, 3, 4, 5, 6, 20, 7, 10, 11, 14, 15, 18, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22, 23]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search file director i tree for file file ..",
        "id": 247,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "grep -r -n -w Regex",
        "text": "recur find regex in file from current folder and print match string with number on li if match whole word ..",
        "id": 248,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'n', '-', 'w', 'regex', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 10], [1, 2, 3, 4, 7, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "display all text file in home folder ..",
        "id": 249,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find . -name build.xml -exec ant -f {} clean-all ;",
        "text": "find file file in current folder and run ant clean al ..",
        "id": 250,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', 'build', '.', 'xml', '-', 'exec', 'ant', '-', 'f', 'word', 'word', 'clean', '-', 'all', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 0, 0, 8, 8, 8, 9, 21, 22]]",
            "sibling_edges": "[[8, 9, 2, 3, 4, 5, 6, 7, 22, 11, 13, 14, 16, 19, 21, 23, 24], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 14, 15, 17, 20, 22, 24, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 23, 24, 25], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 23, 24, 25, 1]]"
        }
    },
    {
        "code": "find . -iname *.jpg -print0 | xargs -I{} -0 -r convert -resize 300x300 {} $outdir/{}",
        "text": "resiz all file i mag in current folder to size regex ..",
        "id": 251,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', '.', '-', 'i', 'name', '*', '.', 'jpg', '-', 'print', '<number>', 'word', 'word', 'word', 'word', '-', '<number>', '-', 'r', 'convert', '-', 'resize', '300x300', 'word', 'word', 'word', 'word', 'word', 'find', 'x', 'arg', '-', 'i', '{', '}', '{', '}', '$', 'variable_name', '/', '{', '}', 'outdir']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 0, 0, 0, 0, 6, 6, 7, 7, 8, 9, 9, 10, 0, 0, 0, 0, 0, 11, 22, 22, 23, 23, 24, 25, 34, 35, 0, 0, 36, 37, 38, 49]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 22, 25, 6, 7, 8, 9, 10, 35, 13, 14, 16, 17, 19, 20, 23, 24, 26, 28, 31, 34, 49, 36, 37, 40, 42, 48], [1, 22, 2, 3, 4, 5, 23, 6, 7, 8, 9, 10, 34, 48, 14, 15, 17, 18, 20, 21, 24, 25, 27, 29, 32, 35, 36, 37, 38, 41, 43, 49]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 40, 41, 42, 43, 44, 45, 26, 27, 28, 29, 30, 31, 32, 33, 46, 47, 48, 53, 50, 51], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 40, 41, 42, 43, 44, 45, 26, 27, 28, 29, 30, 31, 32, 33, 46, 47, 48, 53, 50, 51, 52]]"
        }
    },
    {
        "code": "find Path -name Regex -type f | wc -l",
        "text": "find all file file in current folder and display count ..",
        "id": 252,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', 'word', '-', 'l', 'find', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 0, 7, 7, 8, 16]]",
            "sibling_edges": "[[6, 1, 8, 2, 3, 4, 5, 16, 10, 13, 17], [1, 16, 2, 3, 4, 5, 6, 7, 11, 14, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 1, 20, 17], [9, 10, 11, 12, 13, 14, 15, 1, 20, 17, 18]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec rm {} File \\;",
        "text": "recur r emo v all file with name like file in file folder ..",
        "id": 253,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'rm', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 9, 9, 10, 21, 22]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 15, 18, 21, 24], [1, 2, 3, 4, 5, 6, 7, 21, 8, 9, 13, 16, 19, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 23, 24], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -type f -size +Size",
        "text": "find regular file large than size in current director i tree ..",
        "id": 254,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'size', '+', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 13], [1, 2, 3, 4, 5, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "echo $( seq Number Number )",
        "text": "print space se par list of number from regex to regex ..",
        "id": 255,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'echo', 'word', 'word', 'word', 'number', 'number', 'seq']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 0, 0, 0, 5, 6, 7]]",
            "sibling_edges": "[[1, 2, 6, 7, 5], [2, 7, 3, 5, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 10, 8, 9], [2, 10, 8, 9, 3]]"
        }
    },
    {
        "code": "watch -n Quantity cat File",
        "text": "exe cut file ever i time span ..",
        "id": 256,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', 'cat', 'file', 'watch']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6], [1, 2, 3, 4, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find . -type f -mtime +7 | tee compressedP.list | parallel compress",
        "text": "compress in parallel regular file in current director i tree that be last mod if i more than time span ago ..",
        "id": 257,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'm', 'time', '+', '<number>', 'word', 'compressedp', '.', 'list', 'word', 'compress', 'find', 'tee', 'parallel']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 7, 7, 0, 8, 8, 8, 0, 9, 10, 20, 24]]",
            "sibling_edges": "[[7, 1, 8, 2, 10, 3, 4, 5, 6, 20, 24, 12, 15, 16, 18, 21, 22], [1, 20, 2, 24, 3, 4, 5, 6, 7, 8, 9, 13, 16, 17, 19, 22, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 27, 21, 22, 23, 2, 28], [11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 27, 21, 22, 23, 2, 28, 25]]"
        }
    },
    {
        "code": "find Path -type d -name Regex -exec rsync -a -v -R {} File \\; -exec rm -r -f File \\;",
        "text": "search all of file for an i director i name regex for each director i find cop i it to file pre serv full path and attr i but r emo v it ..",
        "id": 258,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', '-', 'exec', 'r', 'sync', '-', 'a', '-', 'v', '-', 'r', 'word', 'word', 'file', '\\\\', ';', '-', 'exec', 'rm', '-', 'r', '-', 'f', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 0, 0, 11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 18, 18, 19, 37, 38]]",
            "sibling_edges": "[[19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 38, 11, 12, 13, 14, 15, 16, 17, 21, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 50], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 37, 11, 12, 13, 14, 15, 16, 17, 18, 22, 25, 28, 30, 32, 34, 36, 38, 41, 43, 46, 48, 51]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[52, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 53, 54, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 53, 54, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -iname Regex",
        "text": "find all file and director i with case in sen it name pattern regex that be loc at in minimum number level down current director i ..",
        "id": 259,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12, 13], [1, 2, 3, 4, 5, 9, 10, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -print0 | xargs -0 -I {} mv -t Directory {}",
        "text": "move all file and director i under current director i to destdir ..",
        "id": 260,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'mv', '-', 't', 'directory', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 0, 4, 4, 5, 5, 0, 0, 6, 7, 7, 8, 0, 0, 9, 14, 14, 19, 20, 25, 26]]",
            "sibling_edges": "[[3, 1, 9, 2, 14, 4, 5, 20, 6, 7, 8, 11, 12, 15, 17, 19, 22, 25, 28], [1, 14, 2, 3, 4, 5, 19, 6, 7, 8, 25, 12, 13, 16, 18, 20, 23, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 1, 28, 29, 15, 16, 17, 18, 30, 31, 21, 22, 23, 24, 32], [10, 11, 12, 13, 1, 28, 29, 15, 16, 17, 18, 30, 31, 21, 22, 23, 24, 32, 33]]"
        }
    },
    {
        "code": "cat $(find /usr/share/doc/ -name *.txt) | zegrep -ic \\<exception\\>",
        "text": "count number of match for regex regex in all file file under directory director i ..",
        "id": 261,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '$(', ')', 'word', '-', 'ic', '\\\\', '<', 'exception', '\\\\', '>', 'cat', 'word', 'word', 'word', 'zegrep', 'word', '/', 'us', 'r', '/', 'share', '/', 'doc', '/', '-', 'name', '*', '.', 'txt', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 4, 0, 0, 0, 7, 0, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 18, 18, 18, 20]]",
            "sibling_edges": "[[6, 1, 4, 7, 2, 5, 18, 8, 10, 11, 12, 13, 20, 16, 17, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32], [1, 7, 5, 2, 3, 20, 6, 9, 11, 12, 13, 14, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 5, 34, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 6, 1, 19, 8, 9, 10, 11, 12, 13], [5, 34, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 6, 1, 19, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "echo Regex | readlink File",
        "text": "write regex to real path of current command 's standard output ..",
        "id": 262,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', 'file', 'echo', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 9], [1, 6, 2, 3, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 1, 9, 10], [5, 1, 9, 10, 7]]"
        }
    },
    {
        "code": "curl Regex Regex | tr -d Regex",
        "text": "get director i list of url regex and save them to v aria bl regex by de let regex char act ..",
        "id": 263,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'regex', 'regex', 'word', '-', 'd', 'regex', 'curl', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 6, 9]]",
            "sibling_edges": "[[3, 1, 6, 2, 9, 4, 10], [1, 9, 2, 3, 4, 5, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 7, 8, 1, 14, 10, 11], [7, 8, 1, 14, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -name Regex -print",
        "text": "find all file file in file system ..",
        "id": 264,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "cat File | grep Regex | cut -f Number -d Regex",
        "text": "find all string match pattern regex in regex file and print rest of string after regex ..",
        "id": 265,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', 'regex', 'word', '-', 'f', 'number', '-', 'd', 'regex', 'cat', 'grep', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 5, 6, 7, 7, 8, 9, 11, 13]]",
            "sibling_edges": "[[3, 1, 4, 2, 9, 11, 13, 5, 6, 7, 14, 17], [1, 11, 2, 13, 3, 4, 5, 6, 7, 8, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 10, 1, 21, 12, 2, 22, 14, 15, 16, 17, 18], [10, 1, 21, 12, 2, 22, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "ping Regex -I Regex -c Quantity -w Timespan",
        "text": "send at most number ping request to file with a timeout of time span on inter fa c regex ..",
        "id": 266,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', '-', 'i', 'regex', '-', 'c', 'quantity', '-', 'w', 'timespan', 'ping']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 13, 16], [1, 2, 3, 4, 5, 6, 7, 11, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} \\;",
        "text": "find all file under regex director i and set read writ per miss for owner and group and no per miss for other for those file ..",
        "id": 267,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex -printf \"%h\\n\" | sort -u",
        "text": "list uni qu p be not director i of all file file find under file ..",
        "id": 268,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', '-', 'print', 'f', \"'\", '%', 'h', \"'\", 'word', '-', 'u', 'find', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 7, 7, 7, 8, 8, 8, 8, 0, 9, 9, 10, 26]]",
            "sibling_edges": "[[8, 1, 10, 2, 3, 4, 5, 6, 7, 26, 12, 15, 16, 19, 20, 22, 23, 24, 27], [1, 26, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 17, 20, 21, 23, 24, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 30, 27], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 30, 27, 28]]"
        }
    },
    {
        "code": "find . -type d ! -perm -g+r,u+r,o+r -prune -o -print > files_and_folders",
        "text": "display all director i in current folder excl ud those which not read per miss to all user and save output to a file ..",
        "id": 269,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '>', 'word', 'word', '.', '-', 'type', 'd', '!', '-', 'perm', '-', 'g', '+', 'r', ',', 'u', '+', 'r', ',', 'o', '+', 'r', '-', 'prune', '-', 'o', '-', 'print', 'files_and_folders', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 8, 8, 9, 9, 11, 12]]",
            "sibling_edges": "[[9, 12, 1, 2, 3, 4, 5, 6, 7, 8, 10, 14, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36], [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 10], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 10, 38]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search for file regex in home folder ..",
        "id": 270,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -print0 | xargs -0 -I {} ls {}",
        "text": "list all file and director i re id in current director i and below ..",
        "id": 271,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'ls', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 0, 4, 4, 5, 5, 0, 0, 6, 0, 0, 7, 12, 12, 17, 18, 20, 21]]",
            "sibling_edges": "[[3, 1, 7, 2, 12, 4, 5, 18, 6, 9, 10, 13, 15, 17, 20, 23], [1, 12, 2, 3, 4, 5, 17, 6, 20, 10, 11, 14, 16, 18, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 8, 9, 10, 11, 1, 23, 24, 13, 14, 15, 16, 25, 26, 19, 27], [8, 9, 10, 11, 1, 23, 24, 13, 14, 15, 16, 25, 26, 19, 27, 28]]"
        }
    },
    {
        "code": "find Path -perm Permission | head",
        "text": "find all exe cut file under current director i and show a few line of output from begin ..",
        "id": 272,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'word', 'find', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 10]]",
            "sibling_edges": "[[4, 1, 5, 2, 3, 7], [1, 10, 2, 3, 4, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9, 1], [6, 7, 8, 9, 1, 12]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "find all hide file under file ..",
        "id": 273,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "paste File | sed -e Program | column -t -s Regex",
        "text": "merg line from file regex regex regex regex regex rep lac regex with regex and format regex delimit result as a tab l ..",
        "id": 274,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'e', 'program', 'word', '-', 't', '-', 's', 'regex', 'paste', 's', 'ed', 'column']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 0, 6, 6, 7, 7, 8, 9, 11, 11, 15]]",
            "sibling_edges": "[[3, 1, 5, 2, 9, 11, 4, 15, 6, 7, 12, 16, 18, 22], [1, 11, 2, 15, 3, 4, 5, 6, 7, 8, 13, 17, 19, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 1, 22, 23, 12, 13, 14, 2, 24, 16, 17, 18, 19], [10, 1, 22, 23, 12, 13, 14, 2, 24, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "ln -s $( readlink -e File ) Regex",
        "text": "c re at a symbol link name file to exist full and real path of regex ..",
        "id": 275,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 's', '$(', ')', 'regex', 'ln', 'word', 'word', 'word', '-', 'e', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 1, 1, 0, 0, 2, 3, 0, 0, 0, 10, 10, 11, 12, 12]]",
            "sibling_edges": "[[3, 1, 7, 4, 6, 11, 12, 10, 13, 16], [1, 6, 2, 5, 12, 7, 10, 11, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 4, 5, 6, 16, 17, 13, 14, 15, 7], [4, 5, 6, 16, 17, 13, 14, 15, 7, 8]]"
        }
    },
    {
        "code": "echo Regex | xargs -I {} dirname {}",
        "text": "print path to folder that contain file file ..",
        "id": 276,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'i', 'word', 'word', 'dir', 'name', 'word', 'word', 'echo', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 4, 0, 0, 5, 7, 7, 10, 11, 14, 15]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 11, 4, 8, 10, 12, 14, 17], [1, 7, 2, 3, 10, 4, 14, 9, 11, 13, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 6, 1, 17, 18, 8, 9, 19, 20, 12, 13, 21], [6, 1, 17, 18, 8, 9, 19, 20, 12, 13, 21, 22]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} grep Regex {}",
        "text": "search file under and below file for regex ..",
        "id": 277,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 0, 0, 10, 18, 18, 23, 24, 27, 28]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 18, 6, 7, 24, 8, 9, 12, 15, 16, 19, 21, 23, 27, 30], [1, 18, 2, 3, 4, 5, 6, 7, 23, 8, 9, 27, 13, 16, 17, 20, 22, 24, 28, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 17, 1, 30, 31, 19, 20, 21, 22, 32, 33, 25, 26, 34], [11, 12, 13, 14, 15, 16, 17, 1, 30, 31, 19, 20, 21, 22, 32, 33, 25, 26, 34, 35]]"
        }
    },
    {
        "code": "find Path -path Regex -or -path Regex | cpio -p -a -d -l -u -v Regex",
        "text": "c re at hard link of all file and director i match file or file in regex pre serv director i hi er arch i ..",
        "id": 278,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', '-', 'or', '-', 'path', 'regex', 'word', '-', 'p', '-', 'a', '-', 'd', '-', 'l', '-', 'u', '-', 'v', 'regex', 'find', 'cp', 'io']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 7, 0, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 15, 25, 25]]",
            "sibling_edges": "[[7, 1, 15, 2, 3, 4, 5, 6, 25, 8, 9, 10, 11, 12, 13, 17, 20, 22, 26, 28, 30, 32, 34, 36, 40], [1, 25, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 21, 23, 27, 29, 31, 33, 35, 37, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 40, 41, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 40, 41, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]]"
        }
    },
    {
        "code": "find Path -name Regex -print | xargs -I {} grep Regex {}",
        "text": "search for regex in all file match name pattern regex under current director i tree ..",
        "id": 279,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'word', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 0, 6, 6, 0, 0, 7, 8, 0, 0, 9, 16, 16, 19, 20, 23, 24]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 16, 6, 20, 7, 8, 11, 14, 17, 19, 23, 26], [1, 16, 2, 3, 4, 5, 6, 19, 7, 8, 23, 12, 15, 18, 20, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 1, 26, 27, 17, 18, 28, 29, 21, 22, 30], [10, 11, 12, 13, 14, 15, 1, 26, 27, 17, 18, 28, 29, 21, 22, 30, 31]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type f -exec md5sum {} \\; | sed Program",
        "text": "cal cu l regex sum of all file in current director i and format output by r emo v p be not he be i ..",
        "id": 280,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'f', '-', 'exec', 'md', '<number>', 'sum', 'word', 'word', '\\\\', ';', 'word', 'program', 'find', '{', '}', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 8, 0, 0, 9, 9, 0, 10, 11, 25, 26, 29, 29]]",
            "sibling_edges": "[[9, 1, 11, 2, 3, 4, 5, 6, 7, 8, 26, 29, 13, 14, 17, 20, 22, 23, 25, 27, 34], [1, 29, 2, 3, 4, 5, 6, 7, 8, 25, 9, 10, 14, 15, 18, 21, 23, 24, 26, 28, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32, 33, 27, 28, 1, 34, 35], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32, 33, 27, 28, 1, 34, 35, 30]]"
        }
    },
    {
        "code": "$( md5sum File | awk Program )",
        "text": "save regex sum hash of regex to v aria bl regex ..",
        "id": 281,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', '|', 'word', 'word', 'word', 'file', 'word', 'program', 'md', '<number>', 'sum', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 4, 0, 5, 6, 6, 6, 8, 8]]",
            "sibling_edges": "[[1, 5, 4, 3, 6, 8, 10, 11, 13], [6, 2, 3, 8, 4, 5, 11, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 10, 11, 12, 7, 3, 13, 14, 9], [10, 11, 12, 7, 3, 13, 14, 9, 2]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} wc -l {} | grep -v Regex | awk Program",
        "text": "print total number of line of all file file in a current folder and sub fold ..",
        "id": 282,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'wc', '-', 'l', 'word', 'word', 'word', '-', 'v', 'regex', 'word', 'program', 'find', 'x', 'arg', '{', '}', '{', '}', 'grep', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 11, 11, 0, 0, 0, 12, 12, 13, 0, 14, 15, 23, 23, 28, 29, 33, 34, 35, 39, 39]]",
            "sibling_edges": "[[7, 1, 34, 2, 13, 3, 15, 4, 5, 6, 23, 8, 9, 29, 10, 11, 35, 12, 39, 17, 20, 21, 24, 26, 28, 31, 33, 36, 42, 49], [1, 23, 2, 35, 3, 39, 4, 5, 6, 7, 8, 9, 28, 10, 11, 33, 12, 13, 14, 18, 21, 22, 25, 27, 29, 32, 34, 37, 43, 50]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 16, 17, 18, 19, 20, 21, 22, 1, 42, 43, 24, 25, 26, 27, 44, 45, 30, 31, 32, 46, 47, 2, 48, 36, 37, 38, 3, 49, 50], [16, 17, 18, 19, 20, 21, 22, 1, 42, 43, 24, 25, 26, 27, 44, 45, 30, 31, 32, 46, 47, 2, 48, 36, 37, 38, 3, 49, 50, 40]]"
        }
    },
    {
        "code": "find Path -iname Regex -print0 | xargs -0 -I {} rm -r {}",
        "text": "de let all file and director i name regex under directory director i tree as super user ..",
        "id": 283,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', '-', 'r', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 0, 0, 10, 19, 19, 24, 25, 29, 30]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 19, 6, 7, 25, 8, 9, 12, 13, 16, 17, 20, 22, 24, 27, 29, 32], [1, 19, 2, 3, 4, 5, 6, 7, 24, 8, 9, 29, 13, 14, 17, 18, 21, 23, 25, 28, 30, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 11, 12, 13, 14, 15, 16, 17, 18, 1, 32, 33, 20, 21, 22, 23, 34, 35, 26, 27, 28, 36], [11, 12, 13, 14, 15, 16, 17, 18, 1, 32, 33, 20, 21, 22, 23, 34, 35, 26, 27, 28, 36, 37]]"
        }
    },
    {
        "code": "basename $( pwd )",
        "text": "print base name of current work director i ..",
        "id": 284,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'base', 'name', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 0, 6]]",
            "sibling_edges": "[[1, 2, 6, 4], [2, 6, 3, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 2, 7], [5, 2, 7, 3]]"
        }
    },
    {
        "code": "mkdir -p Directory",
        "text": "make director i to directory as need ..",
        "id": 285,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'p', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} rm -r -f {}",
        "text": "r emo v recur all file and folder name file ..",
        "id": 286,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', '-', 'r', '-', 'f', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 10, 10, 0, 0, 11, 19, 19, 24, 25, 31, 32]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 19, 6, 7, 25, 8, 9, 10, 13, 16, 17, 20, 22, 24, 27, 29, 31, 34], [1, 19, 2, 3, 4, 5, 6, 7, 24, 8, 9, 10, 31, 14, 17, 18, 21, 23, 25, 28, 30, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 12, 13, 14, 15, 16, 17, 18, 1, 34, 35, 20, 21, 22, 23, 36, 37, 26, 27, 28, 29, 30, 38], [12, 13, 14, 15, 16, 17, 18, 1, 34, 35, 20, 21, 22, 23, 36, 37, 26, 27, 28, 29, 30, 38, 39]]"
        }
    },
    {
        "code": "find . -type f -mtime -1 -print|xargs pr -n |lp",
        "text": "prov id a list of all file edit date time to pr and pipe pr 's output to printer ..",
        "id": 287,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'm', 'time', '-', '<number>', '-', 'print', 'word', 'pr', '-', 'n', 'word', 'find', 'x', 'arg', 'lp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 7, 7, 8, 8, 0, 9, 10, 10, 0, 11, 23, 23, 27]]",
            "sibling_edges": "[[8, 1, 10, 2, 11, 3, 4, 5, 6, 7, 23, 9, 13, 16, 17, 19, 21, 25, 29], [1, 23, 2, 27, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 18, 20, 22, 26, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 29, 30, 24, 25, 26, 2], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 29, 30, 24, 25, 26, 2, 31]]"
        }
    },
    {
        "code": "find Path -regextype posix-extended -type d -regex Regex",
        "text": "find all director i under current director i who be e path be number char act long ..",
        "id": 288,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'type', 'po', 'ix', '-', 'extend', '-', 'type', 'd', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 13, 14, 15, 17, 20], [1, 2, 3, 4, 5, 6, 7, 11, 12, 14, 15, 16, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file and director i under current director i ..",
        "id": 289,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "rename Regex Regex",
        "text": "r en be all file file to file ..",
        "id": 290,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'regex', 'rename']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "find Path -iname Regex | xargs -I {} sed -i Program {}",
        "text": "rep lac all occur r of foo with bar in all file file under regex director i ..",
        "id": 291,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', 'program', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 0, 5, 5, 0, 0, 6, 6, 7, 7, 8, 0, 0, 9, 15, 15, 18, 19, 25, 26]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 15, 5, 19, 6, 7, 8, 11, 12, 16, 18, 20, 22, 25, 28], [1, 15, 2, 3, 4, 5, 18, 6, 7, 8, 25, 12, 13, 17, 19, 21, 23, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 1, 28, 29, 16, 17, 30, 31, 20, 21, 22, 23, 24, 32], [10, 11, 12, 13, 14, 1, 28, 29, 16, 17, 30, 31, 20, 21, 22, 23, 24, 32, 33]]"
        }
    },
    {
        "code": "find Path -type f -exec grep -H Regex {} \\;",
        "text": "search regular file of current director i tree for string regex ..",
        "id": 292,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'grep', '-', 'h', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 20, 21]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 21, 11, 14, 17, 20, 22], [1, 2, 3, 4, 5, 6, 7, 20, 8, 12, 15, 18, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22, 23]]"
        }
    },
    {
        "code": "find Path -name Regex ! -wholename Regex -exec grep Regex {} \\; -print",
        "text": "find all text file in current folder excl ud those that be present n folder file and search for a pattern ..",
        "id": 293,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '!', '-', 'whole', 'name', 'regex', '-', 'exec', 'grep', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 7, 8, 9, 0, 0, 10, 10, 11, 11, 12, 26, 27]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 10, 14, 18, 19, 22, 26, 28, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 11, 15, 19, 20, 23, 27, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 28, 29, 30], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "$( hostname )",
        "text": "set shell prompt to regex ..",
        "id": 294,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', 'word', 'host', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 0, 3, 3]]",
            "sibling_edges": "[[1, 3, 4], [3, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 4, 5], [4, 5, 2]]"
        }
    },
    {
        "code": "find . -name *.NEF -exec basename {} .NEF ; | xargs> -i sh -c dcraw -w -c $0.NEF | convert - -resize 25% $0.jpg",
        "text": "find file file under current director i and take on li file n be without ext en and run other command on file name ..",
        "id": 295,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', '|', '|', 'word', '.', '-', 'name', '*', '.', 'nef', '-', 'exec', 'base', 'name', 'word', 'word', '.', 'nef', 'word', 'word', 'word', 'find', '{', '}', '>', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', '-', 'resize', '<number>', '%', 'word', 'word', '-', 'i', 'sh', '-', 'c', 'dcraw', '-', 'w', '-', 'c', 'word', 'convert', '$', 'special_variable_name', '.', 'jpg', 'x', 'arg', '$', 'special_variable_name', '.', 'nef', '<number>', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 0, 0, 7, 7, 0, 0, 0, 10, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 25, 26, 26, 27, 27, 0, 0, 32, 32, 33, 34, 34, 35, 36, 36, 37, 37, 0, 38, 0, 0, 44, 44, 45, 45, 0, 0, 56, 56, 59, 65]]",
            "sibling_edges": "[[7, 1, 8, 10, 2, 3, 4, 5, 6, 22, 56, 9, 12, 14, 15, 17, 19, 21, 23, 45, 38, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 40, 42, 59, 46, 49, 52, 54, 65, 58, 60, 62, 64, 66], [1, 8, 45, 2, 3, 4, 5, 6, 21, 7, 9, 38, 13, 15, 16, 18, 20, 22, 24, 31, 25, 26, 27, 58, 32, 33, 34, 35, 36, 37, 64, 41, 43, 44, 47, 50, 53, 55, 56, 59, 61, 63, 65, 67]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 29, 30, 23, 24, 1, 8, 62, 63, 31, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 64, 69, 66, 67, 9, 57, 39, 40, 41, 42, 43, 58, 68, 60], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 29, 30, 23, 24, 1, 8, 62, 63, 31, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 64, 69, 66, 67, 9, 57, 39, 40, 41, 42, 43, 58, 68, 60, 61]]"
        }
    },
    {
        "code": "ls -t -p | grep -v Regex | tail -n +Quantity | xargs -d Regex -I {} rm -- {}",
        "text": "r emo v all file from current folder but number new one filter out director i from init i search ..",
        "id": 296,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', '-', 'p', 'word', '-', 'v', 'regex', 'word', '-', 'n', '+', 'quantity', 'word', '-', 'd', 'regex', '-', 'i', 'word', 'word', 'rm', '--', 'word', 'word', 'ls', 'grep', 'tail', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 5, 0, 6, 6, 7, 0, 8, 8, 9, 9, 0, 10, 10, 11, 12, 12, 0, 0, 13, 14, 0, 0, 15, 20, 24, 29, 29, 35, 36, 39, 40]]",
            "sibling_edges": "[[5, 1, 7, 2, 9, 3, 15, 4, 20, 6, 24, 8, 29, 10, 11, 12, 36, 13, 14, 16, 18, 21, 25, 27, 30, 33, 35, 39, 44], [1, 20, 2, 24, 3, 29, 4, 5, 6, 7, 8, 9, 10, 11, 12, 35, 13, 14, 39, 17, 19, 22, 26, 28, 31, 34, 36, 40, 45]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 16, 17, 18, 19, 1, 42, 21, 22, 23, 2, 43, 25, 26, 27, 28, 3, 44, 45, 30, 31, 32, 33, 34, 46, 47, 37, 38, 48], [16, 17, 18, 19, 1, 42, 21, 22, 23, 2, 43, 25, 26, 27, 28, 3, 44, 45, 30, 31, 32, 33, 34, 46, 47, 37, 38, 48, 49]]"
        }
    },
    {
        "code": "export PS1=\\[\\033]0;\\u $(host $(hostname))\\007\\]\\u@\\h:\\w\\$ ",
        "text": "set prompt to regex ..",
        "id": 297,
        "graph": {
            "nodes": "['program', ';', 'export', 'word', 'variable_name', '=', 'word', '$(', ')', '\\\\', '<number>', '\\\\', ']', '\\\\', 'u', '@', '\\\\', 'h', ':', '\\\\', 'w', '\\\\', '$', 'ps', '<number>', 'word', 'word', 'number', '\\\\', 'u', '\\\\', '[', '\\\\', '<number>', ']', '<number>', 'word', '$(', ')', 'host', 'word', 'host', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 0, 6, 6, 25, 25, 25, 25, 26, 27, 0, 0, 0, 36, 0, 40, 40]]",
            "sibling_edges": "[[27, 1, 2, 6, 8, 4, 5, 7, 38, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 28, 36, 30, 31, 32, 37, 40, 41], [1, 6, 4, 7, 3, 5, 25, 36, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 29, 37, 31, 32, 33, 40, 38, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[2, 23, 24, 5, 30, 31, 32, 33, 34, 35, 1, 28, 29, 7, 39, 37, 41, 42, 38, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [23, 24, 5, 30, 31, 32, 33, 34, 35, 1, 28, 29, 7, 39, 37, 41, 42, 38, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file and director i on system who be e name be regex ..",
        "id": 298,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "tar -c -z -f File -X File File",
        "text": "c re at an archiv excl ud file match pattern list in file ..",
        "id": 299,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'c', '-', 'z', '-', 'f', 'file', '-', 'x', 'file', 'file', 'tar']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 11, 13, 16], [1, 2, 3, 4, 5, 6, 7, 10, 12, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -type f -exec sed -i Program File File {} \\;",
        "text": "search word needl and sub ti tut it with rep lac in all file file of current folder ..",
        "id": 300,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 's', 'ed', '-', 'i', 'program', 'file', 'file', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 0, 0, 10, 10, 11, 25, 26]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 13, 16, 18, 20, 25, 27], [1, 2, 3, 4, 5, 6, 7, 8, 9, 25, 10, 14, 17, 19, 21, 26, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 27], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 27, 28]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file in folder file which begin with regex ..",
        "id": 301,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -ls",
        "text": "find and list all regular file ..",
        "id": 302,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "hostname | sed Program",
        "text": "r emo v a lead regex from system host name and save result to v aria bl regex ..",
        "id": 303,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'program', 'host', 'name', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 2, 3, 3, 4, 4]]",
            "sibling_edges": "[[3, 1, 4, 6, 8], [1, 4, 2, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 1, 8, 9], [7, 1, 8, 9, 5]]"
        }
    },
    {
        "code": "kill `pidof firefox`",
        "text": "send sig term signal to all regex process request them to term in ..",
        "id": 304,
        "graph": {
            "nodes": "['command', 'word', '`', '`', 'kill', 'word', 'word', 'firefox', 'p', 'id', 'of']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 0, 0, 5, 6, 6, 6]]",
            "sibling_edges": "[[1, 2, 5, 6, 8, 9], [2, 6, 3, 5, 9, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 8, 9, 10, 7], [2, 8, 9, 10, 7, 3]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -n Quantity -I {} echo Regex {} | sh File",
        "text": "r emo v regular file in current director i tree ..",
        "id": 305,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'echo', 'regex', 'word', 'word', 'word', 'file', 'find', 'x', 'arg', '{', '}', '{', '}', 'sh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 0, 7, 7, 8, 8, 9, 10, 10, 0, 0, 11, 12, 0, 0, 0, 13, 14, 22, 22, 30, 31, 34, 35, 36]]",
            "sibling_edges": "[[6, 1, 35, 2, 14, 3, 4, 5, 22, 7, 8, 9, 10, 31, 11, 12, 36, 16, 19, 20, 23, 25, 28, 30, 34, 39], [1, 22, 2, 36, 3, 4, 5, 6, 7, 8, 9, 10, 30, 11, 12, 34, 13, 17, 20, 21, 24, 26, 29, 31, 35, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 15, 16, 17, 18, 19, 20, 21, 1, 39, 40, 23, 24, 25, 26, 27, 28, 29, 41, 42, 32, 33, 43, 44, 2, 45], [15, 16, 17, 18, 19, 20, 21, 1, 39, 40, 23, 24, 25, 26, 27, 28, 29, 41, 42, 32, 33, 43, 44, 2, 45, 37]]"
        }
    },
    {
        "code": "find . -name my.txt 2> find_error.txt",
        "text": "find all inst an c of a file in current folder and save error to a file ..",
        "id": 306,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'file_descriptor', '>', 'word', 'word', '.', '-', 'name', 'my', '.', 'txt', '<number>', 'find_error', '.', 'txt', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 6, 6, 6, 7]]",
            "sibling_edges": "[[3, 7, 1, 2, 4, 5, 9, 11, 12, 15, 16], [4, 1, 2, 3, 5, 6, 10, 12, 13, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 5, 15, 16], [8, 9, 10, 11, 12, 13, 14, 5, 15, 16, 17]]"
        }
    },
    {
        "code": "echo Regex | cut -d Regex -f Number",
        "text": "extract host name part from url ..",
        "id": 307,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'echo', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 6, 7, 9]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 4, 5, 10, 13], [1, 9, 2, 3, 4, 5, 6, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 1, 17, 10, 11, 12, 13, 14], [8, 1, 17, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -mmin -Quantity",
        "text": "find all file and director i start with regex and end with file in name and be mod if i in time span ..",
        "id": 308,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'mm', 'in', '-', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14], [1, 2, 3, 4, 5, 9, 12, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "echo Regex | rev | cut -d Regex -f -Number | rev",
        "text": "keep on li last number hyphen se par section of regex ..",
        "id": 309,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', 'word', '-', 'd', 'regex', '-', 'f', '-', 'number', 'word', 'echo', 'rev', 'cut', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 5, 6, 7, 7, 8, 8, 0, 9, 11, 12, 20]]",
            "sibling_edges": "[[4, 1, 11, 2, 8, 3, 9, 12, 5, 6, 7, 13, 16, 18], [1, 11, 2, 12, 3, 20, 4, 5, 6, 7, 8, 14, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 1, 22, 2, 23, 13, 14, 15, 16, 17, 18, 19, 3], [10, 1, 22, 2, 23, 13, 14, 15, 16, 17, 18, 19, 3, 24]]"
        }
    },
    {
        "code": "cat File | tail -n +Quantity | split --lines Quantity",
        "text": "split content of all file excl ud first number line into file of at most number line each ..",
        "id": 310,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'n', '+', 'quantity', 'word', '--', 'line', 'quantity', 'cat', 'tail', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 5, 0, 6, 6, 7, 8, 10, 15]]",
            "sibling_edges": "[[3, 1, 5, 2, 8, 10, 4, 15, 6, 11, 13, 16], [1, 10, 2, 15, 3, 4, 5, 6, 7, 12, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 1, 20, 11, 12, 13, 14, 2, 21, 16, 17], [9, 1, 20, 11, 12, 13, 14, 2, 21, 16, 17, 18]]"
        }
    },
    {
        "code": "ssh-keygen -f File -N Regex",
        "text": "c re at a ssh key with no pas p hr as and store it in regex ..",
        "id": 311,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'f', 'file', '-', 'n', 'regex', 'ssh', '-', 'key', 'gen']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 9, 12, 13, 14], [1, 2, 3, 4, 7, 10, 13, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 13, 14, 15, 6, 7, 8, 9, 10], [13, 14, 15, 6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -print",
        "text": "find file regex on system ..",
        "id": 312,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "ln -s File Regex",
        "text": "c re at a symbol link name regex to file ..",
        "id": 313,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 's', 'file', 'regex', 'ln']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -or -name Regex \\) -print",
        "text": "display all header file and file file in current folder ..",
        "id": 314,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 17, 19, 22, 24], [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 18, 20, 23, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "cat File | md5sum",
        "text": "cal cu l regex sum of all file file in current director i ..",
        "id": 315,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'file', 'word', 'cat', 'md', '<number>', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 2, 0, 3, 5, 5, 5]]",
            "sibling_edges": "[[2, 1, 3, 7, 8], [1, 5, 2, 8, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4, 1, 7, 8], [4, 1, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex -exec cat {} \\;",
        "text": "concaten file contain regex in name ..",
        "id": 316,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'cat', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    },
    {
        "code": "echo password | su user1 -c command",
        "text": "run command regex as user regex with password regex ..",
        "id": 317,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'password', 'word', 'user1', '-', 'c', 'command', 'echo', 'su']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 2, 0, 3, 4, 4, 5, 6, 8]]",
            "sibling_edges": "[[2, 1, 6, 8, 3, 4, 10], [1, 8, 2, 3, 4, 5, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 7, 1, 14, 9, 10, 11], [7, 1, 14, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find . -name *.fq -exec cat {} ; | fastqc /dev/stdin",
        "text": "run regex on all fastqc file in current director i tree ..",
        "id": 318,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', '|', 'word', 'word', '.', '-', 'name', '*', '.', 'fq', '-', 'exec', 'cat', 'word', 'word', 'word', '/', 'dev', '/', 'std', 'in', 'find', '{', '}', 'fastqc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 5, 5, 6, 0, 0, 0, 8, 8, 8, 8, 8, 9, 19, 20, 21]]",
            "sibling_edges": "[[20, 1, 7, 9, 2, 3, 4, 5, 6, 21, 11, 13, 14, 16, 19, 22, 23, 24, 25], [1, 7, 21, 2, 3, 4, 5, 6, 19, 8, 12, 14, 15, 17, 20, 23, 24, 25, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 15, 16, 17, 18, 28, 29, 1, 7, 30, 22, 23, 24, 25], [10, 11, 12, 13, 14, 15, 16, 17, 18, 28, 29, 1, 7, 30, 22, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "find Path -type f -perm Permission",
        "text": "find all read on li file in file director i ..",
        "id": 319,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "fold -w Quantity File | sort | uniq -c | sort -n -r",
        "text": "display a sort count of all char act in regex ..",
        "id": 320,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'w', 'quantity', 'file', 'word', 'word', '-', 'c', 'word', '-', 'n', '-', 'r', 'fold', 'sort', 'uni', 'q', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 6, 0, 0, 7, 7, 0, 8, 8, 9, 9, 10, 15, 16, 16, 19]]",
            "sibling_edges": "[[6, 1, 15, 2, 7, 3, 10, 4, 5, 16, 19, 8, 11, 17, 20, 22, 26], [1, 15, 2, 16, 3, 19, 4, 5, 6, 7, 8, 9, 12, 18, 21, 23, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 11, 12, 13, 14, 1, 25, 2, 26, 27, 17, 18, 3, 28, 20, 21, 22], [11, 12, 13, 14, 1, 25, 2, 26, 27, 17, 18, 3, 28, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "sort temp.txt > temp.txt.sort && mv temp.txt.sort temp.txt",
        "text": "sort string in a file file ..",
        "id": 321,
        "graph": {
            "nodes": "['list', '&&', 'word', 'word', 'word', '>', 'word', 'word', 'temp', '.', 'txt', '.', 'sort', 'temp', '.', 'txt', 'word', 'temp', '.', 'txt', 'temp', '.', 'txt', '.', 'sort', 'mv', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 3, 3, 3, 0, 4, 4, 4, 6, 6, 6, 6, 6, 7, 16]]",
            "sibling_edges": "[[6, 1, 4, 7, 2, 16, 5, 8, 9, 10, 11, 13, 14, 17, 18, 20, 21, 22, 23], [1, 7, 5, 2, 3, 4, 6, 9, 10, 11, 12, 14, 15, 18, 19, 21, 22, 23, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 17, 18, 19, 5, 20, 21, 22, 23, 24, 1, 25, 8, 9, 10, 11, 12, 13, 14], [17, 18, 19, 5, 20, 21, 22, 23, 24, 1, 25, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "ifconfig Regex | awk Program",
        "text": "get ip address of regex select network inter fa c ..",
        "id": 322,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', 'program', 'if', 'config', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 2, 0, 3, 4, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 8, 10], [1, 6, 2, 3, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 9, 5, 1, 10, 11], [9, 5, 1, 10, 11, 7]]"
        }
    },
    {
        "code": "IFS= read -d $\\0 -r file",
        "text": "unset if and read standard input into v aria bl regex until a null char act be find without allow backslash to es cap char act ..",
        "id": 323,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'variable_name', '=', 'word', '-', 'd', '$', 'special_variable_name', '\\\\', '<number>', '-', 'r', 'file', 'ifs', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 3, 3, 4, 5, 7]]",
            "sibling_edges": "[[6, 7, 1, 11, 2, 3, 5, 8, 10, 12, 14], [7, 1, 10, 2, 3, 4, 6, 9, 11, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 6, 18, 8, 9, 10, 11, 12, 13, 14, 15], [6, 18, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "env | awk -F Regex Program | grep Regex",
        "text": "list all v aria bl with name contain x ..",
        "id": 324,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'f', 'regex', 'program', 'word', 'regex', 'env', 'a', 'wk', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 0, 6, 7, 8, 8, 13]]",
            "sibling_edges": "[[7, 1, 5, 2, 8, 3, 4, 13, 9, 16], [1, 8, 2, 13, 3, 4, 5, 6, 10, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 1, 16, 17, 9, 10, 11, 12, 2, 18], [1, 16, 17, 9, 10, 11, 12, 2, 18, 14]]"
        }
    },
    {
        "code": "history | sed Program",
        "text": "rep lac space after line number in output of hist or i with file ..",
        "id": 325,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'program', 'history', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 2, 3, 4, 4]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 4, 2, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 1, 7, 8], [1, 7, 8, 5]]"
        }
    },
    {
        "code": "comm -1 -2 <( cut -d Regex -f Number File | uniq ) <( cut -d Regex -f Number File | uniq )",
        "text": "write common third space se par field in file and file to file ..",
        "id": 326,
        "graph": {
            "nodes": "['command', 'number', 'number', 'word', '-', '<number>', '-', '<number>', '<(', ')', '<(', ')', 'comm', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'file', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'file', 'word', 'cut', 'uni', 'q', 'cut', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 16, 17, 17, 18, 19, 0, 0, 20, 20, 21, 22, 22, 23, 24, 0, 25, 33, 33, 34, 42, 42]]",
            "sibling_edges": "[[3, 1, 2, 9, 4, 6, 8, 33, 10, 42, 19, 13, 24, 14, 25, 15, 16, 17, 18, 34, 20, 21, 22, 23, 26, 29, 35, 38, 44, 47], [1, 2, 8, 10, 5, 7, 25, 9, 34, 11, 13, 33, 14, 42, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 30, 36, 39, 45, 48]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 4, 5, 6, 7, 8, 43, 26, 27, 28, 29, 30, 31, 32, 13, 44, 45, 9, 10, 46, 35, 36, 37, 38, 39, 40, 41, 14, 47, 48], [4, 5, 6, 7, 8, 43, 26, 27, 28, 29, 30, 31, 32, 13, 44, 45, 9, 10, 46, 35, 36, 37, 38, 39, 40, 41, 14, 47, 48, 11]]"
        }
    },
    {
        "code": "cd `script`",
        "text": "run regex output name of a director i go into that director i ..",
        "id": 327,
        "graph": {
            "nodes": "['command', 'word', '`', '`', 'cd', 'word', 'script']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 0, 5]]",
            "sibling_edges": "[[1, 2, 5], [2, 5, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 6], [2, 6, 3]]"
        }
    },
    {
        "code": "md5sum File | sort | uniq -d -w Quantity",
        "text": "list file file that same content ..",
        "id": 328,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'file', 'word', 'word', '-', 'd', '-', 'w', 'quantity', 'md', '<number>', 'sum', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 4, 5, 5, 6, 7, 7, 7, 9, 10, 10]]",
            "sibling_edges": "[[3, 1, 9, 2, 7, 10, 4, 5, 11, 13, 16, 17, 20], [1, 9, 2, 10, 3, 4, 5, 6, 12, 14, 17, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 17, 18, 8, 1, 19, 2, 20, 21, 11, 12, 13, 14], [17, 18, 8, 1, 19, 2, 20, 21, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path Path -f -amin +Quantity",
        "text": "search current director i recur for regular file last access more than time span ago ..",
        "id": 329,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'f', '-', 'be', 'in', '+', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 9, 11, 12, 14], [1, 2, 3, 4, 5, 10, 12, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -print0 | sort -z -u | xargs -0 -I {} cp -t Directory {}",
        "text": "find all file file in current director i and cop i them to director i file ..",
        "id": 330,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', 'z', '-', 'u', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'cp', '-', 't', 'directory', 'word', 'word', 'find', 'sort', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 8, 8, 8, 0, 9, 9, 10, 10, 0, 11, 11, 12, 12, 0, 0, 13, 14, 14, 15, 0, 0, 16, 27, 32, 32, 37, 38, 43, 44]]",
            "sibling_edges": "[[8, 1, 10, 2, 16, 3, 4, 5, 6, 7, 27, 9, 32, 11, 12, 38, 13, 14, 15, 18, 21, 24, 25, 28, 30, 33, 35, 37, 40, 43, 47], [1, 27, 2, 32, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 37, 13, 14, 15, 43, 19, 22, 25, 26, 29, 31, 34, 36, 38, 41, 44, 48]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[45, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 46, 28, 29, 30, 31, 2, 47, 48, 33, 34, 35, 36, 49, 50, 39, 40, 41, 42, 51], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 46, 28, 29, 30, 31, 2, 47, 48, 33, 34, 35, 36, 49, 50, 39, 40, 41, 42, 51, 52]]"
        }
    },
    {
        "code": "[[ ! -z `find YOUR_DIR/ -name something` ]] && echo found || echo not found",
        "text": "test if file name regex be find in regex ..",
        "id": 331,
        "graph": {
            "nodes": "['list', '||', '&&', 'word', 'word', '[[', ']]', 'word', 'word', 'not', 'find', '!', 'word', 'find', 'echo', 'test_operator', 'echo', '-', 'z', '`', '`', 'word', 'word', 'word', 'word', 'your_dir', '/', '-', 'name', 'something', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 7, 8, 0, 12, 15, 15, 0, 0, 0, 0, 0, 0, 21, 21, 22, 22, 23, 24]]",
            "sibling_edges": "[[7, 1, 6, 2, 8, 3, 5, 20, 12, 11, 15, 17, 19, 23, 24, 21, 22, 25, 27], [1, 8, 2, 12, 3, 4, 11, 6, 7, 15, 19, 18, 24, 20, 21, 22, 23, 26, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 11, 17, 18, 19, 30, 25, 26, 27, 28, 29, 20, 6, 2, 16, 13, 1, 14, 9], [11, 17, 18, 19, 30, 25, 26, 27, 28, 29, 20, 6, 2, 16, 13, 1, 14, 9, 10]]"
        }
    },
    {
        "code": "comm -3 <( sort File ) <( sort File ) | sed Program",
        "text": "print uni qu line in regex and regex when com par to each other and r emo v an i tab ..",
        "id": 332,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'word', 'word', '-', '<number>', '<(', ')', '<(', ')', 'word', 'program', 'comm', 'word', 'word', 's', 'ed', 'word', 'file', 'word', 'file', 'sort', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 3, 4, 0, 0, 11, 11, 0, 14, 0, 15, 18, 20]]",
            "sibling_edges": "[[10, 1, 4, 2, 8, 11, 5, 7, 14, 9, 15, 18, 20, 16], [1, 11, 2, 7, 9, 3, 6, 18, 8, 20, 10, 14, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 5, 6, 7, 22, 19, 8, 9, 23, 21, 10, 1, 16, 17], [5, 6, 7, 22, 19, 8, 9, 23, 21, 10, 1, 16, 17, 12]]"
        }
    },
    {
        "code": "find Path -type f -print0",
        "text": "search director i tree file for regular file use number delimit for output ..",
        "id": 333,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10, 11], [1, 2, 3, 4, 8, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path Path -size +Size -mtime Timespan -ls",
        "text": "list file large than size under file file that haven 't c hang in time span ..",
        "id": 334,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'size', '+', 'size', '-', 'm', 'time', 'timespan', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 11, 13, 15, 16, 19], [1, 2, 3, 4, 5, 6, 7, 12, 14, 16, 17, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "set -H",
        "text": "en a bl hist or i exp an in a script ..",
        "id": 335,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'h', 'set']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "find Path -size Size",
        "text": "list file in current director i and below that be exact size in size ..",
        "id": 336,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'size', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path \\( -name Regex ! -path Regex \\) -exec grep -I -w Regex {} +",
        "text": "search current director i for file who be e name start with regex ig nor svn file ..",
        "id": 337,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '!', '-', 'path', 'regex', '\\\\', ')', '-', 'exec', 'grep', '-', 'i', '-', 'w', 'regex', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 0, 0, 14, 15, 36, 37]]",
            "sibling_edges": "[[15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 37, 17, 19, 23, 26, 28, 31, 33, 36], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 14, 18, 20, 24, 27, 29, 32, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 38]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec sed Program {} \\;",
        "text": "find all regular file under regex director i tree with name pattern prov id by first posit para meet and show on li regex regex line from each of those file ..",
        "id": 338,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 's', 'ed', 'program', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 20, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 21, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} grep -E Regex {}",
        "text": "find all file file file in current director i tree and search them for string regex ..",
        "id": 339,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'e', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 8, 0, 0, 9, 14, 14, 17, 18, 23, 24]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 18, 6, 7, 8, 11, 15, 17, 20, 23, 26], [1, 14, 2, 3, 4, 5, 17, 6, 7, 8, 23, 12, 16, 18, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30], [10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30, 31]]"
        }
    },
    {
        "code": "od -v -t x1 File",
        "text": "read hex a dec im byte from de vi c file ..",
        "id": 340,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'v', '-', 't', 'x', '<number>', 'file', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 10], [1, 2, 3, 4, 7, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find / -name *.jpg 2>/dev/null",
        "text": "find all file file on system ..",
        "id": 341,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'file_descriptor', '>', 'word', 'word', '/', '-', 'name', '*', '.', 'jpg', '<number>', '/', 'dev', '/', 'null', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 6, 6, 6, 6, 7]]",
            "sibling_edges": "[[3, 7, 1, 2, 4, 5, 9, 11, 12, 15, 16, 17], [4, 1, 2, 3, 5, 6, 10, 12, 13, 16, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 5, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 5, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -type f -not -name Regex -mtime Timespan -exec gzip {} \\;",
        "text": "compress all file in regex director i tree that be last mod if i time span ago and not al read i be compress with g zip ..",
        "id": 342,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'not', '-', 'name', 'regex', '-', 'm', 'time', 'timespan', '-', 'exec', 'g', 'zip', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 7, 8, 9, 9, 10, 10, 0, 0, 11, 11, 12, 30, 31]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 31, 14, 17, 19, 22, 23, 26, 28, 30, 32], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 11, 15, 18, 20, 23, 24, 27, 29, 31, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 32], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 32, 33]]"
        }
    },
    {
        "code": "yes Regex | rm -r File",
        "text": "recur r emo v all file file and answer regex to an i prompt ..",
        "id": 343,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'r', 'file', 'yes', 'rm']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 8], [1, 7, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 1, 12, 8, 9], [6, 1, 12, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path Path -type f -mtime +Timespan -exec compress {} \\;",
        "text": "find more than time span old file in number director i and compress them ..",
        "id": 344,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'type', 'f', '-', 'm', 'time', '+', 'timespan', '-', 'exec', 'compress', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 24, 25]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 25, 13, 16, 17, 19, 21, 24, 26], [1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 14, 17, 18, 20, 22, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26, 27]]"
        }
    },
    {
        "code": "cal | awk -v Program Program",
        "text": "print week day of a time span in a current month ..",
        "id": 345,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'v', 'program', 'program', 'cal', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 5, 6, 6]]",
            "sibling_edges": "[[5, 1, 6, 2, 3, 7, 12], [1, 6, 2, 3, 4, 8, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 1, 12, 13, 7, 8, 9], [1, 12, 13, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -exec grep Regex {} \\; -print",
        "text": "search file file for line contain regex ..",
        "id": 346,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'grep', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 0, 0, 5, 5, 6, 6, 7, 13, 14]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 14, 5, 9, 13, 15, 17], [1, 2, 3, 4, 13, 5, 6, 10, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 20, 21, 15, 16, 17], [8, 9, 10, 11, 12, 20, 21, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "finger | cut -d Regex -f Number | sort -u",
        "text": "print sort uni qu column of user n be of user who be current file in ..",
        "id": 347,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', '-', 'u', 'finger', 'cut', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 5, 6, 0, 7, 7, 8, 9, 16]]",
            "sibling_edges": "[[8, 1, 6, 2, 9, 3, 4, 5, 16, 10, 13, 17], [1, 9, 2, 16, 3, 4, 5, 6, 7, 11, 14, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 1, 20, 10, 11, 12, 13, 14, 15, 2, 21, 17], [1, 20, 10, 11, 12, 13, 14, 15, 2, 21, 17, 18]]"
        }
    },
    {
        "code": "find Path -name Regex -mtime Timespan",
        "text": "find all file and director i under directory director i tree who be e name end with regex and be mod if i exact time span ago ..",
        "id": 348,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'm', 'time', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "top -c -p $(pgrep -d, -f string_to_match_in_cmd_line)",
        "text": "monitor on li process who be e command contain regex ..",
        "id": 349,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'c', '-', 'p', '$(', ')', 'top', 'word', 'word', 'word', 'word', '-', 'd', ',', '-', 'f', 'string_to_match_in_cmd_line', 'p', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 1, 1, 2, 2, 0, 0, 3, 0, 0, 0, 0, 11, 11, 11, 12, 12, 13, 14, 14]]",
            "sibling_edges": "[[3, 1, 2, 4, 6, 8, 13, 14, 11, 12, 15, 16, 18, 21], [1, 2, 8, 5, 7, 14, 9, 11, 12, 13, 16, 17, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 4, 5, 6, 7, 8, 21, 22, 15, 16, 17, 18, 19, 20], [4, 5, 6, 7, 8, 21, 22, 15, 16, 17, 18, 19, 20, 9]]"
        }
    },
    {
        "code": "cat $( find Path -name Regex -print )",
        "text": "find all file file under current director i and print content ..",
        "id": 350,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'cat', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 6, 6, 7, 8, 8, 9]]",
            "sibling_edges": "[[1, 2, 8, 9, 5, 6, 7, 11, 14], [2, 9, 3, 5, 6, 7, 8, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 16, 10, 11, 12, 13, 14, 15], [2, 16, 10, 11, 12, 13, 14, 15, 3]]"
        }
    },
    {
        "code": "whoami hostname -f",
        "text": "save a nginx link to file with current user and system fqdn host name in v aria bl regex ..",
        "id": 351,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'host', 'name', '-', 'f', 'whoa', 'mi']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 1, 1, 2, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 6, 8], [1, 2, 5, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 9, 4, 5, 6], [9, 4, 5, 6, 7]]"
        }
    },
    {
        "code": "shopt -s direxpand",
        "text": "en a bl shell option regex ..",
        "id": 352,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 's', 'direxpand', 'shop', 't']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "find Path -type f -name Regex | awk -F Regex Program | sort -u",
        "text": "print a sort list of ext en of regular file from current director i tree ..",
        "id": 353,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'word', '-', 'f', 'regex', 'program', 'word', '-', 'u', 'find', 'a', 'wk', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 0, 8, 8, 9, 10, 0, 11, 11, 12, 20, 20, 25]]",
            "sibling_edges": "[[7, 1, 10, 2, 12, 3, 4, 5, 6, 20, 8, 9, 25, 14, 17, 21, 26, 29], [1, 20, 2, 25, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 18, 22, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 13, 14, 15, 16, 17, 18, 19, 1, 29, 30, 21, 22, 23, 24, 2, 31, 26], [13, 14, 15, 16, 17, 18, 19, 1, 29, 30, 21, 22, 23, 24, 2, 31, 26, 27]]"
        }
    },
    {
        "code": "find Path Path -name Regex -print0 | xargs -0",
        "text": "find all file file and director i under asia and emea director i ..",
        "id": 354,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'path', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 4, 5, 6, 6, 6, 0, 7, 7, 8, 17, 17]]",
            "sibling_edges": "[[6, 1, 8, 2, 3, 4, 5, 17, 11, 14, 15, 18, 21], [1, 17, 2, 3, 4, 5, 6, 7, 12, 15, 16, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 12, 13, 14, 15, 16, 1, 21, 22, 18], [9, 10, 11, 12, 13, 14, 15, 16, 1, 21, 22, 18, 19]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} \\;",
        "text": "find all file under foldernam director i and set per miss to number ..",
        "id": 355,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "split -b Size -d -a Quantity File Regex",
        "text": "split regex into file of at most number mib each with a num er suffix of length number and prefix file ..",
        "id": 356,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'b', 'size', '-', 'd', '-', 'a', 'quantity', 'file', 'regex', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 12, 14], [1, 2, 3, 4, 5, 6, 7, 10, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find temp/images/* -maxdepth 2 -iname *.jpg -print0 | xargs -0 mogrify -resize 100x100> -quality 80 -compress JPEG -monitor -strip",
        "text": "find all file file under maximum number level down file path and run regex with file path as argument ..",
        "id": 357,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'number', 'word', 'word', 'word', '-', 'quality', '<number>', '-', 'compress', 'jpeg', '-', 'monitor', '-', 'strip', 'word', 'temp', '/', 'image', '/', '*', '-', 'max', 'depth', '<number>', '-', 'i', 'name', '*', '.', 'jpg', '-', 'print', '<number>', 'word', '-', '<number>', 'mogrify', '-', 'resize', '100x100', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 0, 9, 9, 9, 9, 9, 10, 10, 10, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 0, 15, 15, 16, 17, 17, 18, 29, 48, 48]]",
            "sibling_edges": "[[18, 14, 1, 2, 3, 4, 5, 6, 7, 29, 9, 10, 11, 12, 13, 48, 15, 16, 17, 19, 22, 25, 27, 30, 31, 32, 33, 35, 36, 39, 40, 42, 43, 45, 46, 49, 52, 56], [2, 1, 48, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 26, 28, 31, 32, 33, 34, 36, 37, 40, 41, 43, 44, 46, 47, 50, 53, 57]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[55, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 56, 57, 49, 50, 51, 52, 53, 54, 2, 19, 20, 21, 22, 23, 24, 25, 26, 27], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 56, 57, 49, 50, 51, 52, 53, 54, 2, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]]"
        }
    },
    {
        "code": "find . -type d -exec bash -c mv \"$1\" \"${1//foo/Bar}\" -- {} ;",
        "text": "move all director i under current director i to new path obtain by rep lac all occur r of regex with regex in path ..",
        "id": 358,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'raw_string', 'word', 'word', '.', '-', 'type', 'd', '-', 'exec', 'bash', '-', 'c', 'mv', \"'\", '$', '<number>', \"'\", \"'\", '$', '{', '<number>', '//', 'foo', '/', 'bar', '}', \"'\", '--', 'word', 'word', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 0, 0, 12, 38, 39]]",
            "sibling_edges": "[[39, 12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 38, 15, 18, 21, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[40, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 1]]"
        }
    },
    {
        "code": "find Path -name Regex | rev | cut -d Regex -f Number | rev",
        "text": "find all file with name end with file and display on li file n be without full path ..",
        "id": 359,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'find', 'rev', 'cut', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 0, 0, 7, 7, 8, 9, 9, 10, 0, 11, 16, 17, 24]]",
            "sibling_edges": "[[6, 1, 16, 2, 10, 3, 11, 4, 5, 17, 7, 8, 9, 13, 18, 21], [1, 16, 2, 17, 3, 24, 4, 5, 6, 7, 8, 9, 10, 14, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 12, 13, 14, 15, 1, 26, 2, 27, 18, 19, 20, 21, 22, 23, 3], [12, 13, 14, 15, 1, 26, 2, 27, 18, 19, 20, 21, 22, 23, 3, 28]]"
        }
    },
    {
        "code": "find Path -inum Quantity -exec rm {} \\;",
        "text": "de let all file and director i with node number regex under current director i tree ..",
        "id": 360,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'in', 'um', 'quantity', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 16, 17]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 17, 9, 10, 13, 16, 18], [1, 2, 3, 4, 5, 16, 6, 10, 11, 14, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18], [8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18, 19]]"
        }
    },
    {
        "code": "find Path -daystart -mtime +Timespan -mtime -Timespan Path -printf \"%M %n %u %g %10s %TY-%Tm-%Td %Ta %TH:%TM:%TS %h/%f\\n\" | awk Program",
        "text": "find all file and folder that be c re at in number on friday of ever i month ..",
        "id": 361,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'path', '-', 'day', 'start', '-', 'm', 'time', '+', 'timespan', '-', 'm', 'time', '-', 'timespan', 'path', '-', 'print', 'f', \"'\", '%', 'm', '%', 'n', '%', 'u', '%', 'g', '%', '<number>', 's', '%', 'ty', '-', '%', 'tm', '-', '%', 'td', '%', 'ta', '%', 'th', ':', '%', 'tm', ':', '%', 'ts', '%', 'h', '/', '%', 'f', \"'\", 'word', 'program', 'find', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 11, 12, 67, 67]]",
            "sibling_edges": "[[10, 1, 12, 2, 3, 4, 5, 6, 7, 8, 9, 67, 14, 15, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70], [1, 67, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 18, 19, 21, 23, 24, 26, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[69, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 1, 70, 71], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 1, 70, 71, 68]]"
        }
    },
    {
        "code": "find Path -newerct Regex -print",
        "text": "find file c re at in time span work on mac file x ..",
        "id": 362,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'newerct', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -type l -name Regex -exec ls -l {} \\;",
        "text": "get a detail list of all symbol link in file start with regex ..",
        "id": 363,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'l', '-', 'name', 'regex', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -type f -wholename Regex | sed Program | sh",
        "text": "find regular file under current director i who be e name end in file and r en be each file to same name without file at end ..",
        "id": 364,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'whole', 'name', 'regex', 'word', 'program', 'word', 'find', 's', 'ed', 'sh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 7, 0, 8, 0, 9, 18, 18, 20]]",
            "sibling_edges": "[[7, 1, 8, 2, 9, 3, 4, 5, 6, 18, 11, 14, 15, 22], [1, 18, 2, 20, 3, 4, 5, 6, 7, 8, 12, 15, 16, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 13, 14, 15, 16, 17, 1, 22, 23, 19, 2], [10, 11, 12, 13, 14, 15, 16, 17, 1, 22, 23, 19, 2, 24]]"
        }
    },
    {
        "code": "echo Regex | cut -d Regex --complement -f Number",
        "text": "print file name without last number ext en assum file name do n 't contain an i other dot ..",
        "id": 365,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'd', 'regex', '--', 'complement', '-', 'f', 'number', 'echo', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 6, 6, 7, 8, 10]]",
            "sibling_edges": "[[2, 1, 8, 10, 3, 4, 5, 6, 11, 14, 16], [1, 10, 2, 3, 4, 5, 6, 7, 12, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 1, 20, 11, 12, 13, 14, 15, 16, 17], [9, 1, 20, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -type f \\( -iname Regex -or -iname Regex -or -iname Regex -or -iname Regex \\) -exec echo {} \\;",
        "text": "show all file file file file file in folder file ..",
        "id": 366,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'i', 'name', 'regex', '-', 'or', '-', 'i', 'name', 'regex', '-', 'or', '-', 'i', 'name', 'regex', '-', 'or', '-', 'i', 'name', 'regex', '\\\\', ')', '-', 'exec', 'echo', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13, 13, 14, 14, 14, 15, 16, 16, 17, 17, 18, 0, 0, 19, 19, 20, 54, 55]]",
            "sibling_edges": "[[20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 55, 22, 25, 27, 28, 31, 33, 34, 37, 39, 40, 43, 45, 46, 49, 51, 54, 56], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 54, 19, 23, 26, 28, 29, 32, 34, 35, 38, 40, 41, 44, 46, 47, 50, 52, 55, 57]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[58, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 56], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 56, 57]]"
        }
    },
    {
        "code": "read -p Regex Regex",
        "text": "read a line from standard input with prompt regex and save respons in v aria bl regex ..",
        "id": 367,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'p', 'regex', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "rsync -v -a -u -t File File File",
        "text": "archiv all file begin with file or file in current director i to user 's home director i on host regex pre serv timestamp and skip file that be new on regex ..",
        "id": 368,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'v', '-', 'a', '-', 'u', '-', 't', 'file', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 11, 13, 15, 20], [1, 2, 3, 4, 5, 6, 7, 10, 12, 14, 16, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -inum Quantity -exec rm {} \\;",
        "text": "r emo v file with i nod number number ..",
        "id": 369,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'in', 'um', 'quantity', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 16, 17]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 17, 9, 10, 13, 16, 18], [1, 2, 3, 4, 5, 16, 6, 10, 11, 14, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18], [8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 18, 19]]"
        }
    },
    {
        "code": "find Path -type f -exec ls -s {} \\; | sort -n | head - Quantity",
        "text": "sort base on size and display top number small regular file in current folder ..",
        "id": 370,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ls', '-', 's', 'word', 'word', '\\\\', ';', 'word', '-', 'n', 'word', '-', 'quantity', 'find', '{', '}', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 0, 10, 10, 0, 11, 12, 13, 23, 24, 27, 30]]",
            "sibling_edges": "[[9, 1, 10, 2, 13, 3, 4, 5, 6, 7, 8, 24, 27, 30, 11, 15, 18, 21, 23, 25, 28], [1, 27, 2, 30, 3, 4, 5, 6, 7, 8, 23, 9, 10, 11, 12, 16, 19, 22, 24, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 14, 15, 16, 17, 18, 19, 20, 21, 22, 34, 35, 25, 26, 1, 36, 28, 29, 2, 37, 31], [14, 15, 16, 17, 18, 19, 20, 21, 22, 34, 35, 25, 26, 1, 36, 28, 29, 2, 37, 31, 32]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "find regular file under and below file that match pattern file ..",
        "id": 371,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex -prune -or -exec mv {} $( echo {} | tr Regex Regex ) \\; -print",
        "text": "r en be all file and director i under current director i tree by convert name to small letter without descend into file director i ..",
        "id": 372,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'exec', 'mv', 'word', 'word', '$(', ')', '\\\\', ';', '-', 'print', 'find', '{', '}', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'regex', 'echo', '{', '}', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 0, 0, 0, 0, 8, 8, 9, 9, 10, 22, 23, 0, 0, 0, 0, 0, 0, 0, 34, 35, 36, 37, 38, 39]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 23, 25, 8, 12, 15, 17, 19, 22, 24, 35, 26, 28, 38, 33, 36, 39, 34, 37], [1, 2, 3, 4, 5, 6, 7, 22, 24, 8, 9, 13, 16, 18, 20, 23, 36, 25, 27, 29, 33, 39, 37, 34, 35, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 31, 32, 24, 42, 43, 44, 33, 45, 40, 41, 25, 26, 27, 28], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 31, 32, 24, 42, 43, 44, 33, 45, 40, 41, 25, 26, 27, 28, 29]]"
        }
    },
    {
        "code": "rsync File File",
        "text": "cop i file to directory and c re at director i directory if directory exist ..",
        "id": 373,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find Path -name Regex -exec mv -t Directory {} +",
        "text": "find all file file under file and move them to file ..",
        "id": 374,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'mv', '-', 't', 'directory', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 9, 20, 21]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 21, 11, 14, 17, 20], [1, 2, 3, 4, 5, 6, 7, 20, 8, 12, 15, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 22]]"
        }
    },
    {
        "code": "find Path Path -f -atime Timespan",
        "text": "search current director i recur for regular file last access time span ago ..",
        "id": 375,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'f', '-', 'a', 'time', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 9, 11, 12], [1, 2, 3, 4, 5, 10, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "ls -1 | perl -pe s/\\n$/some_delimiter/",
        "text": "list all file in a current folder se par name with regex ..",
        "id": 376,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'word', 'word', 'word', 'word', '-', '<number>', 'word', '-', 'pe', 's', '/', '$', 'special_variable_name', '/', 'some_delimiter', '/', 'ls', 'perl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 2, 2, 0, 3, 3, 4, 4, 0, 0, 5, 5, 5, 6, 9]]",
            "sibling_edges": "[[2, 1, 6, 9, 3, 4, 15, 7, 10, 12, 14, 16, 17], [1, 9, 2, 3, 4, 14, 5, 8, 11, 13, 15, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 7, 8, 1, 20, 10, 11, 12, 13, 14, 15, 16, 17], [7, 8, 1, 20, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "screen -S SessionName -X at .# stuff date ",
        "text": "send content to screen session window with a certain tit l ..",
        "id": 377,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 's', 'sessionname', '-', 'x', 'at', '.', '#', 'stuff', 'date', 'screen']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 12, 15], [1, 2, 3, 4, 5, 6, 7, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find /home/www/ -type f | xargs perl -pi -e s/subdomainA\\.example\\.com/subdomainB.example.com/g",
        "text": "find all regular file under file and rep lac ever i occur r of file with file in those file ..",
        "id": 378,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'home', '/', 'www', '/', '-', 'type', 'f', 'word', 'perl', '-', 'pi', '-', 'e', 's', '/', 'subdomaina', '\\\\', '.', 'example', '\\\\', '.', 'com', '/', 'subdomainb', '.', 'example', '.', 'com', '/', 'g', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 3, 3, 4, 0, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 18, 18]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 18, 5, 6, 7, 10, 11, 12, 13, 15, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42], [1, 18, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 10, 11, 12, 13, 14, 15, 16, 17, 1, 42, 43, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [10, 11, 12, 13, 14, 15, 16, 17, 1, 42, 43, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]]"
        }
    },
    {
        "code": "sed Program",
        "text": "convert all char act in standard input to low case ..",
        "id": 379,
        "graph": {
            "nodes": "['command', 'word', 'word', 'program', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "mount -o rw,remount Regex Regex",
        "text": "remount file on file as read and write ..",
        "id": 380,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'o', 'rw', ',', 'remount', 'regex', 'regex', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 9], [1, 2, 3, 4, 7, 9, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "c re at director i file in user 's home director i ..",
        "id": 381,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "find | wc -l",
        "text": "find all file in current director i tree and count them ..",
        "id": 382,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '-', 'l', 'find', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 2, 2, 3, 4]]",
            "sibling_edges": "[[3, 1, 4, 5], [1, 4, 2, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 1, 8, 5], [1, 8, 5, 6]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type f Path",
        "text": "find writ a bl regular file in current director i ..",
        "id": 383,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'f', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 10, 13], [1, 2, 3, 4, 5, 6, 10, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "touch $( date --date Regex ) File",
        "text": "set timestamp of b to timestamp in stat format specif i by v aria bl regex ..",
        "id": 384,
        "graph": {
            "nodes": "['command', 'word', 'word', '$(', ')', 'file', 'touch', 'word', 'word', 'word', '--', 'date', 'regex', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 1, 2, 0, 0, 0, 7, 7, 8, 9]]",
            "sibling_edges": "[[2, 4, 3, 8, 9, 7, 10], [3, 1, 9, 4, 7, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 13, 10, 11, 12, 4], [3, 13, 10, 11, 12, 4, 5]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex -print0 | xargs -0 -I {} grep Regex {}",
        "text": "find string with text regex in an i case file like file recur in a current folder ..",
        "id": 385,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 11, 0, 0, 12, 24, 24, 29, 30, 33, 34]]",
            "sibling_edges": "[[7, 1, 12, 2, 3, 4, 5, 6, 24, 8, 9, 30, 10, 11, 14, 17, 18, 21, 22, 25, 27, 29, 33, 36], [1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 29, 10, 11, 33, 15, 18, 19, 22, 23, 26, 28, 30, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 36, 37, 25, 26, 27, 28, 38, 39, 31, 32, 40], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 36, 37, 25, 26, 27, 28, 38, 39, 31, 32, 40, 41]]"
        }
    },
    {
        "code": "find Path -name Regex -exec rm -i {} \\;",
        "text": "r emo v all regex file under current director i with confirm prompt ..",
        "id": 386,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'rm', '-', 'i', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type f -empty -delete",
        "text": "find all e mp ti file in current director i and de let them ..",
        "id": 387,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'f', '-', 'empty', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 14, 17, 19], [1, 2, 3, 4, 5, 6, 7, 11, 12, 15, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "find Path Path Path -type f -name Regex -exec grep -i -l Regex {} \\;",
        "text": "search for regex in all file file under regex regex and regex director i tree and print on li name of match file ..",
        "id": 388,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'i', '-', 'l', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 0, 0, 13, 13, 14, 32, 33]]",
            "sibling_edges": "[[14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 33, 18, 21, 24, 27, 29, 32, 34], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 32, 13, 19, 22, 25, 28, 30, 33, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 34], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 34, 35]]"
        }
    },
    {
        "code": "find Path -name Regex -exec echo {} \\;",
        "text": "list all file file and director i under current director i ..",
        "id": 389,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'echo', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -maxdepth Quantity",
        "text": "find all file and director i in number level down current director i ..",
        "id": 390,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'max', 'depth', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12, 13], [1, 2, 3, 4, 5, 9, 10, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path Path Path -print | tee File",
        "text": "c re at a backup of all file in current folder to floppi and save file list in file file ..",
        "id": 391,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', 'path', '-', 'print', 'word', 'file', 'find', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 5, 0, 6, 7, 13]]",
            "sibling_edges": "[[5, 1, 7, 2, 3, 4, 13, 11], [1, 13, 2, 3, 4, 5, 6, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 8, 9, 10, 11, 12, 1, 16], [8, 9, 10, 11, 12, 1, 16, 14]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan -name Regex",
        "text": "find all file file which be mod if i in time span ..",
        "id": 392,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 11, 13], [1, 2, 3, 4, 5, 9, 10, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -regextype posix-extended -regex Regex -fprint File",
        "text": "find all file and director i under regex director i tree match po ix extend regular express regex and save output in file regex ..",
        "id": 393,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'regex', 'type', 'po', 'ix', '-', 'extend', '-', 'regex', 'regex', '-', 'f', 'print', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 13, 14, 15, 17, 20, 21], [1, 2, 3, 4, 5, 6, 7, 11, 12, 14, 15, 16, 18, 21, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "paste <( cal DateTime DateTime ) <( cal DateTime DateTime ) <( cal DateTime DateTime )",
        "text": "print calendar for februari date time and date time of year number side by sid ..",
        "id": 394,
        "graph": {
            "nodes": "['command', 'word', '<(', ')', '<(', ')', '<(', ')', 'paste', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'date', 'time', 'date', 'time', 'word', 'date', 'time', 'date', 'time', 'word', 'date', 'time', 'date', 'time', 'cal', 'cal', 'cal']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 9, 9, 10, 10, 0, 11, 11, 12, 12, 0, 13, 13, 14, 14, 15, 20, 25]]",
            "sibling_edges": "[[1, 3, 5, 2, 10, 4, 12, 6, 14, 15, 9, 20, 11, 25, 13, 16, 18, 21, 23, 26, 28], [2, 4, 6, 15, 3, 20, 5, 25, 7, 9, 10, 11, 12, 13, 14, 17, 19, 22, 24, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 2, 30, 16, 17, 18, 19, 3, 4, 31, 21, 22, 23, 24, 5, 6, 32, 26, 27, 28, 29], [2, 30, 16, 17, 18, 19, 3, 4, 31, 21, 22, 23, 24, 5, 6, 32, 26, 27, 28, 29, 7]]"
        }
    },
    {
        "code": "alias -g X=| cut -d' ' -f2",
        "text": "set alia regex for command regex ..",
        "id": 395,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'g', 'x', '=', 'word', 'word', 'raw_string', '-', 'f2', 'alias', 'cut', '-', 'd', \"'\", \"'\"]",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 4, 4, 5, 10, 11, 11, 12, 12]]",
            "sibling_edges": "[[3, 1, 5, 2, 10, 12, 6, 8, 11, 13, 17, 19], [1, 10, 2, 3, 11, 4, 7, 9, 12, 14, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 6, 7, 8, 9, 1, 16, 17, 18, 19, 20, 13], [6, 7, 8, 9, 1, 16, 17, 18, 19, 20, 13, 14]]"
        }
    },
    {
        "code": "echo -ne some random\\nbytes | xxd -plain | tr -d \\n | sed s/\\(..\\)/%\\1/g",
        "text": "convert regex to regex se par hex a dec im byte val u ..",
        "id": 396,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'ne', 'some', 'random', 'byte', 'word', '-', 'plain', 'word', '-', 'd', 'word', 's', '/', '\\\\', '(', '.', '.', '\\\\', ')', '/', '%', '\\\\', '<number>', '/', 'g', 'echo', 'xx', 'd', 'tr', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 6, 7, 0, 8, 8, 0, 9, 9, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 17, 17, 20, 23, 23]]",
            "sibling_edges": "[[7, 1, 8, 2, 9, 3, 11, 4, 5, 6, 17, 20, 23, 12, 18, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 42], [1, 17, 2, 20, 3, 23, 4, 5, 6, 7, 8, 9, 10, 13, 19, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 12, 13, 14, 15, 16, 1, 39, 40, 18, 19, 2, 41, 21, 22, 3, 42, 43, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [12, 13, 14, 15, 16, 1, 39, 40, 18, 19, 2, 41, 21, 22, 3, 42, 43, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]]"
        }
    },
    {
        "code": "history | grep Regex -A Quantity -B Quantity",
        "text": "search for regex in output of regex and print number line that p rec ed and follow ..",
        "id": 397,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', '-', 'a', 'quantity', '-', 'b', 'quantity', 'history', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 8]]",
            "sibling_edges": "[[7, 1, 8, 2, 3, 4, 5, 10, 13], [1, 8, 2, 3, 4, 5, 6, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 1, 17, 9, 10, 11, 12, 13, 14], [1, 17, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "ssh user@target cd /some/directory; nohup myprogram > foo.out 2> foo.err < /dev/null",
        "text": "exe cut file in background on target machin regex and write standard output and standard error to file and file ..",
        "id": 398,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'user', '@', 'target', 'cd', '/', 'some', '/', 'directory', 'word', '>', 'word', 'file_descriptor', '>', 'word', '<', 'word', 'ssh', 'word', 'my', 'program', 'foo', '.', 'out', '<number>', 'foo', '.', 'err', '/', 'dev', '/', 'null', 'n', 'oh', 'up']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 2, 2, 2, 3, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 14, 14, 16, 16, 16, 17, 19, 19, 19, 21, 21, 21, 21, 23, 23, 23]]",
            "sibling_edges": "[[4, 1, 5, 2, 3, 14, 16, 19, 6, 7, 10, 11, 12, 23, 15, 17, 18, 20, 24, 26, 27, 30, 31, 33, 34, 35, 37, 38], [1, 23, 2, 3, 4, 15, 17, 20, 7, 8, 11, 12, 13, 14, 16, 18, 19, 21, 25, 27, 28, 31, 32, 34, 35, 36, 38, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 6, 7, 8, 9, 10, 11, 12, 13, 1, 37, 38, 39, 24, 25, 15, 26, 27, 28, 29, 18, 30, 31, 32, 20, 33, 34, 35], [6, 7, 8, 9, 10, 11, 12, 13, 1, 37, 38, 39, 24, 25, 15, 26, 27, 28, 29, 18, 30, 31, 32, 20, 33, 34, 35, 36]]"
        }
    },
    {
        "code": "find /home/mine -iname *.png -exec sh -c cp $0 /home/mine/pngcoppies/copy/$0 {} ;",
        "text": "search for all file file in a folder and cop i them to a not h folder ..",
        "id": 399,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'home', '/', 'mine', '-', 'i', 'name', '*', '.', 'png', '-', 'exec', 'sh', '-', 'c', 'cp', '$', 'special_variable_name', 'word', 'word', 'word', 'find', '<number>', '/', 'home', '/', 'mine', '/', 'pngcoppies', '/', 'copy', '/', '$', 'special_variable_name', '{', '}', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 8, 0, 0, 0, 0, 0, 9, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 0, 29, 30, 43]]",
            "sibling_edges": "[[30, 9, 2, 3, 4, 5, 6, 7, 8, 27, 43, 10, 11, 12, 14, 15, 17, 18, 20, 23, 26, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42], [1, 2, 3, 4, 5, 6, 7, 8, 26, 28, 29, 11, 12, 13, 15, 16, 18, 19, 21, 24, 27, 42, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 44, 45], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 44, 45, 1]]"
        }
    },
    {
        "code": "yes",
        "text": "output string regex cont in u until kill ..",
        "id": 400,
        "graph": {
            "nodes": "['program', 'command', ';', 'command_name', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'simple_expansion', 'concatenation', 'concatenation', 'word', '/', 'home', '/', 'mine', '-', 'i', 'name', '*', '.', 'png', '-', 'exec', 'sh', '-', 'c', 'cp', '$', 'special_variable_name', 'word', 'simple_expansion', 'word', 'word', 'find', '<number>', '/', 'home', '/', 'mine', '/', 'pngcoppies', '/', 'copy']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 8, 0, 0, 0, 0, 0, 9, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 0, 0, 29, 30, 43]]",
            "sibling_edges": "[[30, 9, 2, 3, 4, 5, 6, 7, 8, 27, 43, 10, 11, 12, 14, 15, 17, 18, 20, 23, 26, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42], [1, 2, 3, 4, 5, 6, 7, 8, 26, 28, 29, 11, 12, 13, 15, 16, 18, 19, 21, 24, 27, 42, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 44, 45], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 44, 45, 1]]"
        }
    },
    {
        "code": "echo Regex | tr Regex Regex",
        "text": "rep lac all space with comma in regex append with regex and save result string to v aria bl regex ..",
        "id": 401,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'regex', 'word', 'regex', 'regex', 'echo', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 2, 0, 3, 4, 5, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3], [1, 7, 2, 3, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 6, 1, 11, 8], [6, 1, 11, 8, 9]]"
        }
    },
    {
        "code": "ls -F -l -t -r File",
        "text": "print long list of director i regex sort from old to new with append ind ic ..",
        "id": 402,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'f', '-', 'l', '-', 't', '-', 'r', 'file', 'ls']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 9, 11, 13], [1, 2, 3, 4, 5, 8, 10, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "sort --unique File | split --numeric-suffixes --lines Quantity --suffix-length Quantity --verbose",
        "text": "split sort and uni qu line in file file into file with at most number line each with num er suffix of length number ..",
        "id": 403,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '--', 'unique', 'file', 'word', '--', 'numeric', '-', 'suffix', '--', 'line', 'quantity', '--', 'suffix', '-', 'length', 'quantity', '--', 'verbose', 'sort', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 7, 8, 9, 9, 10, 14]]",
            "sibling_edges": "[[3, 1, 10, 2, 14, 4, 5, 6, 7, 8, 11, 15, 16, 17, 19, 22, 23, 24, 27], [1, 14, 2, 3, 4, 5, 6, 7, 8, 9, 12, 16, 17, 18, 20, 23, 24, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 1, 30, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [11, 12, 13, 1, 30, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -or -name Regex \\) -print0 | xargs -0 -I {} grep -H -i -n Regex {}",
        "text": "find string regex case in sen it in all file and file file under current director i tree and display match line along with file name and line number ..",
        "id": 404,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', '-', 'h', '-', 'i', '-', 'n', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 10, 0, 11, 11, 12, 12, 0, 0, 13, 14, 14, 15, 15, 16, 16, 17, 0, 0, 18, 35, 35, 40, 41, 50, 51]]",
            "sibling_edges": "[[10, 1, 18, 2, 3, 4, 5, 6, 7, 8, 9, 35, 11, 12, 41, 13, 14, 15, 16, 17, 20, 22, 25, 27, 30, 32, 33, 36, 38, 40, 43, 45, 47, 50, 53], [1, 35, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 40, 13, 14, 15, 16, 17, 50, 21, 23, 26, 28, 31, 33, 34, 37, 39, 41, 44, 46, 48, 51, 54]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[52, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 1, 53, 54, 36, 37, 38, 39, 55, 56, 42, 43, 44, 45, 46, 47, 48, 49, 57], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 1, 53, 54, 36, 37, 38, 39, 55, 56, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58]]"
        }
    },
    {
        "code": "awk -F Regex Program Program | column -t -s Regex",
        "text": "print first line and line with regex as third regex se par field in regex and format result as a regex delimit tab l ..",
        "id": 405,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'f', 'regex', 'program', 'program', 'word', '-', 't', '-', 's', 'regex', 'a', 'wk', 'column']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 5, 0, 6, 6, 7, 7, 8, 9, 9, 15]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 15, 6, 7, 10, 16, 18, 21], [1, 15, 2, 3, 4, 5, 6, 7, 8, 11, 17, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 22, 10, 11, 12, 13, 14, 1, 23, 16, 17, 18, 19], [22, 10, 11, 12, 13, 14, 1, 23, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -or -name Regex",
        "text": "display all file with name regex and regex in current folder and not search in sub director i ..",
        "id": 406,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 12, 15, 18, 20], [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "chown Regex File",
        "text": "c hang owner of directory to regex ..",
        "id": 407,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "watch -n Quantity date",
        "text": "exe cut regex ever i second ..",
        "id": 408,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', 'date', 'watch']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "split -a Quantity File",
        "text": "split regex into file with at most number line each and use a prefix length of number ..",
        "id": 409,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'a', 'quantity', 'file', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find -L Path -name Regex -exec rm {} +",
        "text": "find all file who be e name end with regex in file director i tree follow s ym link and de let them ..",
        "id": 410,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'path', '-', 'name', 'regex', '-', 'exec', 'rm', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 0, 0, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 9, 12, 15, 18], [1, 2, 3, 4, 5, 6, 18, 7, 10, 13, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 20]]"
        }
    },
    {
        "code": "diff -b -u Quantity File File",
        "text": "print a minim set of differ between file in director i regex and regex treat absent file as e mp ti ig nor differ in white spa c treat all file as text and print number line ..",
        "id": 411,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'b', '-', 'u', 'quantity', 'file', 'file', 'diff']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 9], [1, 2, 3, 4, 5, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -size +Size -exec ls -l -h {} \\;",
        "text": "display a long list of file and director i with human read a bl size under file director i tree which be big than size ..",
        "id": 412,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'exec', 'ls', '-', 'l', '-', 'h', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 0, 0, 8, 8, 9, 22, 23]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 23, 11, 13, 15, 18, 20, 22, 24], [1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 14, 16, 19, 21, 23, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24, 25]]"
        }
    },
    {
        "code": "comm -1 -2 <( sort File ) <( sort File ) | wc -l",
        "text": "count number of equal line in file and file ..",
        "id": 413,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'number', 'word', 'word', '-', '<number>', '-', '<number>', '<(', ')', '<(', ')', 'word', '-', 'l', 'comm', 'word', 'word', 'wc', 'word', 'file', 'word', 'file', 'sort', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0, 0, 4, 4, 5, 0, 0, 14, 0, 18, 0, 19, 21, 23]]",
            "sibling_edges": "[[13, 1, 5, 2, 3, 11, 14, 6, 8, 10, 18, 12, 19, 15, 21, 23], [1, 14, 2, 3, 10, 12, 4, 7, 9, 21, 11, 23, 13, 16, 18, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 6, 7, 8, 9, 10, 25, 22, 11, 12, 26, 24, 13, 1, 20, 15], [6, 7, 8, 9, 10, 25, 22, 11, 12, 26, 24, 13, 1, 20, 15, 16]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file and director i under current director i ..",
        "id": 414,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "su user1 -c ssh user1@192.168.1.2 \"awk '\\\\$5==1{print \\\\$3}' filename.log\" | uniq -c",
        "text": "run command ssh file regex regex file as regex and un if i result ..",
        "id": 415,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'user1', '-', 'c', 'ssh', 'user1', '@', '<number>', '.', '<number>', '.', '<number>', '.', '<number>', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', '-', 'c', 'su', \"'\", 'a', 'wk', \"'\", '\\\\\\\\', '$', 'variable_name', '=', '=', '<number>', '{', 'print', '\\\\\\\\', '$', 'variable_name', '}', \"'\", 'filename', '.', 'log', \"'\", 'uni', 'q', '<number>', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 7, 21, 21, 21, 21, 22, 0, 0, 23, 23, 23, 24, 25, 26, 0, 0, 27, 28, 28, 28, 28, 28, 29, 29, 39, 47]]",
            "sibling_edges": "[[28, 1, 7, 2, 3, 4, 5, 25, 29, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 39, 23, 24, 26, 47, 27, 30, 33, 34, 35, 38, 40, 41, 46, 49, 50, 51, 52, 54], [1, 29, 2, 3, 4, 5, 21, 26, 6, 10, 13, 14, 15, 16, 17, 18, 19, 20, 22, 38, 23, 24, 25, 46, 27, 28, 31, 34, 35, 36, 39, 41, 42, 47, 50, 51, 52, 53, 55]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 33, 34, 35, 36, 37, 38, 56, 40, 41, 42, 43, 44, 45, 46, 57, 48, 49, 50, 51, 52, 53, 1, 54, 55, 30], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 33, 34, 35, 36, 37, 38, 56, 40, 41, 42, 43, 44, 45, 46, 57, 48, 49, 50, 51, 52, 53, 1, 54, 55, 30, 31]]"
        }
    },
    {
        "code": "find Path -not \\( -path Regex -prune \\) -not \\( -path Regex -prune \\) -type f",
        "text": "list all regular file which path be not regex or regex ..",
        "id": 416,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'not', '\\\\', '(', '-', 'path', 'regex', '-', 'prune', '\\\\', ')', '-', 'not', '\\\\', '(', '-', 'path', 'regex', '-', 'prune', '\\\\', ')', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 14, 15, 16]]",
            "sibling_edges": "[[16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 20, 22, 25, 27, 29, 31, 33, 36, 38, 40], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 21, 23, 26, 28, 30, 32, 34, 37, 39, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]]"
        }
    },
    {
        "code": "tmux show-environment | grep RBENV",
        "text": "check if rbenv be def in in current t mu x session environ ..",
        "id": 417,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'show', '-', 'environment', 'word', 'rbenv', 't', 'mu', 'x', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 2, 2, 2, 0, 3, 4, 4, 4, 8]]",
            "sibling_edges": "[[2, 1, 4, 8, 5, 6, 10, 11], [1, 8, 2, 3, 6, 7, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 12, 5, 6, 7, 1, 13], [11, 12, 5, 6, 7, 1, 13, 9]]"
        }
    },
    {
        "code": "echo -n $( hostname )",
        "text": "print host name without a new l in ..",
        "id": 418,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'n', '$(', ')', 'echo', 'word', 'host', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 1, 1, 0, 0, 2, 0, 8, 8]]",
            "sibling_edges": "[[2, 1, 3, 5, 8, 9], [1, 5, 4, 8, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 3, 4, 5, 9, 10], [3, 4, 5, 9, 10, 6]]"
        }
    },
    {
        "code": "comm -1 -2 <( comm -1 -2 <( comm -1 -2 <( sort File ) <( sort File ) ) <( sort File ) ) <( sort File )",
        "text": "print common line of file regex regex regex and regex ..",
        "id": 419,
        "graph": {
            "nodes": "['command', 'number', 'number', 'word', '-', '<number>', '-', '<number>', '<(', ')', '<(', ')', 'comm', 'number', 'number', 'word', 'word', '-', '<number>', '-', '<number>', '<(', ')', '<(', ')', 'word', 'file', 'comm', 'number', 'number', 'word', 'sort', 'word', '-', '<number>', '-', '<number>', '<(', ')', '<(', ')', 'word', 'file', 'comm', 'word', 'word', 'sort', 'word', 'file', 'word', 'file', 'sort', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 13, 13, 14, 14, 0, 0, 0, 0, 0, 15, 16, 0, 0, 0, 25, 0, 28, 28, 29, 29, 0, 0, 0, 0, 0, 30, 32, 0, 0, 41, 0, 44, 0, 45, 47, 49]]",
            "sibling_edges": "[[3, 1, 2, 9, 4, 6, 8, 24, 10, 15, 16, 13, 14, 22, 25, 17, 19, 21, 40, 23, 30, 32, 28, 29, 38, 41, 33, 35, 37, 44, 39, 45, 47, 49], [1, 2, 8, 10, 5, 7, 16, 9, 25, 11, 13, 14, 21, 23, 15, 18, 20, 32, 22, 41, 24, 28, 29, 37, 39, 30, 34, 36, 47, 38, 49, 40, 44, 45]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 4, 5, 6, 7, 8, 27, 17, 18, 19, 20, 21, 43, 33, 34, 35, 36, 37, 51, 48, 38, 39, 52, 50, 40, 22, 23, 46, 42, 24, 9, 10, 31, 26], [4, 5, 6, 7, 8, 27, 17, 18, 19, 20, 21, 43, 33, 34, 35, 36, 37, 51, 48, 38, 39, 52, 50, 40, 22, 23, 46, 42, 24, 9, 10, 31, 26, 11]]"
        }
    },
    {
        "code": "kill -9 $(pgrep amarok)",
        "text": "term in amarok i mm ed i ..",
        "id": 420,
        "graph": {
            "nodes": "['command', 'number', 'word', '-', '<number>', '$(', ')', 'kill', 'word', 'word', 'amarok', 'p', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 1, 1, 0, 0, 2, 0, 0, 8, 9, 9]]",
            "sibling_edges": "[[2, 1, 3, 5, 8, 9, 11], [1, 5, 4, 9, 6, 8, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 3, 4, 5, 11, 12, 10], [3, 4, 5, 11, 12, 10, 6]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec md5sum {} +",
        "text": "cal cu l regex sum of ever i file file in director i tree file ..",
        "id": 421,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'md', '<number>', 'sum', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 7, 0, 0, 8, 9, 22, 23]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 23, 11, 14, 17, 19, 20, 22], [1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 15, 18, 20, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 24]]"
        }
    },
    {
        "code": "find Path -type d -exec mkdir -p Directory \\; -or -type f -exec touch File \\;",
        "text": "cop i an en ti r file str uctu r c re at e mp ti file in cop i instead of cop i actual file ..",
        "id": 422,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'mk', 'dir', '-', 'p', 'directory', '\\\\', ';', '-', 'or', '-', 'type', 'f', '-', 'exec', 'touch', 'file', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 15, 15, 16]]",
            "sibling_edges": "[[16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 21, 23, 25, 28, 30, 32, 35, 39], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 22, 24, 26, 29, 31, 33, 36, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "find all permission file ..",
        "id": 423,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -fprint File",
        "text": "send output from find find command to a file ..",
        "id": 424,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'f', 'print', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -type d",
        "text": "find all director i under regex director i ..",
        "id": 425,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "exec 1 2>&1 | tee ${LOG_FILE}",
        "text": "exe cut number and write standard output and error to standard output and file regex ..",
        "id": 426,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'file_descriptor', '>&', 'number', 'word', '${', 'variable_name', '}', 'word', '<number>', '<number>', '<number>', 'tee', 'log_file', 'exec']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 5, 6, 8, 10]]",
            "sibling_edges": "[[5, 1, 2, 6, 10, 3, 4, 7, 8], [1, 6, 3, 7, 2, 4, 5, 8, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 11, 12, 4, 13, 1, 14, 7, 15], [11, 12, 4, 13, 1, 14, 7, 15, 9]]"
        }
    },
    {
        "code": "chown -R Regex File",
        "text": "recur c hang owner to regex and group to regex of regex ..",
        "id": 427,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "du -s --block-size Size File",
        "text": "find a size of on li target director i in mb format ..",
        "id": 428,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 's', '--', 'block', '-', 'size', 'size', 'file', 'du']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 9, 10], [1, 2, 3, 4, 7, 9, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -path Regex",
        "text": "display all file in current folder which in sub director i tree of folder which begin with word regex follow by a digit ..",
        "id": 429,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} file {}",
        "text": "find all file under current director i and show file inform ..",
        "id": 430,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 0, 0, 9, 17, 17, 22, 23, 25, 26]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 17, 6, 7, 23, 8, 11, 14, 15, 18, 20, 22, 25, 28], [1, 17, 2, 3, 4, 5, 6, 7, 22, 8, 25, 12, 15, 16, 19, 21, 23, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 15, 16, 1, 28, 29, 18, 19, 20, 21, 30, 31, 24, 32], [10, 11, 12, 13, 14, 15, 16, 1, 28, 29, 18, 19, 20, 21, 30, 31, 24, 32, 33]]"
        }
    },
    {
        "code": "ping -c Quantity -b Regex | grep Regex | awk Program | sort | uniq",
        "text": "send number ping to broadcast address file and print uni qu ip who respond ..",
        "id": 431,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'c', 'quantity', '-', 'b', 'regex', 'word', 'regex', 'word', 'program', 'word', 'word', 'ping', 'grep', 'a', 'wk', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 7, 7, 8, 0, 9, 0, 10, 0, 0, 11, 18, 20, 20, 22, 23, 23]]",
            "sibling_edges": "[[8, 1, 9, 2, 10, 3, 22, 4, 11, 5, 6, 7, 18, 20, 12, 15, 26, 29], [1, 18, 2, 20, 3, 22, 4, 23, 5, 6, 7, 8, 9, 10, 13, 16, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 12, 13, 14, 15, 16, 17, 1, 25, 19, 2, 26, 27, 21, 3, 28, 4, 29], [12, 13, 14, 15, 16, 17, 1, 25, 19, 2, 26, 27, 21, 3, 28, 4, 29, 30]]"
        }
    },
    {
        "code": "ps -a -u Regex | grep Regex | awk Program | xargs -I {} pstree {}",
        "text": "print a process tree for each process of user regex ..",
        "id": 432,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'u', 'regex', 'word', 'regex', 'word', 'program', 'word', '-', 'i', 'word', 'word', 'ps', 'tree', 'word', 'word', 'ps', 'grep', 'a', 'wk', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 5, 6, 0, 7, 0, 8, 0, 9, 9, 0, 0, 10, 10, 0, 0, 11, 17, 19, 19, 21, 21, 24, 25, 28, 29]]",
            "sibling_edges": "[[6, 1, 7, 2, 8, 3, 11, 4, 5, 17, 19, 21, 9, 25, 10, 12, 14, 22, 24, 26, 28, 32, 34], [1, 17, 2, 19, 3, 21, 4, 5, 6, 7, 8, 9, 24, 10, 28, 13, 15, 23, 25, 27, 29, 33, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 1, 31, 18, 2, 32, 33, 20, 3, 34, 35, 22, 23, 36, 37, 26, 27, 38], [12, 13, 14, 15, 16, 1, 31, 18, 2, 32, 33, 20, 3, 34, 35, 22, 23, 36, 37, 26, 27, 38, 39]]"
        }
    },
    {
        "code": "ping -q -c Quantity Regex | tail -n Quantity | cut -f Number -d Regex",
        "text": "print ave rag round trip time of number ping to file ..",
        "id": 433,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'q', '-', 'c', 'quantity', 'regex', 'word', '-', 'n', 'quantity', 'word', '-', 'f', 'number', '-', 'd', 'regex', 'ping', 'tail', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 6, 0, 7, 7, 8, 0, 9, 9, 10, 11, 11, 12, 13, 20, 24]]",
            "sibling_edges": "[[6, 1, 8, 2, 13, 3, 4, 5, 20, 7, 24, 9, 10, 11, 14, 16, 21, 25, 28], [1, 20, 2, 24, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 22, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 14, 15, 16, 17, 18, 19, 1, 32, 21, 22, 23, 2, 33, 25, 26, 27, 28, 29], [14, 15, 16, 17, 18, 19, 1, 32, 21, 22, 23, 2, 33, 25, 26, 27, 28, 29, 30]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} rm -r -f {}",
        "text": "de let all file file and director i under current director i ..",
        "id": 434,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', '-', 'r', '-', 'f', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 8, 8, 0, 0, 9, 14, 14, 17, 18, 24, 25]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 18, 6, 7, 8, 11, 15, 17, 20, 22, 24, 27], [1, 14, 2, 3, 4, 5, 17, 6, 7, 8, 24, 12, 16, 18, 21, 23, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 1, 27, 28, 15, 16, 29, 30, 19, 20, 21, 22, 23, 31], [10, 11, 12, 13, 1, 27, 28, 15, 16, 29, 30, 19, 20, 21, 22, 23, 31, 32]]"
        }
    },
    {
        "code": "find Path -depth -type f -printf \"%d\\t%p\\n\"",
        "text": "find depth of all file in current folder and display depth and file name ..",
        "id": 435,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'depth', '-', 'type', 'f', '-', 'print', 'f', \"'\", '%', 'd', '\\\\', 't', '%', 'p', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23], [1, 2, 3, 4, 5, 6, 10, 12, 15, 16, 18, 19, 20, 21, 22, 23, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path -newer File",
        "text": "find all file and director i that be new than file by mod if time ..",
        "id": 436,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -delete",
        "text": "de let all file under and below current director i ..",
        "id": 437,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 11], [1, 2, 3, 4, 8, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "cd `/path/to/my/script`",
        "text": "run file output name of a director i go into that director i ..",
        "id": 438,
        "graph": {
            "nodes": "['command', 'word', '`', '`', 'cd', 'word', '/', 'path', '/', 'to', '/', 'my', '/', 'script']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 1, 0, 5, 5, 5, 5, 5, 5, 5, 5]]",
            "sibling_edges": "[[1, 2, 5, 6, 7, 8, 9, 10, 11, 12], [2, 5, 3, 7, 8, 9, 10, 11, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 6, 7, 8, 9, 10, 11, 12, 13], [2, 6, 7, 8, 9, 10, 11, 12, 13, 3]]"
        }
    },
    {
        "code": "find Path -size +Size -print0 | xargs -0 -I {} mv {} File",
        "text": "find all file in current director i tree who be e size be great than size and move them to regex folder ..",
        "id": 439,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'mv', 'word', 'word', 'file', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 0, 0, 9, 10, 19, 19, 24, 25, 27, 28]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 19, 6, 7, 25, 8, 28, 12, 14, 16, 17, 20, 22, 24, 27, 31], [1, 19, 2, 3, 4, 5, 6, 7, 24, 8, 27, 9, 13, 15, 17, 18, 21, 23, 25, 28, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 18, 1, 31, 32, 20, 21, 22, 23, 33, 34, 26, 35, 36], [11, 12, 13, 14, 15, 16, 17, 18, 1, 31, 32, 20, 21, 22, 23, 33, 34, 26, 35, 36, 29]]"
        }
    },
    {
        "code": "echo `date +%s`/86400 | bc",
        "text": "print day sin c epoch ..",
        "id": 440,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'echo', '`', '`', '/', '<number>', 'bc', 'word', 'word', '+', '%', 's', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 2, 0, 0, 3, 3, 4, 0, 0, 11, 11, 11, 12]]",
            "sibling_edges": "[[3, 1, 2, 7, 6, 11, 8, 12, 13, 14], [1, 4, 6, 3, 12, 7, 9, 11, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 6, 16, 13, 14, 15, 7, 8, 9, 1], [6, 16, 13, 14, 15, 7, 8, 9, 1, 10]]"
        }
    },
    {
        "code": "tac File | sed Program | tac",
        "text": "print all line from last occur r of regex regex to end of file regex ..",
        "id": 441,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'file', 'word', 'program', 'word', 'ta', 'c', 's', 'ed', 'ta', 'c']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 5, 7, 7, 9, 9]]",
            "sibling_edges": "[[3, 1, 4, 2, 5, 7, 10, 12, 14], [1, 7, 2, 9, 3, 4, 11, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 6, 1, 12, 13, 8, 2, 14], [11, 6, 1, 12, 13, 8, 2, 14, 15]]"
        }
    },
    {
        "code": "screen -ls",
        "text": "list all screen session ..",
        "id": 442,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'ls', 'screen']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} grep -P Regex {}",
        "text": "search for perl regex regex in file file under current director i tree ..",
        "id": 443,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'p', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 8, 0, 0, 9, 14, 14, 17, 18, 23, 24]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 18, 6, 7, 8, 11, 15, 17, 20, 23, 26], [1, 14, 2, 3, 4, 5, 17, 6, 7, 8, 23, 12, 16, 18, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30], [10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30, 31]]"
        }
    },
    {
        "code": "find Path -user Regex -type d -perm Permission -print",
        "text": "find director i own by user news with per miss number ..",
        "id": 444,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'type', 'd', '-', 'perm', 'permission', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 14, 17, 20], [1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]]"
        }
    },
    {
        "code": "echo -e Regex | od -a",
        "text": "display name char act in regex ..",
        "id": 445,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'e', 'regex', 'word', '-', 'a', 'echo', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 2, 3, 0, 4, 4, 5, 9]]",
            "sibling_edges": "[[3, 1, 5, 2, 9, 6, 10], [1, 9, 2, 3, 4, 7, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 1, 13, 10], [6, 7, 8, 1, 13, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex -print | xargs -n Quantity -I {} grep Regex {}",
        "text": "find regex file and grep for string regex in those file ..",
        "id": 446,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'word', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 0, 6, 6, 7, 8, 8, 0, 0, 9, 10, 0, 0, 11, 18, 18, 24, 25, 28, 29]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 18, 6, 7, 8, 25, 9, 10, 13, 16, 19, 22, 24, 28, 31], [1, 18, 2, 3, 4, 5, 6, 7, 8, 24, 9, 10, 28, 14, 17, 20, 23, 25, 29, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 1, 31, 32, 19, 20, 21, 22, 23, 33, 34, 26, 27, 35], [12, 13, 14, 15, 16, 17, 1, 31, 32, 19, 20, 21, 22, 23, 33, 34, 26, 27, 35, 36]]"
        }
    },
    {
        "code": "echo -n Regex | od -A n -t x1",
        "text": "print each char act in regex as a hex a dec im val u ..",
        "id": 447,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'regex', 'word', '-', 'a', 'n', '-', 't', 'x', '<number>', 'echo', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 4, 4, 5, 6, 6, 7, 7, 8, 12]]",
            "sibling_edges": "[[3, 1, 8, 2, 12, 4, 5, 6, 9, 13, 16, 18], [1, 12, 2, 3, 4, 5, 6, 7, 10, 14, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 10, 11, 1, 21, 13, 14, 15, 16, 17, 18], [9, 10, 11, 1, 21, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file and director i under current director i ..",
        "id": 448,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -mmin -Quantity -mmin +Quantity -type d",
        "text": "find all director i in file director i tree that be last mod if i more than time span ago but le than time span ago ..",
        "id": 449,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'mm', 'in', '-', 'quantity', '-', 'mm', 'in', '+', 'quantity', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 13, 15, 16, 18, 20], [1, 2, 3, 4, 5, 6, 7, 11, 12, 14, 16, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "find src/js -type f -name *.js > list.txt",
        "text": "find all file script file in a folder and save list to a file ..",
        "id": 450,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', '>', 'word', 'word', 'src', '/', 'js', '-', 'type', 'f', '-', 'name', '*', '.', 'js', 'list', '.', 'txt', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 5, 7, 7, 7, 8]]",
            "sibling_edges": "[[5, 8, 1, 2, 3, 4, 6, 9, 10, 12, 15, 17, 18, 20, 21], [6, 1, 2, 3, 4, 5, 7, 10, 11, 13, 16, 18, 19, 21, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 6, 20, 21], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 6, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity",
        "text": "search current director i up to depth level number for file and director i ..",
        "id": 451,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find . ! -name . -prune -exec sh -c shift $1; mv \"$@\" targetdirectory/ 2 1 {} +",
        "text": "move all file from current director i to regex ..",
        "id": 452,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'number', 'number', 'word', 'word', '.', '!', '-', 'name', '.', '-', 'prune', '-', 'exec', 'sh', '-', 'c', 'shift', '$', 'variable_name', 'word', \"'\", '$', '@', \"'\", 'target', 'directory', '/', '<number>', '<number>', 'word', 'word', '+', 'find', '<number>', 'mv', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 0, 0, 0, 11, 11, 11, 11, 12, 12, 12, 13, 14, 0, 0, 15, 16, 31, 32, 42, 43]]",
            "sibling_edges": "[[31, 1, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 11, 12, 13, 14, 43, 19, 22, 24, 27, 30, 33, 34, 35, 37, 38, 42], [1, 32, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 11, 12, 13, 14, 42, 15, 20, 23, 25, 28, 31, 34, 35, 36, 38, 39, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[45, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 46, 1, 47, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 46, 1, 47, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 44]]"
        }
    },
    {
        "code": "set | grep -E Regex | sed -r -e Program",
        "text": "list all def in bash function ..",
        "id": 453,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'e', 'regex', 'word', '-', 'r', '-', 'e', 'program', 'set', 'grep', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 5, 5, 6, 6, 7, 8, 9, 13, 13]]",
            "sibling_edges": "[[8, 1, 4, 2, 9, 3, 13, 5, 6, 10, 14, 16, 21], [1, 9, 2, 13, 3, 4, 5, 6, 7, 11, 15, 17, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 1, 20, 10, 11, 12, 2, 21, 22, 14, 15, 16, 17], [1, 20, 10, 11, 12, 2, 21, 22, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -type f -name Regex ! -path Regex ! -path Regex",
        "text": "display all file have word regex in name in current folder excl ud those from path directory and file ..",
        "id": 454,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '!', '-', 'path', 'regex', '!', '-', 'path', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 21, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 18, 22, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "find Path -atime +Timespan -print",
        "text": "search in current director i downward all file which not be access sin c time span ..",
        "id": 455,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'a', 'time', '+', 'timespan', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 8, 10, 12], [1, 2, 3, 4, 8, 9, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "yes Regex",
        "text": "infinit print regex to screen ..",
        "id": 456,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'yes']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "rename Regex Regex",
        "text": "r en be all file in current director i with name start with regex so start with regex instead ..",
        "id": 457,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'regex', 'rename']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "for f in fgh*; do mv $f $(echo $f | sed s/^fgh/jkl/g); done",
        "text": "r en be all file in current director i start with regex to start with regex ..",
        "id": 458,
        "graph": {
            "nodes": "['program', 'command', 'command_name', 'word', 'word', 'word', 'regex']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "find Path -name Regex Path Path -mtime -Timespan -print0 | xargs -0 -I {} tar -r -v -f File {}",
        "text": "append all file file mod if i within time span to tar archiv file ..",
        "id": 459,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'path', 'path', '-', 'm', 'time', '-', 'timespan', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'tar', '-', 'r', '-', 'v', '-', 'f', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 6, 7, 7, 7, 8, 8, 9, 9, 9, 0, 10, 10, 11, 11, 0, 0, 12, 13, 13, 14, 14, 15, 15, 16, 0, 0, 17, 32, 32, 37, 38, 47, 48]]",
            "sibling_edges": "[[9, 1, 17, 2, 3, 4, 5, 6, 7, 8, 32, 10, 11, 38, 12, 13, 14, 15, 16, 19, 24, 25, 27, 29, 30, 33, 35, 37, 40, 42, 44, 47, 50], [1, 32, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 37, 12, 13, 14, 15, 16, 47, 20, 25, 26, 28, 30, 31, 34, 36, 38, 41, 43, 45, 48, 51]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[49, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 50, 51, 33, 34, 35, 36, 52, 53, 39, 40, 41, 42, 43, 44, 45, 46, 54], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 50, 51, 33, 34, 35, 36, 52, 53, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55]]"
        }
    },
    {
        "code": "ssh-copy-id myname@somehost",
        "text": "cop i default ssh public key to regex as user regex ..",
        "id": 460,
        "graph": {
            "nodes": "['command', 'word', 'word', 'myname', '@', 'some', 'host', 'ssh', '-', 'copy', '-', 'id']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2]]",
            "sibling_edges": "[[2, 3, 4, 5, 7, 8, 9, 10], [1, 4, 5, 6, 8, 9, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 9, 10, 11, 3, 4, 5], [8, 9, 10, 11, 3, 4, 5, 6]]"
        }
    },
    {
        "code": "grep -i -n -r Regex File",
        "text": "recur find all file with an i case text regex in a current folder and p rec ed find string with it number in file ..",
        "id": 461,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'i', '-', 'n', '-', 'r', 'regex', 'file', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 9, 11], [1, 2, 3, 4, 5, 8, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search for file regex in en ti r file system ..",
        "id": 462,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "set -o errexit",
        "text": "exit shell i mm ed i if an error be encount ..",
        "id": 463,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'o', 'errexit', 'set']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -type f -exec grep -H Regex {} \\;",
        "text": "recur find all file and print all string with regex from that file p rec ed match string with file n be ..",
        "id": 464,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'grep', '-', 'h', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 20, 21]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 21, 11, 14, 17, 20, 22], [1, 2, 3, 4, 5, 6, 7, 20, 8, 12, 15, 18, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22, 23]]"
        }
    },
    {
        "code": "md5 File File",
        "text": "on li get regex of a file ..",
        "id": 465,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'file', 'file', 'md5']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "tar -czf backup.tar.gz --exclude-tag-all=exclude.tag /path/to/backup",
        "text": "c re at a compress archiv excl ud director i contain file ..",
        "id": 466,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'czf', 'backup', '.', 'tar', '.', 'gz', '--', 'exclude', '-', 'tag', '-', 'all', '=', 'exclude', '.', 'tag', '/', 'path', '/', 'to', '/', 'backup', 'tar']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27], [1, 2, 3, 4, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]]"
        }
    },
    {
        "code": "find Path -name Regex -size +Size",
        "text": "find all file and director i with file ext en under file director i tree that be great than size in size ..",
        "id": 467,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'size', '+', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 13], [1, 2, 3, 4, 5, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "ifconfig Regex | grep Regex | cut -d Regex -f Number | cut -d Regex -f Number",
        "text": "show mac address of network inter fa c regex ..",
        "id": 468,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'if', 'config', 'grep', 'cut', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 6, 6, 7, 8, 8, 9, 0, 10, 10, 11, 12, 12, 13, 14, 14, 16, 18, 25]]",
            "sibling_edges": "[[4, 1, 5, 2, 9, 3, 14, 16, 18, 6, 7, 8, 25, 10, 11, 12, 19, 22, 26, 29, 32], [1, 16, 2, 18, 3, 25, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 23, 27, 30, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 33, 15, 1, 34, 17, 2, 35, 19, 20, 21, 22, 23, 24, 3, 36, 26, 27, 28, 29, 30], [33, 15, 1, 34, 17, 2, 35, 19, 20, 21, 22, 23, 24, 3, 36, 26, 27, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec rm -f {} \\;",
        "text": "f orc de let all regular file with name file ..",
        "id": 469,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'rm', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path",
        "text": "find all file and director i under current director i ..",
        "id": 470,
        "graph": {
            "nodes": "['command', 'word', 'word', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -iregex Regex",
        "text": "find all file and director i under current director i that match case in sen it regex file ..",
        "id": 471,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "split -l Quantity File",
        "text": "split file into file with at most number line each ..",
        "id": 472,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'l', 'quantity', 'file', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -atime +Timespan",
        "text": "search current director i tree for file last access more than time span ago ..",
        "id": 473,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'a', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} mv {} File",
        "text": "find all text file in current folder and move all t he be e to a not h folder append file at end of t he be e file ..",
        "id": 474,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'mv', 'word', 'word', 'file', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 0, 0, 7, 8, 13, 13, 16, 17, 19, 20]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 17, 6, 20, 10, 14, 16, 19, 23], [1, 13, 2, 3, 4, 5, 16, 6, 19, 7, 11, 15, 17, 20, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 27, 28], [9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 27, 28, 21]]"
        }
    },
    {
        "code": "find Path -print | xargs -I {} chown Regex {}",
        "text": "c hang owner and group of all file in folder file ..",
        "id": 475,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'print', 'word', '-', 'i', 'word', 'word', 'chow', 'n', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 0, 4, 4, 0, 0, 5, 5, 6, 0, 0, 7, 11, 11, 14, 15, 19, 20]]",
            "sibling_edges": "[[3, 1, 7, 2, 11, 4, 15, 5, 6, 9, 12, 14, 16, 19, 22], [1, 11, 2, 3, 4, 14, 5, 6, 19, 10, 13, 15, 17, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 8, 9, 10, 1, 22, 23, 12, 13, 24, 25, 16, 17, 18, 26], [8, 9, 10, 1, 22, 23, 12, 13, 24, 25, 16, 17, 18, 26, 27]]"
        }
    },
    {
        "code": "read -r -p Regex Regex",
        "text": "read a line from standard input into v aria bl regex without backslash es cap use prompt about to delete all item from history that match regex ..",
        "id": 476,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'p', 'regex', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "touch -m --date Regex File",
        "text": "set mod if timestamp of file regex to specif i file ..",
        "id": 477,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'm', '--', 'date', 'regex', 'file', 'touch']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path | grep Regex | grep Regex",
        "text": "search for file in all file under current director i that match regex in name ..",
        "id": 478,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'path', 'word', 'regex', 'word', 'regex', 'find', 'grep', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 6, 8, 10]]",
            "sibling_edges": "[[3, 1, 4, 2, 6, 8, 10], [1, 8, 2, 10, 3, 4, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 7, 1, 13, 9, 2, 14], [7, 1, 13, 9, 2, 14, 11]]"
        }
    },
    {
        "code": "ln -f -s File Regex",
        "text": "f orc c re at a symbol link name regex with target file ..",
        "id": 479,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'f', '-', 's', 'file', 'regex', 'ln']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -print",
        "text": "find all text file in current folder ..",
        "id": 480,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "sort File | uniq -c",
        "text": "print a count of dup li c line in regex ..",
        "id": 481,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'file', 'word', '-', 'c', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 2, 0, 3, 3, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 7, 10], [1, 6, 2, 3, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 1, 10, 11, 7], [5, 1, 10, 11, 7, 8]]"
        }
    },
    {
        "code": "readlink -f File",
        "text": "save ab sol ut path of regex who be e p be not exist to v aria bl regex ..",
        "id": 482,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'f', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec sed -i Program {} \\;",
        "text": "rep lac all occur r of regex with regex in all regular file with file ext en under file director i tree and mod if i them in p lac ..",
        "id": 483,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 's', 'ed', '-', 'i', 'program', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 0, 0, 10, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 13, 16, 19, 21, 23, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 14, 17, 20, 22, 24, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28, 29]]"
        }
    },
    {
        "code": "dig Regex | grep -e Regex | tr -s Regex Regex | cut -d Regex -f Number",
        "text": "fetch file domain ip address from dig dns lookup ..",
        "id": 484,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'e', 'regex', 'word', '-', 's', 'regex', 'regex', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'dig', 'grep', 'tr', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 5, 6, 0, 7, 7, 8, 9, 0, 10, 10, 11, 12, 12, 13, 14, 16, 20, 25]]",
            "sibling_edges": "[[4, 1, 6, 2, 9, 3, 14, 16, 5, 20, 7, 8, 25, 10, 11, 12, 17, 21, 26, 29], [1, 16, 2, 20, 3, 25, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 22, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 15, 1, 33, 17, 18, 19, 2, 34, 21, 22, 23, 24, 3, 35, 26, 27, 28, 29, 30], [15, 1, 33, 17, 18, 19, 2, 34, 21, 22, 23, 24, 3, 35, 26, 27, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} +",
        "text": "set number per miss to all regular file under file ..",
        "id": 485,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 20]]"
        }
    },
    {
        "code": "read -n Quantity -p Regex Regex",
        "text": "read a sing l char act from standard input with prompt regex and save respons to v aria bl regex ..",
        "id": 486,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', '-', 'p', 'regex', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 10], [1, 2, 3, 4, 5, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "command | less",
        "text": "page interact through output of run regex arrow key move view around regex and regex key go to file of output directory key init i a search q key quit etc ..",
        "id": 487,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'command', 'le']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 0, 2, 3]]",
            "sibling_edges": "[[2, 1], [1, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 1], [1, 5]]"
        }
    },
    {
        "code": "find Path -type f -mtime Timespan",
        "text": "find all regular file that be mod if i regex day ago under current director i tree ..",
        "id": 488,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'm', 'time', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "loc at all file file in current director i tree ..",
        "id": 489,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path Path -name Regex -type f",
        "text": "look for file regex under file and file ..",
        "id": 490,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'name', 'regex', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 10, 13], [1, 2, 3, 4, 5, 6, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 9, 10, 11, 12, 13, 14], [8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec tar -u -v -f File {} \\;",
        "text": "c re at a g zip archiv file of all file file under regex ..",
        "id": 491,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'tar', '-', 'u', '-', 'v', '-', 'f', 'file', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 0, 0, 12, 12, 13, 31, 32]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 15, 18, 21, 24, 26, 28, 31, 33], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 31, 12, 16, 19, 22, 25, 27, 29, 32, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 33], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 33, 34]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -delete -printf \"%h\\0\" | xargs -0 -I {} rmdir {}",
        "text": "recur r emo v all file like file in current folder and r emo v folder with such file if becom e mp ti ..",
        "id": 492,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'number', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'delete', '-', 'print', 'f', \"'\", '%', 'h', '\\\\', '<number>', \"'\", 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'dir', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 0, 10, 10, 11, 11, 0, 0, 12, 12, 0, 0, 13, 32, 32, 37, 38, 41, 42]]",
            "sibling_edges": "[[9, 1, 13, 2, 3, 4, 5, 6, 7, 8, 32, 10, 11, 38, 12, 15, 18, 21, 23, 24, 26, 27, 28, 29, 30, 33, 35, 37, 39, 41, 44], [1, 32, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 37, 12, 41, 16, 19, 22, 24, 25, 27, 28, 29, 30, 31, 34, 36, 38, 40, 42, 45]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 44, 45, 33, 34, 35, 36, 46, 47, 39, 40, 48], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 44, 45, 33, 34, 35, 36, 46, 47, 39, 40, 48, 49]]"
        }
    },
    {
        "code": "ls -l -R File | grep -v Regex | awk Program",
        "text": "save byte size of all content of regex folder in regex v aria bl ..",
        "id": 493,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'l', '-', 'r', 'file', 'word', '-', 'v', 'regex', 'word', 'program', 'ls', 'grep', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 0, 6, 6, 7, 0, 8, 9, 15, 19, 19]]",
            "sibling_edges": "[[5, 1, 7, 2, 9, 3, 4, 15, 6, 19, 10, 12, 16, 23], [1, 15, 2, 19, 3, 4, 5, 6, 7, 8, 11, 13, 17, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 13, 14, 1, 22, 16, 17, 18, 2, 23, 24], [10, 11, 12, 13, 14, 1, 22, 16, 17, 18, 2, 23, 24, 20]]"
        }
    },
    {
        "code": "find Path -group Regex -type f",
        "text": "find all regular file in current folder which belong to group regex ..",
        "id": 494,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'group', 'regex', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path \\( -size +Size -fprintf File '%-10s %p\\n' \\)",
        "text": "find all file and director i great than size and print list along with size in file file ..",
        "id": 495,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'path', '\\\\', '(', '-', 'size', '+', 'size', '-', 'f', 'print', 'f', 'file', \"'\", '%', '-', '<number>', 's', '%', 'p', \"'\", '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 30], [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "source <( grep -v Regex File )",
        "text": "interpret file in current shell ig nor line that contain regex ..",
        "id": 496,
        "graph": {
            "nodes": "['command', 'word', '<(', ')', 'source', 'word', 'word', 'word', 'word', '-', 'v', 'regex', 'file', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 1, 0, 0, 0, 0, 5, 5, 6, 7, 8]]",
            "sibling_edges": "[[1, 2, 7, 8, 5, 6, 9], [2, 8, 3, 5, 6, 7, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 13, 9, 10, 11, 12], [2, 13, 9, 10, 11, 12, 3]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -or -name Regex -or -name Regex \\) -exec rm {} \\;",
        "text": "clean director i and sub director i of tempo rar i file genus t du re normal use ..",
        "id": 497,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 0, 0, 14, 14, 15, 37, 38]]",
            "sibling_edges": "[[15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 17, 19, 22, 24, 27, 29, 32, 34, 37, 39], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 37, 14, 18, 20, 23, 25, 28, 30, 33, 35, 38, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[41, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 39], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 39, 40]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -exec md5sum {} + | awk Program | sort | md5sum",
        "text": "cal cu l regex sum of sort list of regex sum of all file file under directory ..",
        "id": 498,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'md', '<number>', 'sum', 'word', 'word', '+', 'word', 'program', 'word', 'word', 'find', '{', '}', 'a', 'wk', 'sort', 'md', '<number>', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 10, 0, 0, 11, 0, 12, 0, 0, 13, 26, 27, 29, 29, 31, 32, 32, 32]]",
            "sibling_edges": "[[11, 1, 12, 2, 31, 3, 13, 4, 5, 6, 7, 8, 9, 10, 27, 29, 15, 18, 21, 23, 24, 26, 36, 39, 40], [1, 29, 2, 31, 3, 32, 4, 5, 6, 7, 8, 9, 10, 26, 11, 12, 16, 19, 22, 24, 25, 27, 37, 40, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 34, 35, 28, 1, 36, 37, 30, 2, 38, 3, 39, 40], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 34, 35, 28, 1, 36, 37, 30, 2, 38, 3, 39, 40, 41]]"
        }
    },
    {
        "code": "true | echo Regex",
        "text": "exe cut regex in a subshel that be open by command regex ..",
        "id": 499,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'true', 'echo']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 0, 2, 3, 4]]",
            "sibling_edges": "[[3, 1, 4], [1, 4, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 1, 7], [1, 7, 5]]"
        }
    },
    {
        "code": "cat File | sed Program",
        "text": "r emo v regex from content of file and save output to v aria bl regex ..",
        "id": 500,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'file', 'word', 'program', 'cat', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 9], [1, 6, 2, 3, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 1, 9, 10], [5, 1, 9, 10, 7]]"
        }
    },
    {
        "code": "find Path \\( -perm -Permission -fprintf File '%#m %u %p\\n' \\) -and \\( -size +Size -fprintf File '%-10s %p\\n' \\)",
        "text": "find all file in file system which set permission en a bl and save them to file and those which size great than size save them to file ..",
        "id": 501,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'path', '\\\\', '(', '-', 'perm', '-', 'permission', '-', 'f', 'print', 'f', 'file', \"'\", '%', '#', 'm', '%', 'u', '%', 'p', \"'\", '\\\\', ')', '-', 'and', '\\\\', '(', '-', 'size', '+', 'size', '-', 'f', 'print', 'f', 'file', \"'\", '%', '-', '<number>', 's', '%', 'p', \"'\", '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 17]]",
            "sibling_edges": "[[17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 21, 23, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 45, 47, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 62], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 22, 24, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 44, 46, 48, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 63]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[64, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]]"
        }
    },
    {
        "code": "ssh -t me@machine ./executeMyScript && bash -i",
        "text": "ssh into regex run file and spawn a bash shell ..",
        "id": 502,
        "graph": {
            "nodes": "['list', '&&', 'word', 'word', 'word', 'word', 'word', '-', 't', 'me', '@', 'machine', '.', '/', 'executemyscript', 'word', '-', 'i', 'ssh', 'bash']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 4, 4, 4, 0, 5, 5, 6, 15]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 15, 7, 9, 10, 12, 13, 16], [1, 15, 2, 3, 4, 5, 8, 10, 11, 13, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 10, 11, 12, 13, 14, 1, 19, 16], [7, 8, 9, 10, 11, 12, 13, 14, 1, 19, 16, 17]]"
        }
    },
    {
        "code": "read -n Quantity Regex",
        "text": "read one char act from standard input into v aria bl file ..",
        "id": 503,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find -x Path -inum Quantity",
        "text": "find file and director i with i nod number number under file director i tree without t raver other file ..",
        "id": 504,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'x', 'path', '-', 'in', 'um', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 9, 10], [1, 2, 3, 4, 7, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "read -p Regex",
        "text": "read a line from standard input into v aria bl regex with prompt regex ..",
        "id": 505,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'p', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -iname Regex -print0 | xargs -0 -I {} rm {}",
        "text": "de let all file file under file ..",
        "id": 506,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 0, 0, 9, 18, 18, 23, 24, 26, 27]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 18, 6, 7, 24, 8, 11, 12, 15, 16, 19, 21, 23, 26, 29], [1, 18, 2, 3, 4, 5, 6, 7, 23, 8, 26, 12, 13, 16, 17, 20, 22, 24, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 10, 11, 12, 13, 14, 15, 16, 17, 1, 29, 30, 19, 20, 21, 22, 31, 32, 25, 33], [10, 11, 12, 13, 14, 15, 16, 17, 1, 29, 30, 19, 20, 21, 22, 31, 32, 25, 33, 34]]"
        }
    },
    {
        "code": "find /full/path/to/dir -name *.txt -print0 | xargs -0 >/tmp/logfile",
        "text": "find all file file in current director i tree and save path name to file ..",
        "id": 507,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'word', 'word', 'word', 'word', 'number', '/', 'tmp', '/', 'log', 'file', 'word', '/', 'full', '/', 'path', '/', 'to', '/', 'dir', '-', 'name', '*', '.', 'txt', '-', 'print', '<number>', 'word', '-', '<number>', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 0, 8, 8, 14, 31, 31]]",
            "sibling_edges": "[[8, 7, 1, 2, 14, 4, 5, 6, 31, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 32, 35], [2, 1, 31, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 33, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 35, 36, 32, 33, 2, 9, 10, 11, 12], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 35, 36, 32, 33, 2, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path",
        "text": "find all file and director i in all path expand by glob pattern regex ..",
        "id": 508,
        "graph": {
            "nodes": "['command', 'word', 'word', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find . -name *.txt | xargs python -c import sys; print sys.argv[1:]",
        "text": "find all file file and director i under current director i and exe cut python code file with file path as argument ..",
        "id": 509,
        "graph": {
            "nodes": "['program', ';', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', '*', '.', 'txt', 'word', 'python', '-', 'c', 'import', 'sys', 'print', 'sys', '.', 'argv', '[', '<number>', ':', ']', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 5, 5, 0, 6, 7, 7, 8, 9, 10, 11, 11, 11, 12, 13, 13, 14, 15, 22, 22]]",
            "sibling_edges": "[[9, 1, 5, 2, 10, 15, 3, 4, 22, 6, 7, 8, 11, 12, 13, 17, 19, 20, 24, 29, 30, 33, 37], [1, 10, 2, 22, 11, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 18, 20, 21, 25, 30, 31, 34, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 16, 17, 18, 19, 20, 21, 2, 37, 38, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 32, 33, 34], [16, 17, 18, 19, 20, 21, 2, 37, 38, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 32, 33, 34, 35]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex",
        "text": "find file file in folder directory ..",
        "id": 510,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find ./subdirectory -type f 2>>error.log",
        "text": "display all regular file in a folder and save error to a file file ..",
        "id": 511,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'file_descriptor', '>>', 'word', 'word', '.', '/', 'subdirectory', '-', 'type', 'f', '<number>', 'error', '.', 'log', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 6, 6, 6, 7]]",
            "sibling_edges": "[[3, 7, 1, 2, 4, 5, 8, 9, 11, 15, 16], [4, 1, 2, 3, 5, 6, 9, 10, 12, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 5, 15, 16], [8, 9, 10, 11, 12, 13, 14, 5, 15, 16, 17]]"
        }
    },
    {
        "code": "cp -n -r File File",
        "text": "cop i regex recur to regex but without over writ exist file ..",
        "id": 512,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'n', '-', 'r', 'file', 'file', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "echo $( date )",
        "text": "save current date to regex v aria bl ..",
        "id": 513,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'echo', 'word', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 0, 5]]",
            "sibling_edges": "[[1, 2, 5], [2, 5, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 6], [2, 6, 3]]"
        }
    },
    {
        "code": "find Path -type d -iregex Regex",
        "text": "find all director i under current director i tree that match case in sen it regex file in path ..",
        "id": 514,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'i', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -size +Size -size -Size",
        "text": "find all file in current folder which be big than size and le than size ..",
        "id": 515,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'size', '-', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 10, 12, 14], [1, 2, 3, 4, 5, 9, 11, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -inum Quantity -exec mv {} File \\;",
        "text": "find all file and director i with i nod number number and move them to regex ..",
        "id": 516,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'in', 'um', 'quantity', '-', 'exec', 'mv', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 0, 0, 6, 7, 7, 8, 17, 18]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 18, 6, 10, 11, 14, 17, 20], [1, 2, 3, 4, 5, 17, 6, 7, 11, 12, 15, 18, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 19, 20], [9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 19, 20, 21]]"
        }
    },
    {
        "code": "find . -type d -print0 | tar cf dirstructure.tar --null --files-from - --no-recursion",
        "text": "archiv director i str uctu r under current director i into file ..",
        "id": 517,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'd', '-', 'print', '<number>', 'word', 'cf', 'dir', 'structure', '.', 'tar', '--', 'null', '--', 'file', '-', 'from', '-', '--', 'no', '-', 'recursion', 'find', 'tar']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 10, 11, 11, 11, 11, 12, 20]]",
            "sibling_edges": "[[5, 1, 12, 2, 3, 4, 20, 6, 7, 8, 9, 10, 14, 17, 18, 22, 23, 24, 26, 28, 29, 30, 33, 34, 35], [1, 20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 18, 19, 23, 24, 25, 27, 29, 30, 31, 34, 35, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 13, 14, 15, 16, 17, 18, 19, 1, 38, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [13, 14, 15, 16, 17, 18, 19, 1, 38, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]]"
        }
    },
    {
        "code": "find Path -type d -printf '%T+ %p\\n' | sort | head - Quantity",
        "text": "find director i with least mod if time under current director i ..",
        "id": 518,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'print', 'f', \"'\", '%', 't', '+', '%', 'p', \"'\", 'word', 'word', '-', 'quantity', 'find', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 0, 0, 8, 9, 10, 25, 26]]",
            "sibling_edges": "[[7, 1, 25, 2, 10, 3, 4, 5, 6, 26, 8, 12, 15, 16, 18, 19, 20, 21, 22, 23], [1, 25, 2, 26, 3, 4, 5, 6, 7, 8, 9, 13, 16, 17, 19, 20, 21, 22, 23, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 30, 2, 31, 27], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 30, 2, 31, 27, 28]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "search for file name file in a case in sen it manner ..",
        "id": 519,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex -exec ln -s {} Regex \\;",
        "text": "c re at a symbol link in director i file for each file and director i under current director i start with regex ..",
        "id": 520,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'ln', '-', 's', 'word', 'word', 'regex', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 8, 8, 9, 19, 20]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 20, 7, 11, 14, 17, 19, 22], [1, 2, 3, 4, 5, 6, 19, 7, 8, 12, 15, 18, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 25, 26, 21, 22], [10, 11, 12, 13, 14, 15, 16, 17, 18, 25, 26, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path",
        "text": "find all file and director i in path expand by glob pattern file ..",
        "id": 521,
        "graph": {
            "nodes": "['command', 'word', 'word', 'path', 'find']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\; -or -type f -exec chmod Permission {} \\;",
        "text": "find all file and director i under file and set director i per miss to number and file per miss to number ..",
        "id": 522,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', '-', 'or', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 0, 0, 14, 14, 15, 25, 26, 39, 40]]",
            "sibling_edges": "[[15, 1, 2, 3, 4, 5, 6, 26, 7, 8, 9, 10, 11, 12, 13, 40, 17, 20, 22, 25, 27, 29, 31, 34, 36, 39, 41], [1, 2, 3, 4, 5, 6, 25, 7, 8, 9, 10, 11, 12, 13, 39, 14, 18, 21, 23, 26, 28, 30, 32, 35, 37, 40, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 16, 17, 18, 19, 20, 21, 22, 23, 24, 44, 45, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 46, 47, 41], [16, 17, 18, 19, 20, 21, 22, 23, 24, 44, 45, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 46, 47, 41, 42]]"
        }
    },
    {
        "code": "join -o 1.1,1.2,1.3,2.1,2.2,2.3 -j Regex <( sort -k Number File ) <( sort -k Number File )",
        "text": "merg colon se par inform from regex and regex where second field of both file match sort result base on field for each line output first number field of first file follow by first number field of ..",
        "id": 523,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'o', '<number>', '.', '<number>', ',', '<number>', '.', '<number>', ',', '<number>', '.', '<number>', ',', '<number>', '.', '<number>', ',', '<number>', '.', '<number>', ',', '<number>', '.', '<number>', '-', 'j', 'regex', '<(', ')', '<(', ')', 'join', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'k', 'number', 'file', 'word', '-', 'k', 'number', 'file', 'sort', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 39, 39, 40, 41, 0, 42, 42, 43, 44, 45, 50]]",
            "sibling_edges": "[[5, 1, 2, 3, 4, 35, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 41, 36, 44, 45, 39, 40, 50, 42, 43, 46, 51], [1, 2, 3, 4, 34, 36, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 45, 35, 50, 37, 39, 40, 41, 42, 43, 44, 47, 52]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 55, 46, 47, 48, 49, 35, 36, 56, 51, 52, 53, 54], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 55, 46, 47, 48, 49, 35, 36, 56, 51, 52, 53, 54, 37]]"
        }
    },
    {
        "code": "find Path -group Regex -print",
        "text": "display all file in file system which belong to group lighttpd ..",
        "id": 524,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'group', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -type f -exec basename {} \\; | xargs -I {} rm {}",
        "text": "r emo v file in current director i accord to file n be find in directory ..",
        "id": 525,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'base', 'name', 'word', 'word', '\\\\', ';', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', '{', '}', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 0, 0, 7, 7, 0, 8, 8, 0, 0, 9, 0, 0, 10, 19, 20, 23, 23, 26, 27, 29, 30]]",
            "sibling_edges": "[[7, 1, 10, 2, 3, 4, 5, 6, 20, 23, 8, 27, 9, 12, 15, 17, 19, 21, 24, 26, 29, 34], [1, 23, 2, 3, 4, 5, 6, 19, 7, 8, 26, 9, 29, 13, 16, 18, 20, 22, 25, 27, 30, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 11, 12, 13, 14, 15, 16, 17, 18, 32, 33, 21, 22, 1, 34, 35, 24, 25, 36, 37, 28, 38], [11, 12, 13, 14, 15, 16, 17, 18, 32, 33, 21, 22, 1, 34, 35, 24, 25, 36, 37, 28, 38, 39]]"
        }
    },
    {
        "code": "find Path -perm Permission -print",
        "text": "check if myfil number per miss ..",
        "id": 526,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex -size +Size -print",
        "text": "find all file file in file big than size ..",
        "id": 527,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'size', '+', 'size', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14, 16], [1, 2, 3, 4, 5, 6, 10, 13, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -name Regex -execdir pwd \\;",
        "text": "search for a shell script in current folder and display current folder path but search from sub director i ..",
        "id": 528,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'dir', 'pwd', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 13, 16], [1, 2, 3, 4, 5, 6, 10, 13, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -type f -regex Regex",
        "text": "search current director i tree for all i mag file ..",
        "id": 529,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type f -exec md5sum {} \\; | awk Program",
        "text": "cal cu l regex sum of all file in current director i with file n be print first ..",
        "id": 530,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'f', '-', 'exec', 'md', '<number>', 'sum', 'word', 'word', '\\\\', ';', 'word', 'program', 'find', '{', '}', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 8, 0, 0, 9, 9, 0, 10, 11, 25, 26, 29, 29]]",
            "sibling_edges": "[[9, 1, 11, 2, 3, 4, 5, 6, 7, 8, 26, 29, 13, 14, 17, 20, 22, 23, 25, 27, 34], [1, 29, 2, 3, 4, 5, 6, 7, 8, 25, 9, 10, 14, 15, 18, 21, 23, 24, 26, 28, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32, 33, 27, 28, 1, 34, 35], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32, 33, 27, 28, 1, 34, 35, 30]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} rm {}",
        "text": "r emo v all file file from file director i tree ..",
        "id": 531,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 0, 0, 9, 17, 17, 22, 23, 25, 26]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 17, 6, 7, 23, 8, 11, 14, 15, 18, 20, 22, 25, 28], [1, 17, 2, 3, 4, 5, 6, 7, 22, 8, 25, 12, 15, 16, 19, 21, 23, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 15, 16, 1, 28, 29, 18, 19, 20, 21, 30, 31, 24, 32], [10, 11, 12, 13, 14, 15, 16, 1, 28, 29, 18, 19, 20, 21, 30, 31, 24, 32, 33]]"
        }
    },
    {
        "code": "find /path -type f -name *.ext -exec my_cool_script {} ;",
        "text": "find all file regular file under file and exe cut regex for each of them with file path as argument ..",
        "id": 532,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'path', '-', 'type', 'f', '-', 'name', '*', '.', 'ext', '-', 'exec', 'my_cool_script', 'word', 'word', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 0, 0, 9, 23, 24]]",
            "sibling_edges": "[[24, 9, 2, 3, 4, 5, 6, 7, 8, 10, 12, 15, 17, 18, 20, 23], [1, 2, 3, 4, 5, 6, 7, 8, 23, 11, 13, 16, 18, 19, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 1]]"
        }
    },
    {
        "code": "find Path -name Regex -print -xdev",
        "text": "find file and director i name file in root file system partit ..",
        "id": 533,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '-', 'x', 'dev', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 13, 14], [1, 2, 3, 4, 5, 9, 12, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "chgrp -R Regex File",
        "text": "recur c hang group ownership of every th within a current director i to regex ..",
        "id": 534,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'regex', 'file', 'chg', 'rp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -exec rm {} \\;",
        "text": "non recur find all file file in a current folder and r emo v them ..",
        "id": 535,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 12, 15, 18, 21, 23], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 13, 16, 19, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23, 24]]"
        }
    },
    {
        "code": "find Path -type f -name Regex | xargs -n Quantity -I {} dirname {} | xargs -n Quantity -I {} cp -f File {}",
        "text": "find ever i folder with file file within and cop i file file to ever i one of them ..",
        "id": 536,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'word', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'dir', 'name', 'word', 'word', 'word', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'cp', '-', 'f', 'file', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 0, 8, 8, 9, 10, 10, 0, 0, 11, 11, 0, 0, 0, 12, 12, 13, 14, 14, 0, 0, 15, 16, 16, 17, 0, 0, 18, 26, 26, 32, 33, 36, 37, 38, 38, 44, 45, 50, 51]]",
            "sibling_edges": "[[7, 1, 37, 2, 18, 3, 4, 5, 6, 26, 8, 9, 10, 33, 11, 38, 12, 13, 14, 45, 15, 16, 17, 20, 23, 27, 30, 32, 34, 36, 39, 42, 44, 47, 50, 53, 59], [1, 26, 2, 38, 3, 4, 5, 6, 7, 8, 9, 10, 32, 11, 36, 12, 13, 14, 44, 15, 16, 17, 50, 21, 24, 28, 31, 33, 35, 37, 40, 43, 45, 48, 51, 54, 60]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[52, 19, 20, 21, 22, 23, 24, 25, 1, 53, 54, 27, 28, 29, 30, 31, 55, 56, 34, 35, 57, 58, 2, 59, 60, 39, 40, 41, 42, 43, 61, 62, 46, 47, 48, 49, 63], [19, 20, 21, 22, 23, 24, 25, 1, 53, 54, 27, 28, 29, 30, 31, 55, 56, 34, 35, 57, 58, 2, 59, 60, 39, 40, 41, 42, 43, 61, 62, 46, 47, 48, 49, 63, 64]]"
        }
    },
    {
        "code": "find Path -size +Size",
        "text": "find all file in current director i of size great than size ..",
        "id": 537,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 8], [1, 2, 3, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "rename -n Regex Regex",
        "text": "perform a dri run rep lac regex with regex in all file name in current director i ..",
        "id": 538,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', 'regex', 'regex', 'rename']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "column File",
        "text": "treat each line of file as a val u to be put in one cell of tab l that regex output ..",
        "id": 539,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'column']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "awk Program Program | column -t",
        "text": "format each line as number column base on extran column ..",
        "id": 540,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'program', 'program', 'word', '-', 't', 'a', 'wk', 'column']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 5, 8]]",
            "sibling_edges": "[[3, 1, 5, 2, 8, 9, 11], [1, 8, 2, 3, 4, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 6, 7, 1, 13, 9], [12, 6, 7, 1, 13, 9, 10]]"
        }
    },
    {
        "code": "find Path -iname Regex -exec grep Regex {} \\; -print | sed -r Program",
        "text": "search for regex in all regex file under current director i and run s ed script directory on output ..",
        "id": 541,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'exec', 'grep', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'word', '-', 'r', 'program', 'find', '{', '}', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 0, 0, 8, 8, 9, 9, 0, 10, 10, 11, 12, 22, 23, 28, 28]]",
            "sibling_edges": "[[9, 1, 12, 2, 3, 4, 5, 6, 7, 23, 8, 28, 10, 14, 15, 18, 22, 24, 26, 29, 35], [1, 28, 2, 3, 4, 5, 6, 7, 22, 8, 9, 10, 11, 15, 16, 19, 23, 25, 27, 30, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 13, 14, 15, 16, 17, 18, 19, 20, 21, 33, 34, 24, 25, 26, 27, 1, 35, 36, 29, 30], [13, 14, 15, 16, 17, 18, 19, 20, 21, 33, 34, 24, 25, 26, 27, 1, 35, 36, 29, 30, 31]]"
        }
    },
    {
        "code": "find . -name *.zip -exec sh -c unzip -d `dirname {}` {} ;",
        "text": "find all file file under current director i and unzip them in same director i as file ..",
        "id": 542,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', '*', '.', 'zip', '-', 'exec', 'sh', '-', 'c', 'unzip', '-', 'd', '`', '`', 'word', 'word', 'find', '{', '}', 'word', 'word', 'word', 'dir', 'name', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 8, 9, 9, 0, 0, 0, 0, 10, 27, 28, 0, 0, 0, 32, 32, 33, 34]]",
            "sibling_edges": "[[28, 10, 2, 3, 4, 5, 6, 7, 8, 9, 26, 12, 14, 15, 17, 20, 23, 25, 34, 27, 32, 33, 35], [1, 2, 3, 4, 5, 6, 7, 8, 9, 25, 27, 13, 15, 16, 18, 21, 24, 32, 26, 28, 33, 34, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 36, 37, 38, 26, 30, 31], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 36, 37, 38, 26, 30, 31, 1]]"
        }
    },
    {
        "code": "find Path -user Regex -name Regex",
        "text": "find all file file own by user vivek ..",
        "id": 543,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -type f -ls | sort -n -r -k Number | head - Quantity",
        "text": "list large file in long list format of all file under current director i ..",
        "id": 544,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'ls', 'word', '-', 'n', '-', 'r', '-', 'k', 'number', 'word', '-', 'quantity', 'find', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 0, 7, 7, 8, 8, 9, 9, 10, 0, 11, 12, 13, 20, 28]]",
            "sibling_edges": "[[6, 1, 10, 2, 13, 3, 4, 5, 20, 7, 8, 9, 28, 11, 15, 18, 21, 23, 25], [1, 20, 2, 28, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 14, 15, 16, 17, 18, 19, 1, 32, 21, 22, 23, 24, 25, 26, 27, 2, 33, 29], [14, 15, 16, 17, 18, 19, 1, 32, 21, 22, 23, 24, 25, 26, 27, 2, 33, 29, 30]]"
        }
    },
    {
        "code": "find Path -mount -depth -print | cpio -p -d -m Regex",
        "text": "cop i a whole director i tree skip file re id on other file system to regex ..",
        "id": 545,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'mount', '-', 'depth', '-', 'print', 'word', '-', 'p', '-', 'd', '-', 'm', 'regex', 'find', 'cp', 'io']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 5, 0, 6, 6, 7, 7, 8, 8, 9, 10, 18, 18]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 18, 6, 7, 8, 12, 14, 16, 19, 21, 23, 27], [1, 18, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 17, 20, 22, 24, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 1, 27, 28, 19, 20, 21, 22, 23, 24], [11, 12, 13, 14, 15, 16, 17, 1, 27, 28, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex",
        "text": "search system for regular file who be e name be regex ig nor case ..",
        "id": 546,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "mount -t cifs Regex Regex -o username=Username,password=password",
        "text": "mount re mot regex file system directory on file with user n be regex and password regex ..",
        "id": 547,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', 'cifs', 'regex', 'regex', '-', 'o', 'username', '=', 'username', ',', 'password', '=', 'password', 'mount']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 13, 15, 16, 17, 18, 19, 20], [1, 2, 3, 4, 5, 6, 9, 14, 16, 17, 18, 19, 20, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]]"
        }
    },
    {
        "code": "source <( grep Regex File | sed Program )",
        "text": "grab regex pair from a window style file file into current shell ..",
        "id": 548,
        "graph": {
            "nodes": "['command', 'word', '<(', ')', 'source', '|', 'word', 'word', 'word', 'word', 'regex', 'file', 'word', 'program', 'grep', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 7, 0, 8, 9, 12, 12]]",
            "sibling_edges": "[[1, 2, 8, 7, 5, 9, 6, 12, 15], [2, 9, 3, 5, 12, 6, 7, 8, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 14, 10, 11, 5, 15, 16, 13], [2, 14, 10, 11, 5, 15, 16, 13, 3]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find file file in current director i recur ..",
        "id": 549,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -not \\( -path Regex -prune \\) -name Regex",
        "text": "excl ud director i from find command ..",
        "id": 550,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'not', '\\\\', '(', '-', 'path', 'regex', '-', 'prune', '\\\\', ')', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 10]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 16, 19, 21, 23], [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 17, 20, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} gunzip {}",
        "text": "find all file file in current director i and decompress them use g unzip ..",
        "id": 551,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'g', 'unzip', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 8, 0, 0, 9, 17, 17, 22, 23, 26, 27]]",
            "sibling_edges": "[[5, 1, 9, 2, 3, 4, 17, 6, 7, 23, 8, 11, 14, 15, 18, 20, 22, 24, 26, 29], [1, 17, 2, 3, 4, 5, 6, 7, 22, 8, 26, 12, 15, 16, 19, 21, 23, 25, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 10, 11, 12, 13, 14, 15, 16, 1, 29, 30, 18, 19, 20, 21, 31, 32, 24, 25, 33], [10, 11, 12, 13, 14, 15, 16, 1, 29, 30, 18, 19, 20, 21, 31, 32, 24, 25, 33, 34]]"
        }
    },
    {
        "code": "find Path -name Regex -or -name Regex",
        "text": "display file in current folder end with file or file ..",
        "id": 552,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14], [1, 2, 3, 4, 5, 6, 10, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -type f \\( ! -iname Regex \\) -mtime +Timespan -exec ls {} \\;",
        "text": "display list of all file in current director i which be access in time span excl ud hide file ..",
        "id": 553,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '!', '-', 'i', 'name', 'regex', '\\\\', ')', '-', 'm', 'time', '+', 'timespan', '-', 'exec', 'ls', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 12, 0, 0, 13, 13, 14, 36, 37]]",
            "sibling_edges": "[[14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 37, 16, 19, 22, 23, 26, 28, 29, 31, 33, 36, 38], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 36, 13, 17, 20, 23, 24, 27, 29, 30, 32, 34, 37, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[40, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 38], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 38, 39]]"
        }
    },
    {
        "code": "find ./ -name *.txt | perl -p -e s/^(.*\\/(.*)\\.txt)$/mv $1 .\\/foo\\/$2.bar.txt/ | bash",
        "text": "find all text file in current folder and c hang ext en of t he be e file and move them to a not h folder ..",
        "id": 554,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', '.', '/', '-', 'name', '*', '.', 'txt', 'word', '-', 'p', '-', 'e', 'word', 'word', 'word', 'word', 'find', 'perl', 's', '/', '^', '(', 'word', '$', 'variable_name', '.', '\\\\', '/', 'foo', '\\\\', '/', '$', 'variable_name', '.', 'bar', '.', 'txt', '/', 'bash', '.', '*', '\\\\', '/', '(', '.', '*', ')', '\\\\', '.', 'txt', ')', '$', '/', 'mv', '<number>', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 0, 0, 8, 16, 21, 21, 21, 0, 0, 0, 0, 22, 22, 22, 22, 22, 22, 0, 0, 23, 23, 23, 23, 23, 24, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 41]]",
            "sibling_edges": "[[5, 1, 23, 2, 8, 3, 4, 16, 6, 7, 33, 9, 11, 13, 14, 17, 19, 21, 31, 22, 41, 27, 28, 30, 32, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], [1, 16, 2, 24, 3, 4, 5, 6, 7, 21, 22, 10, 12, 14, 15, 18, 20, 30, 32, 40, 23, 28, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 9, 10, 11, 12, 13, 14, 15, 1, 26, 17, 18, 19, 20, 27, 28, 29, 30, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 32, 63, 34, 35, 36, 37, 38, 39, 40, 64, 42, 43, 44, 45, 46, 2], [9, 10, 11, 12, 13, 14, 15, 1, 26, 17, 18, 19, 20, 27, 28, 29, 30, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 32, 63, 34, 35, 36, 37, 38, 39, 40, 64, 42, 43, 44, 45, 46, 2, 47]]"
        }
    },
    {
        "code": "rsync -a -f Program -f Program -f Program File File",
        "text": "archiv all file in regex to regex specif i to incl ud file file and file ..",
        "id": 555,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'f', 'program', '-', 'f', 'program', '-', 'f', 'program', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 10, 10]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 16, 19, 24], [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 17, 20, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file in current director i tree who be e name begin with regex ..",
        "id": 556,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "false | true",
        "text": "save exit status of pipe command in a system v aria bl regex ..",
        "id": 557,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'false', 'true']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 0, 2, 3]]",
            "sibling_edges": "[[2, 1], [1, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 1], [1, 5]]"
        }
    },
    {
        "code": "find Path -name Regex -exec echo Regex {} \\;",
        "text": "print command that exe cut regex on all file file from current director i tree ..",
        "id": 558,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'echo', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 0, 0, 7, 7, 8, 17, 18]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 18, 10, 13, 17, 19], [1, 2, 3, 4, 5, 6, 17, 7, 11, 14, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19], [9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19, 20]]"
        }
    },
    {
        "code": "echo Regex | tee File",
        "text": "write regex to standard output and to file file ..",
        "id": 559,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', 'file', 'echo', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 2, 0, 3, 4, 6]]",
            "sibling_edges": "[[2, 1, 4, 6], [1, 6, 2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 1, 9], [5, 1, 9, 7]]"
        }
    },
    {
        "code": "chown ${JBOSS_USER}: $(dirname $JBOSS_PIDFILE) || true",
        "text": "c hang owner of director i name of regex to regex and alway return success ..",
        "id": 560,
        "graph": {
            "nodes": "['list', '||', 'word', 'word', '$(', ')', 'word', 'chow', 'n', '${', 'variable_name', '}', ':', 'true', 'jboss_user', 'word', '$', 'variable_name', 'dir', 'name', 'jboss_pidfile']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 6, 10, 0, 0, 0, 15, 15, 17]]",
            "sibling_edges": "[[5, 1, 2, 3, 11, 4, 17, 7, 9, 10, 15, 16, 18], [1, 6, 9, 4, 3, 15, 5, 8, 10, 11, 16, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 9, 14, 11, 12, 4, 18, 19, 16, 20, 5, 1], [8, 9, 14, 11, 12, 4, 18, 19, 16, 20, 5, 1, 13]]"
        }
    },
    {
        "code": "find dir -type f -exec md5sum {} + > dir.md5",
        "text": "find all file under dir and cal cu l regex and save output to file ..",
        "id": 561,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', 'word', '>', 'word', 'word', 'dir', '-', 'type', 'f', '-', 'exec', 'md', '<number>', 'sum', 'word', 'word', '+', 'dir', '.', 'md5', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 0, 0, 6, 8, 8, 8, 9, 19, 20]]",
            "sibling_edges": "[[6, 9, 1, 2, 3, 4, 5, 20, 7, 11, 14, 16, 17, 19, 22, 23], [7, 1, 2, 3, 4, 5, 19, 6, 8, 12, 15, 17, 18, 20, 23, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 26, 27, 21, 7, 22, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 26, 27, 21, 7, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path ! -name Regex -prune",
        "text": "print list of file and director i of current director i ..",
        "id": 562,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '!', '-', 'name', 'regex', '-', 'prune', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 9, 12], [1, 2, 3, 4, 5, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex -exec echo {} \\;",
        "text": "list all file file and director i under file director i ..",
        "id": 563,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'echo', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    },
    {
        "code": "find Path -type f -wholename Regex -exec grep -H Regex {} \\;",
        "text": "i dent if i cm file ac cross all php bb inst al ..",
        "id": 564,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'whole', 'name', 'regex', '-', 'exec', 'grep', '-', 'h', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 0, 0, 10, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 13, 16, 17, 20, 23, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 14, 17, 18, 21, 24, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28, 29]]"
        }
    },
    {
        "code": "find . -mtime -1 | xargs tar --no-recursion -czf myfile.tgz",
        "text": "get all file in a current director i mod if i in time span ..",
        "id": 565,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', '.', '-', 'm', 'time', '-', '<number>', 'word', 'tar', '--', 'no', '-', 'recursion', '-', 'czf', 'myfile', '.', 'tgz', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 0, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 9, 16, 16]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 16, 5, 6, 7, 11, 12, 14, 18, 19, 20, 22, 24, 25, 28], [1, 16, 2, 3, 4, 5, 6, 7, 8, 12, 13, 15, 19, 20, 21, 23, 25, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 15, 1, 28, 29, 17, 18, 19, 20, 21, 22, 23, 24, 25], [10, 11, 12, 13, 14, 15, 1, 28, 29, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "find . -maxdepth 1 -type d > dirs_to_remove",
        "text": "save list of all sub director i of current director i as regex ..",
        "id": 566,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'number', 'word', 'word', '>', 'word', 'word', '.', '-', 'max', 'depth', '<number>', '-', 'type', 'd', 'dirs_to_remove', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 7, 8]]",
            "sibling_edges": "[[5, 8, 1, 2, 3, 4, 6, 10, 11, 14], [6, 1, 2, 3, 4, 5, 7, 11, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 9, 10, 11, 12, 13, 14, 15, 16, 6], [9, 10, 11, 12, 13, 14, 15, 16, 6, 17]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i regex ..",
        "id": 567,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "find Path -type f",
        "text": "display all regular file in a director i ..",
        "id": 568,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "uniq -c | sort -n | tail -n Quantity",
        "text": "print line with most con ecu t repeat prefix with it count from standard input ..",
        "id": 569,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', '-', 'c', 'word', '-', 'n', 'word', '-', 'n', 'quantity', 'uni', 'q', 'sort', 'tail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 4, 4, 0, 5, 5, 6, 7, 7, 10, 13]]",
            "sibling_edges": "[[3, 1, 4, 2, 7, 10, 13, 5, 8, 11, 14, 17], [1, 10, 2, 13, 3, 4, 5, 6, 9, 12, 15, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 18, 8, 9, 1, 19, 11, 12, 2, 20, 14, 15], [18, 8, 9, 1, 19, 11, 12, 2, 20, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -cmin -Quantity",
        "text": "find recur all file c hang within time span start from director i b ..",
        "id": 570,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'cm', 'in', '-', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find . -name *.txt | python hello.py",
        "text": "find all file file and director i under current director i and exe cut python script file for each of them with file path as an argument to script ..",
        "id": 571,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', '*', '.', 'txt', 'word', 'hello', '.', 'py', 'find', 'python']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 0, 5, 5, 5, 6, 13]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 13, 8, 10, 11, 14, 15], [1, 13, 2, 3, 4, 5, 9, 11, 12, 15, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 7, 8, 9, 10, 11, 12, 1, 18, 14, 15], [7, 8, 9, 10, 11, 12, 1, 18, 14, 15, 16]]"
        }
    },
    {
        "code": "rsync -urv --progress dir_a dir_b && rsync -urv --progress dir_b dir_a",
        "text": "synchron regex and regex to contain late file in both director i ..",
        "id": 572,
        "graph": {
            "nodes": "['list', '&&', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'urv', '--', 'progress', 'dir_a', 'dir_b', 'word', '-', 'urv', '--', 'progress', 'dir_b', 'dir_a', 'r', 'sync', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 0, 6, 6, 7, 7, 8, 9, 10, 10, 17, 17]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 17, 6, 7, 8, 11, 13, 18, 20, 24, 26], [1, 17, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 19, 21, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 25, 11, 12, 13, 14, 15, 16, 1, 26, 27, 18, 19, 20, 21, 22], [25, 11, 12, 13, 14, 15, 16, 1, 26, 27, 18, 19, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} grep -c Regex {} | grep -v Regex",
        "text": "hunt down file with at least one banana ..",
        "id": 573,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', '-', 'c', 'regex', 'word', 'word', 'word', '-', 'v', 'regex', 'find', 'x', 'arg', '{', '}', '{', '}', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 0, 7, 7, 8, 8, 0, 0, 9, 10, 10, 11, 0, 0, 0, 12, 12, 13, 14, 22, 22, 27, 28, 33, 34, 35]]",
            "sibling_edges": "[[6, 1, 34, 2, 14, 3, 4, 5, 22, 7, 8, 28, 9, 10, 11, 35, 12, 16, 19, 20, 23, 25, 27, 30, 33, 36, 40], [1, 22, 2, 35, 3, 4, 5, 6, 7, 8, 27, 9, 10, 11, 33, 12, 13, 17, 20, 21, 24, 26, 28, 31, 34, 37, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 15, 16, 17, 18, 19, 20, 21, 1, 40, 41, 23, 24, 25, 26, 42, 43, 29, 30, 31, 32, 44, 45, 2, 46, 36, 37], [15, 16, 17, 18, 19, 20, 21, 1, 40, 41, 23, 24, 25, 26, 42, 43, 29, 30, 31, 32, 44, 45, 2, 46, 36, 37, 38]]"
        }
    },
    {
        "code": "find Path -name Regex | grep -v Regex",
        "text": "search en ti r file hi er arch i for file end with regex and print all match except for those with file in path n be ..",
        "id": 574,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'v', 'regex', 'find', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 7, 12]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 9, 13], [1, 12, 2, 3, 4, 5, 6, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 9, 10, 11, 1, 17, 13, 14], [8, 9, 10, 11, 1, 17, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -size +Size -and -size -Size",
        "text": "search for file who be e size be between size and size ..",
        "id": 575,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'and', '-', 'size', '-', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 11, 13, 15, 17], [1, 2, 3, 4, 5, 6, 10, 12, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find . -name openssl 2>/dev/null",
        "text": "find all inst an c of a specif file in current director i and discard all error ..",
        "id": 576,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'file_descriptor', '>', 'word', 'word', '.', '-', 'name', 'openssl', '<number>', '/', 'dev', '/', 'null', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 6, 6, 6, 6, 7]]",
            "sibling_edges": "[[3, 7, 1, 2, 4, 5, 9, 13, 14, 15], [4, 1, 2, 3, 5, 6, 10, 14, 15, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 5, 13, 14, 15], [8, 9, 10, 11, 12, 5, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "curl Regex Regex Regex",
        "text": "download content from file and output to file ..",
        "id": 577,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'regex', 'regex', 'regex', 'curl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2], [1, 2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 6], [5, 6, 7]]"
        }
    },
    {
        "code": "echo Regex | ssh Regex",
        "text": "run command regex on server file ..",
        "id": 578,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', 'regex', 'echo', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 2, 0, 3, 4, 6]]",
            "sibling_edges": "[[2, 1, 4, 6], [1, 6, 2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 1, 9], [5, 1, 9, 7]]"
        }
    },
    {
        "code": "md5=($(md5sum file))",
        "text": "save file n be and hash of regex sum of regex to bash array regex ..",
        "id": 579,
        "graph": {
            "nodes": "['variable_assignment', 'variable_name', '=', 'md5', '(', ')', '$(', ')', 'word', 'word', 'file', 'md', '<number>', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 1, 0, 0, 0, 0, 0, 0, 8, 9, 9, 9]]",
            "sibling_edges": "[[1, 2, 4, 7, 6, 8, 9, 11, 12], [2, 4, 6, 5, 9, 7, 8, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 2, 4, 6, 11, 12, 13, 10, 7], [2, 4, 6, 11, 12, 13, 10, 7, 5]]"
        }
    },
    {
        "code": "find /path/to/dir -type f -exec printf %.sX {} + | wc -c",
        "text": "find number of regular file under and below director i file ..",
        "id": 580,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'path', '/', 'to', '/', 'dir', '-', 'type', 'f', '-', 'exec', 'print', 'f', '%', '.', 'sx', 'word', 'word', '+', 'word', '-', 'c', 'find', '{', '}', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 7, 0, 0, 8, 0, 9, 9, 10, 27, 28, 30]]",
            "sibling_edges": "[[8, 1, 10, 2, 3, 4, 5, 6, 7, 28, 30, 11, 12, 13, 14, 15, 17, 20, 22, 24, 25, 27, 31], [1, 30, 2, 3, 4, 5, 6, 7, 27, 8, 9, 12, 13, 14, 15, 16, 18, 21, 23, 25, 26, 28, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 29, 1, 36, 31], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 29, 1, 36, 31, 32]]"
        }
    },
    {
        "code": "wc -l $( find Path -type f -name Regex )",
        "text": "count total number of line in all regex file in current director i ..",
        "id": 581,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'l', '$(', ')', 'wc', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 8, 9, 9, 10, 11, 11, 12, 13]]",
            "sibling_edges": "[[2, 1, 3, 5, 12, 13, 8, 9, 10, 11, 15, 18], [1, 5, 4, 13, 6, 8, 9, 10, 11, 12, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 3, 4, 5, 21, 14, 15, 16, 17, 18, 19, 20], [3, 4, 5, 21, 14, 15, 16, 17, 18, 19, 20, 6]]"
        }
    },
    {
        "code": "column -t File | uniq -w Quantity -c",
        "text": "display content of regex format into a tab l r emo v dup li c line where first number char act be dup li c and display number of occur r at begin of each line ..",
        "id": 582,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', 'file', 'word', '-', 'w', 'quantity', '-', 'c', 'column', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 4, 4, 5, 6, 6, 7, 11, 11]]",
            "sibling_edges": "[[3, 1, 7, 2, 11, 4, 5, 8, 12, 15, 18], [1, 11, 2, 3, 4, 5, 6, 9, 13, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 1, 18, 19, 12, 13, 14, 15], [8, 9, 10, 1, 18, 19, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -path Regex",
        "text": "find all file in current director i tree who be e path name match pattern file ..",
        "id": 583,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -daystart -maxdepth Quantity -mmin +Quantity -type f -name Regex Path Path -f {} Path",
        "text": "de let all regular file with file ext en that be mod if i in more than time span ago in maximum number level down director i file ..",
        "id": 584,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'day', 'start', '-', 'max', 'depth', 'quantity', '-', 'mm', 'in', '+', 'quantity', '-', 'type', 'f', '-', 'name', 'regex', 'path', 'path', '-', 'f', 'word', 'word', 'path', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 5, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 11, 12, 13, 13, 0, 0, 14, 15, 39, 40]]",
            "sibling_edges": "[[15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 40, 17, 18, 20, 21, 24, 25, 27, 29, 32, 37, 39], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 39, 14, 18, 19, 21, 22, 25, 26, 28, 30, 33, 38, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[42, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44, 41]]"
        }
    },
    {
        "code": "find Path -type d -iname Regex",
        "text": "find all director i in current director i tree with regex in name ..",
        "id": 585,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -depth -type d -empty -exec rmdir {} \\;",
        "text": "recur r emo v all e mp ti folder under current folder ..",
        "id": 586,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'depth', '-', 'type', 'd', '-', 'empty', '-', 'exec', 'rm', 'dir', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 0, 0, 8, 8, 9, 22, 23]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 23, 11, 13, 16, 18, 20, 22, 24], [1, 2, 3, 4, 5, 6, 7, 22, 8, 12, 14, 17, 19, 21, 23, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 24, 25]]"
        }
    },
    {
        "code": "( awk NR % 2 input; awk NR % 2 == 0 input ) | paste - - - | column -s    -t",
        "text": "format regex as altern row in a tab l ..",
        "id": 587,
        "graph": {
            "nodes": "['pipeline', '|', '|', '(', ';', ')', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'number', '==', 'regex', 'word', '-', '-', '-', 'word', '-', 's', '-', 't', 'word', 'nr', '%', '<number>', 'input', 'word', 'nr', '%', '<number>', '<number>', 'input', 'paste', 'column', 'a', 'wk', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 0, 9, 9, 10, 10, 0, 11, 12, 13, 14, 0, 15, 16, 17, 19, 19, 20, 24, 29, 29, 34, 34]]",
            "sibling_edges": "[[5, 1, 8, 2, 3, 14, 4, 19, 20, 6, 7, 24, 9, 29, 11, 12, 13, 34, 15, 16, 17, 18, 25, 27, 38, 42, 44], [1, 20, 2, 24, 29, 4, 34, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 28, 39, 43, 45]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 42, 43, 30, 31, 32, 33, 4, 44, 45, 35, 36, 37, 18, 38, 39, 5, 1, 40, 21, 22, 23, 2, 41, 25, 26, 27], [42, 43, 30, 31, 32, 33, 4, 44, 45, 35, 36, 37, 18, 38, 39, 5, 1, 40, 21, 22, 23, 2, 41, 25, 26, 27, 28]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file under file director i tree that contain word regex in name ..",
        "id": 588,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -perm Permission -exec ls -l {} \\;",
        "text": "list file in current director i tree which per miss rwx for user and rw for group and other ..",
        "id": 589,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "sleep `10`",
        "text": "sleep for time span ..",
        "id": 590,
        "graph": {
            "nodes": "['command', 'word', '`', '`', 'sleep', 'number', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 0, 5]]",
            "sibling_edges": "[[1, 2, 5], [2, 5, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 6], [2, 6, 3]]"
        }
    },
    {
        "code": "find Path -type f -maxdepth Quantity -exec sed -i Program {} \\;",
        "text": "rep lac all match with regex expand by regex with text expand by regex in all regular file under current director i not go into sub director i and mod if i file in p lac ..",
        "id": 591,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'max', 'depth', 'quantity', '-', 'exec', 's', 'ed', '-', 'i', 'program', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 0, 0, 10, 10, 11, 27, 28]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 13, 16, 17, 20, 22, 24, 27, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 10, 14, 17, 18, 21, 23, 25, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 29], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 29, 30]]"
        }
    },
    {
        "code": "cat File",
        "text": "print content of file ..",
        "id": 592,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'cat']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "echo Regex | od -A n -v -t x1 | tr -d Regex",
        "text": "convert regex to a string of hex a dec im byte ..",
        "id": 593,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'a', 'n', '-', 'v', '-', 't', 'x', '<number>', 'word', '-', 'd', 'regex', 'echo', 'od', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 6, 6, 7, 7, 8, 8, 0, 9, 9, 10, 11, 13, 23]]",
            "sibling_edges": "[[3, 1, 8, 2, 11, 13, 4, 5, 6, 7, 23, 9, 14, 17, 19, 21, 24], [1, 13, 2, 23, 3, 4, 5, 6, 7, 8, 9, 10, 15, 18, 20, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 12, 1, 28, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2, 29, 24, 25], [12, 1, 28, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2, 29, 24, 25, 26]]"
        }
    },
    {
        "code": "cat File | wc -l",
        "text": "count number of line in all file file ..",
        "id": 594,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'file', 'word', '-', 'l', 'cat', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 3, 4, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 7], [1, 6, 2, 3, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 1, 10, 7], [5, 1, 10, 7, 8]]"
        }
    },
    {
        "code": "find Path -perm -Permission -type f -exec ls -l {} \\;",
        "text": "find all regular file with group read per miss set in home director i and below and output detail inform about each file ..",
        "id": 595,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'perm', '-', 'permission', '-', 'type', 'f', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 24, 25]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 25, 12, 14, 16, 19, 22, 24, 26], [1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 13, 15, 17, 20, 23, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26, 27]]"
        }
    },
    {
        "code": "find Path -type f | xargs -I {} chmod -v Permission {}",
        "text": "c hang per miss to number for all file in current director i tree ..",
        "id": 596,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'i', 'word', 'word', 'ch', 'mod', '-', 'v', 'permission', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 6, 7, 7, 8, 0, 0, 9, 14, 14, 17, 18, 24, 25]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 18, 6, 7, 8, 11, 15, 17, 19, 21, 24, 27], [1, 14, 2, 3, 4, 5, 17, 6, 7, 8, 24, 12, 16, 18, 20, 22, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 1, 27, 28, 15, 16, 29, 30, 19, 20, 21, 22, 23, 31], [10, 11, 12, 13, 1, 27, 28, 15, 16, 29, 30, 19, 20, 21, 22, 23, 31, 32]]"
        }
    },
    {
        "code": "if find `echo $some_dir` -maxdepth 0 -empty | read v; then echo Empty dir; else Dir is NOT empty fi",
        "text": "print regex if regex be e mp ti otherwis print regex ..",
        "id": 597,
        "graph": {
            "nodes": "['ERROR', 'if', ';', 'then', ';', 'else', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'empty', 'dir', 'word', 'be', 'not', 'empty', 'fi', 'word', '`', '`', '-', 'max', 'depth', '<number>', '-', 'empty', 'word', 'v', 'echo', 'dir', 'find', 'read', 'word', '$', 'variable_name', 'echo', 'some_dir']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 9, 10, 11, 12, 0, 0, 0, 13, 13, 13, 14, 15, 15, 0, 16, 17, 20, 25, 34, 0, 0, 0, 40, 42]]",
            "sibling_edges": "[[1, 16, 2, 3, 8, 4, 5, 15, 6, 17, 7, 20, 9, 10, 11, 25, 27, 13, 14, 34, 26, 42, 28, 29, 32, 40, 41], [25, 2, 3, 17, 4, 5, 20, 6, 34, 7, 8, 9, 10, 11, 12, 26, 13, 14, 15, 16, 40, 27, 29, 30, 33, 41, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 38, 26, 43, 41, 44, 27, 28, 29, 30, 31, 32, 33, 6, 39, 35, 2, 3, 36, 18, 19, 4, 5, 37, 21, 22, 23], [38, 26, 43, 41, 44, 27, 28, 29, 30, 31, 32, 33, 6, 39, 35, 2, 3, 36, 18, 19, 4, 5, 37, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "date -d Regex '+%Y-%m-%d'",
        "text": "print year month d format for give time ..",
        "id": 598,
        "graph": {
            "nodes": "['command', 'word', 'word', 'raw_string', 'word', '-', 'd', 'regex', \"'\", '+', '%', 'y', '-', '%', 'm', '-', '%', 'd', \"'\", 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [1, 2, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -type f -exec chgrp Regex {} \\;",
        "text": "c hang group of all regular file in current director i ..",
        "id": 599,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'chg', 'rp', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "which Regex",
        "text": "print full path of command file ..",
        "id": 600,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find */201111/*20111130* -name *.jpg -print0 | sort -t _ -nk2 | xargs -0 cat | ffmpeg -f image2pipe -framerate 30 -vcodec mjpeg -i - -vcodec libx264 -profile:v baseline -level 3.0 -movflags +faststart -crf 19 -pix_fmt yuv420p -r 30 output.mp4",
        "text": "find all file i mag in folder which be in path directory and sort them accord to name and convert them into video file ..",
        "id": 601,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'number', 'word', 'word', '*', '/', '<number>', '/', '*', '<number>', '*', '-', 'name', '*', '.', 'jpg', '-', 'print', '<number>', 'word', '-', 't', '_', '-', 'nk2', 'word', '-', '<number>', 'cat', 'word', '-', 'f', 'image', '<number>', 'pipe', '-', 'frame', 'rate', '<number>', '-', 'v', 'code', 'c', 'm', 'jpeg', '-', 'i', '-', '-', 'v', 'code', 'c', 'lib', 'x', '<number>', '-', 'profile', ':', 'v', 'baseline', '-', 'level', '<number>', '.', '<number>', '-', 'mo', 'v', 'flag', '+', 'fast', 'start', '-', 'crf', '<number>', '-', 'pix', 'f', 'mt', 'yuv', '<number>', 'p', '-', 'r', '<number>', 'output', '.', 'mp', '<number>', 'find', 'sort', 'x', 'arg', 'ff', 'm', 'peg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 0, 8, 8, 9, 10, 10, 0, 11, 11, 12, 0, 13, 13, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 17, 18, 18, 19, 19, 20, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 29, 29, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 35, 35, 35, 35, 36, 52, 58, 58, 62, 62, 62]]",
            "sibling_edges": "[[7, 1, 10, 2, 12, 3, 36, 4, 5, 6, 52, 8, 9, 58, 11, 62, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 46, 47, 49, 50, 53, 56, 59, 63, 65, 66, 68, 69, 72, 73, 74, 76, 78, 81, 82, 83, 85, 86, 88, 89, 90, 93, 95, 96, 98, 99, 100, 102, 103, 105, 108, 109, 110, 112, 113, 115, 118, 119, 120, 124, 126, 127], [1, 52, 2, 58, 3, 62, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 54, 57, 60, 64, 66, 67, 69, 70, 73, 74, 75, 77, 79, 82, 83, 84, 86, 87, 89, 90, 91, 94, 96, 97, 99, 100, 101, 103, 104, 106, 109, 110, 111, 113, 114, 116, 119, 120, 121, 125, 127, 128]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[122, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 1, 123, 53, 54, 55, 56, 57, 2, 124, 125, 59, 60, 61, 3, 126, 127, 128, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 1, 123, 53, 54, 55, 56, 57, 2, 124, 125, 59, 60, 61, 3, 126, 127, 128, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121]]"
        }
    },
    {
        "code": "yes | head -n Quantity | awk Program",
        "text": "print a sing l line of number from number to number ..",
        "id": 602,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', 'word', 'program', 'yes', 'head', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 5, 6, 7, 11, 11]]",
            "sibling_edges": "[[6, 1, 4, 2, 7, 3, 11, 8, 15], [1, 7, 2, 11, 3, 4, 5, 9, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 1, 14, 8, 9, 10, 2, 15, 16], [1, 14, 8, 9, 10, 2, 15, 16, 12]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan -user Regex -exec ln -s {} Regex \\;",
        "text": "c re at symbol link in director i file to all file loc at in director i regex and that be mod if i early time span and own by user regex ..",
        "id": 603,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', '-', 'user', 'regex', '-', 'exec', 'ln', '-', 's', 'word', 'word', 'regex', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 10, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 27, 9, 13, 14, 16, 18, 21, 24, 26, 29], [1, 2, 3, 4, 5, 6, 7, 8, 26, 9, 10, 14, 15, 17, 19, 22, 25, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 28, 29], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 28, 29, 30]]"
        }
    },
    {
        "code": "find Path -name Regex -type d -exec mv {} File \\; -exec mkdir Directory \\; -exec sh -c mv File File \\;",
        "text": "move each of regex director i in current director i to a not h director i who be e name be con ti tut by append file to each director i name and c re at a ..",
        "id": 604,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'd', '-', 'exec', 'mv', 'word', 'word', 'file', '\\\\', ';', '-', 'exec', 'mk', 'dir', 'directory', '\\\\', ';', '-', 'exec', 'sh', '-', 'c', 'mv', 'file', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 16, 16, 17, 18, 19, 20, 20, 21, 32, 33]]",
            "sibling_edges": "[[21, 1, 2, 3, 4, 5, 6, 7, 33, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 26, 29, 32, 35, 37, 39, 42, 44, 47, 52], [1, 2, 3, 4, 5, 6, 7, 32, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 27, 30, 33, 36, 38, 40, 43, 45, 48, 53]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[54, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 55, 56, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 55, 56, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]]"
        }
    },
    {
        "code": "tac File | sed Program | tac",
        "text": "rep lac last occur r of regex with file ..",
        "id": 605,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'file', 'word', 'program', 'word', 'ta', 'c', 's', 'ed', 'ta', 'c']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 5, 7, 7, 9, 9]]",
            "sibling_edges": "[[3, 1, 4, 2, 5, 7, 10, 12, 14], [1, 7, 2, 9, 3, 4, 11, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 6, 1, 12, 13, 8, 2, 14], [11, 6, 1, 12, 13, 8, 2, 14, 15]]"
        }
    },
    {
        "code": "sudo setfacl -R -m u:www-data:rwx -m u:`whoami`:rwx app/cache app/logs",
        "text": "recur set file access control list of file and file to rwx for current user and for user regex ..",
        "id": 606,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'setfacl', '-', 'r', '-', 'm', 'u', ':', 'www', '-', 'data', ':', 'rwx', '-', 'm', 'u', ':', 'word', 'app', '/', 'cache', 'app', '/', 'log', 'su', 'do', '`', '`', ':', 'rwx', 'word', 'whoa', 'mi']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 0, 7, 7, 7, 8, 8, 8, 9, 9, 0, 0, 26, 26, 0, 39, 39]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 26, 7, 11, 13, 15, 16, 17, 18, 19, 20, 22, 24, 36, 27, 28, 30, 31, 33, 35, 39, 37, 40], [1, 2, 3, 4, 5, 6, 35, 7, 8, 12, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 31, 32, 34, 39, 36, 38, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 34, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 40, 41, 36, 37, 38, 27, 28, 29, 30, 31], [34, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 40, 41, 36, 37, 38, 27, 28, 29, 30, 31, 32]]"
        }
    },
    {
        "code": "basename -- Regex",
        "text": "from a script output name of script without contain director i from a shell output name of shell ..",
        "id": 607,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '--', 'regex', 'base', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find Path -type f -print | xargs -I {} grep -l -i Regex {}",
        "text": "list all regular file re id in current director i tree and contain string file ..",
        "id": 608,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'l', '-', 'i', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 0, 6, 6, 0, 0, 7, 8, 8, 9, 9, 10, 0, 0, 11, 18, 18, 21, 22, 29, 30]]",
            "sibling_edges": "[[5, 1, 11, 2, 3, 4, 18, 6, 22, 7, 8, 9, 10, 13, 16, 19, 21, 24, 26, 29, 32], [1, 18, 2, 3, 4, 5, 6, 21, 7, 8, 9, 10, 29, 14, 17, 20, 22, 25, 27, 30, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 1, 32, 33, 19, 20, 34, 35, 23, 24, 25, 26, 27, 28, 36], [12, 13, 14, 15, 16, 17, 1, 32, 33, 19, 20, 34, 35, 23, 24, 25, 26, 27, 28, 36, 37]]"
        }
    },
    {
        "code": "top -l 1 -s 0 -stats mem -pid PID",
        "text": "get virtual privat m em or i use of process ..",
        "id": 609,
        "graph": {
            "nodes": "['command', 'word', 'number', 'word', 'number', 'word', 'word', 'word', 'word', 'word', '-', 'l', '<number>', '-', 's', '<number>', '-', 'stats', 'me', 'm', '-', 'pi', 'd', 'pi', 'd', 'top']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 10, 13, 16, 18, 20, 21, 23], [1, 2, 3, 4, 5, 6, 7, 8, 11, 14, 17, 19, 21, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path -type f \\( -ctime Timespan -or -atime Timespan -or -mtime Timespan \\) -printf \"./%P\\n\"",
        "text": "list file under regex which be mod if i access or who be e status be c hang regex ago rep lac regex path string to directory ..",
        "id": 610,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'c', 'time', 'timespan', '-', 'or', '-', 'a', 'time', 'timespan', '-', 'or', '-', 'm', 'time', 'timespan', '\\\\', ')', '-', 'print', 'f', \"'\", '.', '/', '%', 'p', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16]]",
            "sibling_edges": "[[16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 21, 23, 24, 27, 29, 30, 33, 35, 36, 39, 41, 42, 44, 45, 46, 47, 48], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 22, 24, 25, 28, 30, 31, 34, 36, 37, 40, 42, 43, 45, 46, 47, 48, 49]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[50, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]"
        }
    },
    {
        "code": "find Path -exec file {} \\;",
        "text": "recur search for every th under current director i display human read file type de script for each en tr i ..",
        "id": 611,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'file', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 1, 2, 2, 3, 0, 0, 4, 4, 5, 10, 11]]",
            "sibling_edges": "[[5, 1, 2, 3, 11, 7, 10, 12], [1, 2, 3, 10, 4, 8, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 15, 16, 12], [6, 7, 8, 9, 15, 16, 12, 13]]"
        }
    },
    {
        "code": "find Path -newermt Regex",
        "text": "find all file in folder file which be mod if i after a specif date ..",
        "id": 612,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'mt', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "mv File File",
        "text": "move all hide file in directory to directory ..",
        "id": 613,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'file', 'file', 'mv']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "find Path -name Regex | grep -v Regex | grep -v Regex",
        "text": "find all file and director i with file ext en under current director i tree and show list by excl ud path that contain regex and regex ..",
        "id": 614,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'v', 'regex', 'word', '-', 'v', 'regex', 'find', 'grep', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 6, 7, 0, 8, 8, 9, 10, 15, 19]]",
            "sibling_edges": "[[5, 1, 7, 2, 10, 3, 4, 15, 6, 19, 8, 12, 16, 20], [1, 15, 2, 19, 3, 4, 5, 6, 7, 8, 9, 13, 17, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 11, 12, 13, 14, 1, 24, 16, 17, 18, 2, 25, 20, 21], [11, 12, 13, 14, 1, 24, 16, 17, 18, 2, 25, 20, 21, 22]]"
        }
    },
    {
        "code": "rsync -avz -e ssh -p $portNumber user@remote.host:/path/to/copy /local/path",
        "text": "archiv file on host regex as user regex to file via ssh on port regex ..",
        "id": 615,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'av', 'z', '-', 'e', 'ssh', '-', 'p', '$', 'variable_name', 'user', '@', 'remote', '.', 'host', ':', '/', 'path', '/', 'to', '/', 'copy', '/', 'local', '/', 'path', 'r', 'sync', 'portnumber']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 4, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 17]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 17, 5, 8, 9, 11, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34], [1, 2, 3, 4, 16, 5, 6, 9, 10, 12, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 35, 8, 9, 10, 11, 12, 13, 14, 15, 16, 36, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [35, 8, 9, 10, 11, 12, 13, 14, 15, 16, 36, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]]"
        }
    },
    {
        "code": "find Path -name Regex -prune -or \\( ! -name Regex -print0 \\)",
        "text": "find all file and director i ig nor regex file and director i without descend into file director i with null char act as delimit ..",
        "id": 616,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', '-', 'or', '\\\\', '(', '!', '-', 'name', 'regex', '-', 'print', '<number>', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 10, 11, 11, 12]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 19, 21, 24, 27, 28, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 18, 20, 22, 25, 28, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "ls File | tee File File",
        "text": "display list of file end with file in current folder to term in twice and output it to text file file ..",
        "id": 617,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'file', 'word', 'file', 'file', 'ls', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 2, 0, 3, 4, 5, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3], [1, 7, 2, 3, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 6, 1, 11, 8], [6, 1, 11, 8, 9]]"
        }
    },
    {
        "code": "od -t x1 -A n File | head",
        "text": "display first number line of byte hex dump with no file offset data for file ..",
        "id": 618,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 't', 'x', '<number>', '-', 'a', 'n', 'file', 'word', 'od', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 4, 5, 6, 0, 7, 16]]",
            "sibling_edges": "[[6, 1, 7, 2, 3, 4, 5, 8, 10, 12], [1, 16, 2, 3, 4, 5, 6, 9, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15, 1], [8, 9, 10, 11, 12, 13, 14, 15, 1, 18]]"
        }
    },
    {
        "code": "rename Regex Regex",
        "text": "add regex to begin of name of file r en be it to file ..",
        "id": 619,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'regex', 'rename']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 -type f | xargs -0 -I {} grep Regex {}",
        "text": "find file file with text regex ..",
        "id": 620,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', '-', 'type', 'f', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 7, 0, 8, 8, 9, 9, 0, 0, 10, 11, 0, 0, 12, 23, 23, 28, 29, 32, 33]]",
            "sibling_edges": "[[7, 1, 12, 2, 3, 4, 5, 6, 23, 8, 9, 29, 10, 11, 14, 17, 18, 20, 24, 26, 28, 32, 35], [1, 23, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 11, 32, 15, 18, 19, 21, 25, 27, 29, 33, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 35, 36, 24, 25, 26, 27, 37, 38, 30, 31, 39], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 35, 36, 24, 25, 26, 27, 37, 38, 30, 31, 39, 40]]"
        }
    },
    {
        "code": "read -a Regex",
        "text": "read a line from standard input and save each word in bash array v aria bl regex ..",
        "id": 621,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'a', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -print",
        "text": "display all file in home folder ..",
        "id": 622,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'path', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 2, 3]]",
            "sibling_edges": "[[3, 1, 5], [1, 2, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search for all text file in folder file ..",
        "id": 623,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -mtime +Timespan -print0 | xargs -0 -I {} rm {}",
        "text": "find all file under current director i that be mod if i more than time span ago and de let them ..",
        "id": 624,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'm', 'time', '+', 'timespan', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 7, 7, 7, 0, 8, 8, 9, 9, 0, 0, 10, 0, 0, 11, 24, 24, 29, 30, 32, 33]]",
            "sibling_edges": "[[7, 1, 11, 2, 3, 4, 5, 6, 24, 8, 9, 30, 10, 13, 16, 17, 19, 21, 22, 25, 27, 29, 32, 35], [1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 29, 10, 32, 14, 17, 18, 20, 22, 23, 26, 28, 30, 33, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 35, 36, 25, 26, 27, 28, 37, 38, 31, 39], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 35, 36, 25, 26, 27, 28, 37, 38, 31, 39, 40]]"
        }
    },
    {
        "code": "find Path -type f -atime -Timespan",
        "text": "display all file in current folder for file which be access in time span ..",
        "id": 625,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'a', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14], [1, 2, 3, 4, 5, 9, 12, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -exec ls {} +",
        "text": "list all file file in home director i tree in a fast way ..",
        "id": 626,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'ls', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 19, 20], [8, 9, 10, 11, 12, 13, 14, 19, 20, 17]]"
        }
    },
    {
        "code": "seq Number | awk Program",
        "text": "print number from number to number with number val u per line ..",
        "id": 627,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'number', 'word', 'program', 'seq', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 9], [1, 6, 2, 3, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 1, 9, 10], [5, 1, 9, 10, 7]]"
        }
    },
    {
        "code": "tac File | sed -n -e Program | tac File",
        "text": "extract text between regex and regex if and on li if regex be follow by regex ..",
        "id": 628,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'n', '-', 'e', 'program', 'word', 'file', 'ta', 'c', 's', 'ed', 'ta', 'c']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 5, 6, 0, 7, 8, 8, 10, 10, 16, 16]]",
            "sibling_edges": "[[3, 1, 6, 2, 8, 10, 4, 5, 16, 11, 13, 18, 20, 22], [1, 10, 2, 16, 3, 4, 5, 6, 7, 12, 14, 19, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 19, 9, 1, 20, 21, 11, 12, 13, 14, 15, 2, 22, 23], [19, 9, 1, 20, 21, 11, 12, 13, 14, 15, 2, 22, 23, 17]]"
        }
    },
    {
        "code": "find Path -type f -group Regex",
        "text": "find all regular file in en ti r file system that belong to group regex ..",
        "id": 629,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'group', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan",
        "text": "find all file that be mod if i date time ..",
        "id": 630,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -type f",
        "text": "find all file under current director i ..",
        "id": 631,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find . -type d -depth 1 -print0 | xargs -0 sh -c for dir; do pushd \"$dir\" && latexmk -c && popd; done fnord",
        "text": "find all director i under current director i and run a command c hang into ever i file ..",
        "id": 632,
        "graph": {
            "nodes": "['program', ';', ';', '|', '&&', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'number', 'word', 'word', 'word', 'word', '&&', 'word', 'fnord', 'word', '.', '-', 'type', 'd', '-', 'depth', '<number>', '-', 'print', '<number>', 'word', '-', '<number>', 'sh', '-', 'c', 'for', 'dir', 'word', 'raw_string', 'word', 'word', 'do', 'find', 'x', 'arg', 'word', 'push', 'd', \"'\", '$', 'dir', \"'\", 'word', '-', 'c', 'popd', 'do', 'latexmk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 7, 7, 8, 9, 9, 10, 11, 11, 11, 0, 12, 12, 13, 14, 14, 15, 16, 0, 0, 0, 0, 18, 20, 31, 31, 0, 39, 39, 40, 40, 40, 40, 0, 41, 41, 42, 47, 54]]",
            "sibling_edges": "[[16, 1, 42, 2, 11, 3, 41, 4, 18, 20, 6, 7, 8, 9, 10, 31, 12, 13, 14, 15, 40, 17, 22, 25, 28, 29, 32, 35, 47, 39, 54, 45, 48, 50, 51, 52, 55], [1, 47, 2, 18, 3, 31, 4, 42, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 54, 23, 26, 29, 30, 33, 36, 39, 40, 41, 46, 49, 51, 52, 53, 56]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[44, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 3, 45, 46, 32, 33, 34, 35, 36, 37, 38, 1, 58, 48, 49, 50, 51, 52, 53, 17, 59, 55, 56, 4, 57, 2, 43], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 3, 45, 46, 32, 33, 34, 35, 36, 37, 38, 1, 58, 48, 49, 50, 51, 52, 53, 17, 59, 55, 56, 4, 57, 2, 43, 19]]"
        }
    },
    {
        "code": "chown $(stat -c%u:%g $srcdir) $dstdir",
        "text": "clone per miss of regex to regex ..",
        "id": 633,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', '$', 'variable_name', 'chow', 'n', 'word', 'dstdir', 'word', '-', 'c', '%', 'u', ':', '%', 'g', '$', 'variable_name', 'stat', 'srcdir']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 1, 1, 0, 5, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 10, 19]]",
            "sibling_edges": "[[1, 3, 2, 19, 4, 6, 10, 8, 11, 12, 13, 14, 15, 16, 18], [2, 4, 10, 3, 5, 7, 8, 18, 12, 13, 14, 15, 16, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 2, 20, 11, 12, 13, 14, 15, 16, 17, 18, 21, 3, 4], [7, 2, 20, 11, 12, 13, 14, 15, 16, 17, 18, 21, 3, 4, 9]]"
        }
    },
    {
        "code": "mktemp -u -p Regex",
        "text": "genus t default format file name of tempo rar i file in a file folder and save path to it in a v aria bl regex ..",
        "id": 634,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'u', '-', 'p', 'regex', 'mk', 'temp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 10], [1, 2, 3, 6, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 5, 6, 7, 8], [11, 5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -type l",
        "text": "list symbol link under director i regex ..",
        "id": 635,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'l', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "ld --verbose | grep SEARCH_DIR | tr -s  ; \\012",
        "text": "print linker search path use ld format on new line ..",
        "id": 636,
        "graph": {
            "nodes": "['program', ';', '|', '|', 'word', 'word', 'word', 'word', 'word', '--', 'verbose', 'word', 'search_dir', 'word', '-', 's', '\\\\', '<number>', 'ld', 'grep', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 5, 0, 6, 6, 7, 7, 8, 11, 13]]",
            "sibling_edges": "[[6, 1, 4, 2, 5, 3, 8, 11, 13, 9, 14, 16], [1, 7, 2, 11, 3, 13, 4, 5, 6, 10, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 9, 10, 2, 19, 12, 3, 20, 14, 15, 1, 16], [9, 10, 2, 19, 12, 3, 20, 14, 15, 1, 16, 17]]"
        }
    },
    {
        "code": "sed -n Program",
        "text": "cut all re mot path from http url rec e iv from standard input keep on li protocol i dent if i and host name of form file ..",
        "id": 637,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'n', 'program', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -H -i -n Regex {} + | basename $( cut -d Regex -f Number )",
        "text": "find file file in current director i tree that contain regex and print name ..",
        "id": 638,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'h', '-', 'i', '-', 'n', 'regex', 'word', 'word', '+', 'word', '$(', ')', 'find', '{', '}', 'base', 'name', 'word', 'word', 'word', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 0, 0, 11, 0, 0, 0, 12, 27, 28, 30, 30, 0, 0, 0, 0, 0, 38, 38, 39, 40, 40, 41, 42]]",
            "sibling_edges": "[[11, 1, 12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 28, 30, 14, 17, 20, 22, 24, 27, 31, 41, 36, 42, 38, 39, 40, 43, 46], [1, 30, 2, 3, 4, 5, 6, 7, 8, 9, 10, 27, 11, 31, 15, 18, 21, 23, 25, 28, 42, 32, 37, 38, 39, 40, 41, 44, 47]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 29, 1, 36, 37, 31, 49, 43, 44, 45, 46, 47, 48], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 29, 1, 36, 37, 31, 49, 43, 44, 45, 46, 47, 48, 32]]"
        }
    },
    {
        "code": "find Path -type f | grep -i Regex",
        "text": "find all file under file match case in sen it regex regex in path ..",
        "id": 639,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'i', 'regex', 'find', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 7, 12]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 9, 13], [1, 12, 2, 3, 4, 5, 6, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 9, 10, 11, 1, 17, 13, 14], [8, 9, 10, 11, 1, 17, 13, 14, 15]]"
        }
    },
    {
        "code": "brew --prefix",
        "text": "display homebrew 's inst al path ..",
        "id": 640,
        "graph": {
            "nodes": "['command', 'word', 'word', '--', 'prefix', 'brew']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "seq 5 | perl -ne chomp; print \"$_ \"; END{print \"\\n\"}",
        "text": "print space se par number from number to number ..",
        "id": 641,
        "graph": {
            "nodes": "['program', ';', ';', '|', 'raw_string', 'number', 'word', 'word', 'word', \"'\", '$', '_', \"'\", 'raw_string', 'word', 'word', '<number>', 'word', '-', 'ne', 'chomp', 'print', 'word', 'word', 'word', \"'\", \"'\", '}', 'seq', 'perl', 'end', '{', 'print']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 5, 0, 6, 6, 7, 8, 0, 0, 0, 13, 13, 14, 15, 17, 22, 23, 24]]",
            "sibling_edges": "[[7, 1, 4, 2, 5, 3, 8, 24, 15, 17, 6, 9, 10, 11, 13, 18, 22, 23, 25], [1, 8, 2, 22, 3, 17, 4, 13, 5, 6, 7, 10, 11, 12, 14, 19, 23, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 16, 3, 29, 18, 19, 20, 1, 21, 9, 10, 11, 12, 2, 30, 31, 32, 25, 26], [16, 3, 29, 18, 19, 20, 1, 21, 9, 10, 11, 12, 2, 30, 31, 32, 25, 26, 27]]"
        }
    },
    {
        "code": "find Path -type d -empty -exec rmdir {} \\;",
        "text": "de let all e mp ti director i in current folder ..",
        "id": 642,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'empty', '-', 'exec', 'rm', 'dir', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 0, 0, 7, 7, 8, 19, 20]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 20, 10, 13, 15, 17, 19, 21], [1, 2, 3, 4, 5, 6, 19, 7, 11, 14, 16, 18, 20, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 21], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 21, 22]]"
        }
    },
    {
        "code": "$( readlink -f $( dirname Regex ) )",
        "text": "print real path of folder contain regex file ..",
        "id": 643,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', 'word', 'word', '-', 'f', '$(', ')', 'read', 'link', 'word', 'word', 'regex', 'dir', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 3, 3, 0, 0, 4, 4, 0, 0, 11, 12, 12]]",
            "sibling_edges": "[[1, 8, 4, 3, 5, 7, 11, 9, 12, 14], [4, 2, 3, 7, 6, 12, 8, 10, 11, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 9, 10, 5, 6, 7, 14, 15, 13, 8], [9, 10, 5, 6, 7, 14, 15, 13, 8, 2]]"
        }
    },
    {
        "code": "find Path -name Regex -print | cpio -p -d -m Regex",
        "text": "cop i all file file in directory director i tree to directory pre serv director i hi er arch i ..",
        "id": 644,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'word', '-', 'p', '-', 'd', '-', 'm', 'regex', 'find', 'cp', 'io']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 0, 6, 6, 7, 7, 8, 8, 9, 10, 17, 17]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 17, 6, 7, 8, 12, 15, 18, 20, 22, 26], [1, 17, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 19, 21, 23, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 11, 12, 13, 14, 15, 16, 1, 26, 27, 18, 19, 20, 21, 22, 23], [11, 12, 13, 14, 15, 16, 1, 26, 27, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "rsync -a --relative File File",
        "text": "archiv file to host regex use rel at path name ..",
        "id": 645,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'a', '--', 'relative', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 12], [1, 2, 3, 4, 7, 9, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 13, 6, 7, 8, 9, 10], [13, 6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find / -name *.md -type f -exec markdown -o {}.html {} ;",
        "text": "find all file file in en ti r file system and convert them to file file ..",
        "id": 646,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', '-', 'name', '*', '.', 'md', '-', 'type', 'f', '-', 'exec', 'markdown', '-', 'o', 'word', 'word', 'word', 'word', 'word', 'find', '{', '}', '.', 'html', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 8, 9, 9, 0, 0, 0, 0, 0, 10, 25, 26, 27, 27, 28, 29]]",
            "sibling_edges": "[[29, 10, 2, 3, 4, 5, 6, 7, 8, 9, 27, 12, 14, 15, 17, 20, 23, 25, 26, 28, 33], [1, 2, 3, 4, 5, 6, 7, 8, 9, 25, 28, 13, 15, 16, 18, 21, 24, 26, 27, 29, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 32, 33, 34, 35, 36], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 32, 33, 34, 35, 36, 1]]"
        }
    },
    {
        "code": "find .|grep FooBar|yargs -l 203 cp --after ~/foo/bar",
        "text": "find all file and director i under current director i with regex in path and cop i them to file ..",
        "id": 647,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', '.', 'word', 'foobar', 'word', '-', 'l', '<number>', 'cp', '--', 'after', '~', '/', 'foo', '/', 'bar', 'find', 'grep', 'yargs']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9, 10, 12, 14]]",
            "sibling_edges": "[[3, 1, 4, 2, 10, 12, 14, 5, 6, 7, 8, 15, 19, 21, 22, 23, 24], [1, 12, 2, 14, 3, 4, 5, 6, 7, 8, 9, 16, 20, 22, 23, 24, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 1, 27, 13, 2, 28, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [11, 1, 27, 13, 2, 28, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "touch -r File File",
        "text": "set timestamp of b to same one as a ..",
        "id": 648,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'file', 'file', 'touch']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "pstree Regex",
        "text": "show on li process tree root at process of user ..",
        "id": 649,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'ps', 'tree']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "grep -v pattern file > temp && mv temp file",
        "text": "de let all line in regex that contain regex use regex as tempo rar i work file ..",
        "id": 650,
        "graph": {
            "nodes": "['list', '&&', 'word', 'word', 'word', 'word', 'word', '>', 'word', 'word', 'temp', 'file', 'word', '-', 'v', 'pattern', 'file', 'temp', 'mv', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 6, 8, 9, 12]]",
            "sibling_edges": "[[8, 1, 6, 9, 2, 12, 4, 5, 7, 13], [1, 9, 7, 2, 3, 4, 5, 6, 8, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 13, 14, 15, 16, 7, 17, 1, 18, 10], [13, 14, 15, 16, 7, 17, 1, 18, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} grep Regex {}",
        "text": "search all python file in current director i tree for string regex ..",
        "id": 651,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 0, 0, 8, 13, 13, 16, 17, 20, 21]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 17, 6, 7, 10, 14, 16, 20, 23], [1, 13, 2, 3, 4, 5, 16, 6, 7, 20, 11, 15, 17, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 19, 27], [9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 19, 27, 28]]"
        }
    },
    {
        "code": "find Path -size +Size -size -Size -print",
        "text": "list all file that be between number and size in size ..",
        "id": 652,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'size', '-', 'size', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 11, 13, 15, 17], [1, 2, 3, 4, 5, 6, 10, 12, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "fg",
        "text": "get a current job back to foreground ..",
        "id": 653,
        "graph": {
            "nodes": "['program', 'command', 'command_name', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', '-', 'size', '-', 'size', '-']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 11, 13, 15, 17], [1, 2, 3, 4, 5, 6, 10, 12, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "set -e",
        "text": "abort shell or script on first fail command ..",
        "id": 654,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'e', 'set']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type d -print | xargs -I {} echo Regex {}",
        "text": "find director i in current director i and print them append with a string liter regex ..",
        "id": 655,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'd', '-', 'print', 'word', '-', 'i', 'word', 'word', 'echo', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 7, 7, 0, 8, 8, 0, 0, 9, 10, 0, 0, 11, 22, 22, 25, 26, 29, 30]]",
            "sibling_edges": "[[7, 1, 11, 2, 3, 4, 5, 6, 22, 8, 26, 9, 10, 13, 14, 17, 20, 23, 25, 29, 32], [1, 22, 2, 3, 4, 5, 6, 7, 8, 25, 9, 10, 29, 14, 15, 18, 21, 24, 26, 30, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 32, 33, 23, 24, 34, 35, 27, 28, 36], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 32, 33, 23, 24, 34, 35, 27, 28, 36, 37]]"
        }
    },
    {
        "code": "uname -r",
        "text": "set v aria bl val u to current kernel re lea name ..",
        "id": 656,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'r', 'u', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 1, 1, 2, 2]]",
            "sibling_edges": "[[2, 3, 5], [1, 4, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 6, 3], [6, 3, 4]]"
        }
    },
    {
        "code": "ping -w Timespan Regex",
        "text": "send ping request to ho tn be specif i by v aria bl file for time span ..",
        "id": 657,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'w', 'timespan', 'regex', 'ping']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "display all file file in current folder ..",
        "id": 658,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "touch -d Regex File",
        "text": "set timestamp of all file file in current director i to date specif i ..",
        "id": 659,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'd', 'regex', 'file', 'touch']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "du -a File | sort -n -r | head",
        "text": "print top number large file and director i ..",
        "id": 660,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', '-', 'a', 'file', 'word', '-', 'n', '-', 'r', 'word', 'du', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 5, 5, 6, 6, 0, 7, 11, 16]]",
            "sibling_edges": "[[4, 1, 6, 2, 7, 3, 11, 5, 8, 12, 14], [1, 11, 2, 16, 3, 4, 5, 6, 9, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 1, 18, 12, 13, 14, 15, 2], [8, 9, 10, 1, 18, 12, 13, 14, 15, 2, 19]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "search for file and director i with a case in sen it file ext en in en ti r file system ..",
        "id": 661,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "xxx |& tee /dev/null",
        "text": "redirect stderr to stdout and write to con sol and file ..",
        "id": 662,
        "graph": {
            "nodes": "['pipeline', '|&', 'word', 'word', 'word', '/', 'dev', '/', 'null', 'xxx', 'tee']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[3, 1, 4, 5, 6, 7], [1, 4, 2, 6, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 1, 10, 5, 6, 7], [1, 10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "v=$(whoami | perl -e print uc <>)",
        "text": "save user name in all capit of current user to v aria bl regex ..",
        "id": 663,
        "graph": {
            "nodes": "['variable_assignment', 'variable_name', '=', 'v', '$(', ')', '|', '<', '>', 'word', 'word', 'word', 'word', 'word', '-', 'e', 'print', 'uc', 'whoa', 'mi', 'perl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 10, 11, 12, 12, 13]]",
            "sibling_edges": "[[1, 2, 4, 11, 8, 12, 6, 7, 13, 9, 10, 14, 18], [2, 4, 12, 7, 5, 6, 13, 8, 9, 10, 11, 15, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 2, 4, 18, 19, 6, 20, 14, 15, 16, 17, 7, 8], [2, 4, 18, 19, 6, 20, 14, 15, 16, 17, 7, 8, 5]]"
        }
    },
    {
        "code": "scp -r File File File",
        "text": "recur cop i director i regex and regex to director i file on host regex connect as ssh user match current user on local host via default tcp port for ssh ..",
        "id": 664,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'r', 'file', 'file', 'file', 's', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 11], [1, 2, 3, 4, 7, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 6, 7, 8, 9], [12, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -type f -empty -print0 | xargs -0 -I {} rm {}",
        "text": "r emo v all e mp ti regular file under current director i and below ..",
        "id": 665,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'empty', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 6, 0, 7, 7, 8, 8, 0, 0, 9, 0, 0, 10, 20, 20, 25, 26, 28, 29]]",
            "sibling_edges": "[[6, 1, 10, 2, 3, 4, 5, 20, 7, 8, 26, 9, 12, 15, 17, 18, 21, 23, 25, 28, 31], [1, 20, 2, 3, 4, 5, 6, 7, 8, 25, 9, 28, 13, 16, 18, 19, 22, 24, 26, 29, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 31, 32, 21, 22, 23, 24, 33, 34, 27, 35], [11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 31, 32, 21, 22, 23, 24, 33, 34, 27, 35, 36]]"
        }
    },
    {
        "code": "find Path -name Regex -ls",
        "text": "display list of all hide file in home folder ..",
        "id": 666,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex -exec echo {} Regex \\;",
        "text": "find all file in current director i which end with orig ..",
        "id": 667,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'echo', 'word', 'word', 'regex', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 7, 7, 8, 16, 17]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 17, 6, 10, 13, 16, 19], [1, 2, 3, 4, 5, 16, 6, 7, 11, 14, 17, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 22, 23, 18, 19], [9, 10, 11, 12, 13, 14, 15, 22, 23, 18, 19, 20]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type d | awk -F Regex Program",
        "text": "list all director i in current director i work even if weird name or name start with a dash ..",
        "id": 668,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'd', 'word', '-', 'f', 'regex', 'program', 'find', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 5, 5, 6, 0, 7, 7, 8, 9, 10, 19, 19]]",
            "sibling_edges": "[[6, 1, 10, 2, 3, 4, 5, 19, 7, 8, 12, 13, 16, 20, 25], [1, 19, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 17, 21, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 11, 12, 13, 14, 15, 16, 17, 18, 1, 25, 26, 20, 21, 22], [11, 12, 13, 14, 15, 16, 17, 18, 1, 25, 26, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path -prune",
        "text": "prune all file in current director i on li current director i be output ..",
        "id": 669,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'path', '-', 'prune', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 2, 3]]",
            "sibling_edges": "[[3, 1, 5], [1, 2, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -type d -name Regex",
        "text": "search for director i start with regex in en ti r file system ..",
        "id": 670,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "ifconfig | grep -o -P Regex",
        "text": "get ip address of all act iv network inter fa c and save to regex v aria bl ..",
        "id": 671,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'o', '-', 'p', 'regex', 'if', 'config', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 5, 6]]",
            "sibling_edges": "[[5, 1, 6, 2, 3, 7, 9, 12], [1, 6, 2, 3, 4, 8, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 13, 1, 14, 7, 8, 9, 10], [13, 1, 14, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "echo -e Regex | nl",
        "text": "genus t obsolet number char act spanish alphabet and number each char act ..",
        "id": 672,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '-', 'e', 'regex', 'word', 'echo', 'nl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 2, 3, 0, 4, 8]]",
            "sibling_edges": "[[3, 1, 4, 2, 5], [1, 8, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7, 1], [5, 6, 7, 1, 10]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} +",
        "text": "find all file under file and set per miss to number ..",
        "id": 673,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 20]]"
        }
    },
    {
        "code": "diff <(fold -w1 <<< $s) <(fold -w1 <<< $r) | awk /[<>]/{printf $2}",
        "text": "print differ between number string regex and regex ..",
        "id": 674,
        "graph": {
            "nodes": "['redirected_statement', '|', '<', '>', 'word', 'word', 'word', 'word', 'word', 'word', '<(', ')', '<(', ')', 'word', 'word', 'word', ']', '/', '{', 'print', 'f', '$', 'variable_name', '}', 'diff', 'word', 'word', 'a', 'wk', '/', '[', '<number>', 'word', '-', 'w', '<number>', '<<<', 'word', '-', 'w', '<number>', '<<<', 'fold', '$', 'variable_name', 'fold', '$', 'variable_name', 's', 'r']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 7, 0, 0, 8, 9, 0, 0, 14, 14, 15, 16, 23, 0, 26, 26, 26, 0, 0, 27, 27, 27, 0, 33, 0, 0, 38, 0, 0, 45, 48]]",
            "sibling_edges": "[[16, 2, 13, 1, 3, 7, 9, 11, 14, 4, 5, 6, 23, 10, 45, 12, 48, 15, 20, 22, 33, 26, 38, 27, 28, 34, 35, 37, 39, 40, 42, 44, 47], [2, 3, 1, 14, 4, 22, 10, 12, 15, 5, 6, 7, 8, 33, 11, 38, 13, 16, 21, 23, 26, 37, 27, 42, 29, 35, 36, 44, 40, 41, 47, 45, 48]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 43, 34, 35, 36, 37, 44, 49, 11, 12, 46, 39, 40, 41, 42, 47, 50, 13, 1, 28, 29, 30, 31, 2, 3, 17, 18, 19, 20, 21, 22, 32], [10, 43, 34, 35, 36, 37, 44, 49, 11, 12, 46, 39, 40, 41, 42, 47, 50, 13, 1, 28, 29, 30, 31, 2, 3, 17, 18, 19, 20, 21, 22, 32, 24]]"
        }
    },
    {
        "code": "$( dirname Regex )",
        "text": "print director i where exe cut script be loc at ..",
        "id": 675,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', 'word', 'word', 'regex', 'dir', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 0, 3, 4, 4]]",
            "sibling_edges": "[[1, 3, 4, 6], [4, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 6, 7, 5], [6, 7, 5, 2]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} rm {}",
        "text": "r emo v all file with name like file from current director i tree ..",
        "id": 676,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 0, 0, 7, 12, 12, 15, 16, 18, 19]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 16, 6, 9, 13, 15, 18, 21], [1, 12, 2, 3, 4, 5, 15, 6, 18, 10, 14, 16, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 1, 21, 22, 13, 14, 23, 24, 17, 25], [8, 9, 10, 11, 1, 21, 22, 13, 14, 23, 24, 17, 25, 26]]"
        }
    },
    {
        "code": "find Path | xargs -i -I {} rm -f {} {}",
        "text": "f orc de let all file in current folder ..",
        "id": 677,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'word', '-', 'i', '-', 'i', 'word', 'word', 'rm', '-', 'f', 'word', 'word', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 0, 0, 5, 6, 6, 0, 0, 0, 0, 7, 9, 9, 14, 15, 19, 20, 21, 22]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 4, 15, 5, 6, 20, 10, 12, 14, 17, 19, 21, 24], [1, 9, 2, 3, 4, 14, 5, 6, 19, 21, 11, 13, 15, 18, 20, 22, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 8, 1, 24, 25, 10, 11, 12, 13, 26, 27, 16, 17, 18, 28, 29, 30], [8, 1, 24, 25, 10, 11, 12, 13, 26, 27, 16, 17, 18, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "dig Regex | grep Regex | grep -v Regex | awk Program",
        "text": "grep domain regex ip name from long dig list ..",
        "id": 678,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', 'regex', 'word', '-', 'v', 'regex', 'word', 'program', 'dig', 'grep', 'grep', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 6, 6, 7, 0, 8, 9, 11, 13, 17, 17]]",
            "sibling_edges": "[[4, 1, 5, 2, 7, 3, 9, 11, 13, 6, 17, 14, 22], [1, 11, 2, 13, 3, 17, 4, 5, 6, 7, 8, 15, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 10, 1, 20, 12, 2, 21, 14, 15, 16, 3, 22, 23], [10, 1, 20, 12, 2, 21, 14, 15, 16, 3, 22, 23, 18]]"
        }
    },
    {
        "code": "read -a arr <<< 1 4 6 9 11 17 22",
        "text": "save regex as a bash array regex ..",
        "id": 679,
        "graph": {
            "nodes": "['command', 'word', 'word', 'number', 'number', 'number', 'number', 'number', 'number', 'word', '-', 'a', 'arr', '<<<', 'number', '<number>', '<number>', '<number>', '<number>', '<number>', '<number>', 'read', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 3, 4, 5, 6, 7, 8, 9, 14]]",
            "sibling_edges": "[[9, 1, 2, 14, 3, 4, 5, 6, 7, 10, 13], [1, 2, 13, 3, 4, 5, 6, 7, 8, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 13, 22, 15, 16, 17, 18, 19], [10, 11, 12, 13, 22, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "find Path -exec grep -i Regex {} \\;",
        "text": "search file in current director i tree for line contain string regex ..",
        "id": 680,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'grep', '-', 'i', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 6, 6, 7, 15, 16]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 16, 9, 12, 15, 17], [1, 2, 3, 4, 5, 15, 6, 10, 13, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 17], [8, 9, 10, 11, 12, 13, 14, 20, 21, 17, 18]]"
        }
    },
    {
        "code": "curl -x http://proxy_server:proxy_port --proxy-user username:password -L http://url",
        "text": "download content from file use a pro xi server ..",
        "id": 681,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'x', '<', 'url', '>', '--', 'proxy', '-', 'user', 'username', ':', 'password', '-', 'l', '<', 'url', '>', 'curl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23], [1, 2, 3, 4, 5, 6, 9, 11, 12, 14, 15, 16, 18, 19, 21, 23, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "df -P File | awk Program",
        "text": "print mount point of file system contain regex ..",
        "id": 682,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'p', 'file', 'word', 'program', 'df', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 2, 3, 0, 4, 5, 9, 9]]",
            "sibling_edges": "[[3, 1, 5, 2, 9, 6, 12], [1, 9, 2, 3, 4, 7, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 1, 12, 13], [6, 7, 8, 1, 12, 13, 10]]"
        }
    },
    {
        "code": "yes Regex | rm -i -r File File File",
        "text": "answer regex to an i prompt in interact recur r emo v of regex regex and regex ..",
        "id": 683,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'i', '-', 'r', 'file', 'file', 'file', 'yes', 'rm']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 5, 6, 7, 8, 10]]",
            "sibling_edges": "[[2, 1, 8, 10, 3, 4, 5, 6, 11, 13], [1, 10, 2, 3, 4, 5, 6, 7, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 9, 1, 19, 11, 12, 13, 14, 15, 16], [9, 1, 19, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "which Regex",
        "text": "save full path of command file to v aria bl regex ..",
        "id": 684,
        "graph": {
            "nodes": "['command', 'word', 'word', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "fold -w1 file | pr -4t | sed s/\\s*-\\s*//g | tr -d \\n | sed $a\\",
        "text": "print each column in regex with regex char act r emo v ..",
        "id": 685,
        "graph": {
            "nodes": "['program', '|', '|', '|', '|', 'ERROR', 'word', 'word', 'word', 'word', 'word', '\\\\', 'word', '-', 'w', '<number>', 'file', 'word', '-', '<number>', 't', 'word', 's', '/', '\\\\', 's', '*', '-', '\\\\', 's', '*', '/', '/', 'g', 'word', '-', 'd', 'word', '$', 'variable_name', 'fold', 'pr', 's', 'ed', 'tr', 's', 'ed', 'a']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 6, 6, 7, 0, 8, 8, 8, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 10, 10, 0, 0, 0, 12, 17, 21, 21, 34, 37, 37, 39]]",
            "sibling_edges": "[[10, 7, 1, 8, 2, 9, 3, 4, 39, 12, 6, 17, 21, 34, 37, 13, 14, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 38, 42, 45], [4, 1, 17, 2, 21, 3, 34, 37, 5, 6, 7, 8, 9, 10, 38, 14, 15, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 39, 43, 46]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[40, 13, 14, 15, 16, 1, 41, 18, 19, 20, 2, 42, 43, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 3, 44, 35, 36, 4, 45, 46, 38, 47], [13, 14, 15, 16, 1, 41, 18, 19, 20, 2, 42, 43, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 3, 44, 35, 36, 4, 45, 46, 38, 47, 11]]"
        }
    },
    {
        "code": "top -l 1 -s 0 -stats mem -pid $PID",
        "text": "show intern m em or i size use by process who be e pi d be specif i by v aria bl pi d ..",
        "id": 686,
        "graph": {
            "nodes": "['command', 'word', 'number', 'word', 'number', 'word', 'word', 'word', 'word', '-', 'l', '<number>', '-', 's', '<number>', '-', 'stats', 'me', 'm', '-', 'pi', 'd', '$', 'variable_name', 'top', 'pi', 'd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 7, 0, 0, 8, 23, 23]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 7, 9, 12, 15, 17, 19, 20, 22, 25], [1, 2, 3, 4, 5, 6, 7, 22, 10, 13, 16, 18, 20, 21, 23, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26]]"
        }
    },
    {
        "code": "find Path -name Regex -and -type d -prune -or -print",
        "text": "print list of file in current director i tree skip svn file ..",
        "id": 687,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'and', '-', 'type', 'd', '-', 'prune', '-', 'or', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 17, 20, 22, 24], [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 18, 21, 23, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "cat File | xargs",
        "text": "print join string from regex use space symbol as se par ..",
        "id": 688,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'file', 'word', 'cat', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 2, 0, 3, 5, 5]]",
            "sibling_edges": "[[2, 1, 3, 7], [1, 5, 2, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4, 1, 7], [4, 1, 7, 8]]"
        }
    },
    {
        "code": "ldd /bin/* /usr/bin/* ... | sed -e /^[^\\t]/ d; s/^\\t\\(.* => \\)\\?\\([^ ]*\\) (.*/\\2/g | sort | uniq -c",
        "text": "rank u sag of librari for a set of tool file ..",
        "id": 689,
        "graph": {
            "nodes": "['program', ';', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'bin', '/', '*', '/', 'us', 'r', '/', 'bin', '/', '*', '...', 'word', '-', 'e', 'word', 'word', 'word', 'word', 'word', 'd', 'word', '>', 'word', 'word', '-', 'c', 'ldd', 's', 'ed', '/', '^', '[', '^', '\\\\', 't', ']', '/', 'word', '=', 'word', 'word', 'word', 'word', 'word', 'word', 'sort', 'uni', 'q', 's', '/', '^', '\\\\', 't', '\\\\', '(', '.', '*', '\\\\', ')', '\\\\', '?', '\\\\', '(', '[', '^', ']', '*', '\\\\', ')', '(', '.', '*', '/', '\\\\', '<number>', '/', 'g']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 0, 8, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 10, 10, 11, 24, 24, 27, 27, 28, 29, 29, 29, 30, 31, 0, 33, 0, 0, 0, 0, 0, 0, 35, 36, 36, 50, 50, 50, 50, 50, 50, 50, 50, 50, 52, 52, 52, 52, 52, 52, 53, 54, 55, 56, 56, 56, 0, 57, 57, 57, 57, 57, 57, 57]]",
            "sibling_edges": "[[9, 1, 7, 2, 57, 3, 35, 4, 11, 5, 6, 24, 8, 31, 33, 36, 12, 13, 14, 16, 17, 18, 19, 20, 21, 25, 27, 28, 29, 30, 50, 34, 54, 37, 40, 42, 45, 46, 52, 53, 55, 56, 82, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 79, 80, 83, 84, 85, 86, 87, 88], [1, 50, 2, 24, 3, 35, 4, 36, 5, 6, 7, 8, 27, 9, 34, 10, 13, 14, 15, 17, 18, 19, 20, 21, 22, 26, 28, 29, 30, 31, 33, 52, 55, 38, 41, 43, 46, 47, 53, 54, 56, 82, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 80, 81, 84, 85, 86, 87, 88, 89]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[39, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 2, 40, 41, 25, 26, 42, 43, 44, 45, 46, 47, 48, 49, 32, 1, 61, 62, 63, 64, 65, 66, 67, 68, 69, 51, 34, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 3, 58, 4, 59, 60, 37], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 2, 40, 41, 25, 26, 42, 43, 44, 45, 46, 47, 48, 49, 32, 1, 61, 62, 63, 64, 65, 66, 67, 68, 69, 51, 34, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 3, 58, 4, 59, 60, 37, 38]]"
        }
    },
    {
        "code": "watch -d top -n1 | grep mysql",
        "text": "exe cut regex ever i time span and highlight differ between run ..",
        "id": 690,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'd', 'top', '-', 'n', '<number>', 'word', 'my', 'sql', 'watch', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 4, 0, 5, 5, 6, 13]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 13, 7, 10, 11, 14], [1, 13, 2, 3, 4, 5, 8, 11, 12, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 1, 17, 14], [7, 8, 9, 10, 11, 12, 1, 17, 14, 15]]"
        }
    },
    {
        "code": "find Path -type f -size +Size -print | xargs -I {} ls -l -d {} | more",
        "text": "list all file under current director i that be great than regex byte in size ..",
        "id": 691,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'size', '+', 'size', '-', 'print', 'word', '-', 'i', 'word', 'word', 'ls', '-', 'l', '-', 'd', 'word', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', 'more']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 0, 9, 9, 0, 0, 10, 11, 11, 12, 12, 0, 0, 0, 13, 24, 24, 27, 28, 34, 35, 36]]",
            "sibling_edges": "[[8, 1, 35, 2, 13, 3, 4, 5, 6, 7, 24, 9, 28, 10, 11, 12, 15, 18, 20, 22, 25, 27, 30, 32, 34, 38], [1, 24, 2, 36, 3, 4, 5, 6, 7, 8, 9, 27, 10, 11, 12, 34, 16, 19, 21, 23, 26, 28, 31, 33, 35, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 38, 39, 25, 26, 40, 41, 29, 30, 31, 32, 33, 42, 43, 2], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 38, 39, 25, 26, 40, 41, 29, 30, 31, 32, 33, 42, 43, 2, 44]]"
        }
    },
    {
        "code": "who | grep $(tty | sed 's:/dev/::')",
        "text": "list all user file into current tti ..",
        "id": 692,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', '$(', ')', 'who', 'grep', '|', 'raw_string', 'word', 'word', \"'s\", ':', '/', 'dev', '/', ':', ':', \"'\", 'tt', 'y', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 11, 11]]",
            "sibling_edges": "[[2, 1, 3, 4, 9, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22], [1, 3, 4, 10, 5, 8, 11, 9, 13, 14, 15, 16, 17, 18, 19, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 1, 7, 4, 20, 21, 8, 22, 23, 12, 13, 14, 15, 16, 17, 18, 19], [1, 7, 4, 20, 21, 8, 22, 23, 12, 13, 14, 15, 16, 17, 18, 19, 5]]"
        }
    },
    {
        "code": "find /ghi /jkl -type f -name abc.def 2> /dev/null -exec ls {} ; -exec cat {} ;",
        "text": "list and see content of all file file under director i file and file ..",
        "id": 693,
        "graph": {
            "nodes": "['program', ';', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file_descriptor', '>', 'word', 'word', 'word', 'word', 'cat', 'word', 'word', 'word', '/', 'ghi', '/', 'jkl', '-', 'type', 'f', '-', 'name', 'ab', 'c', '.', 'def', '<number>', '/', 'dev', '/', 'null', '-', 'exec', 'ls', 'word', 'word', '-', 'exec', '{', '}', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 9, 9, 10, 12, 12, 12, 12, 13, 13, 14, 0, 0, 15, 15, 17, 18, 19, 41, 42]]",
            "sibling_edges": "[[42, 1, 18, 9, 15, 3, 19, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 20, 22, 24, 27, 29, 30, 31, 34, 35, 36, 38, 41, 43], [1, 15, 2, 10, 3, 17, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 41, 18, 21, 23, 25, 28, 30, 31, 32, 35, 36, 37, 39, 42, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[47, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 11, 34, 35, 36, 37, 38, 39, 40, 48, 49, 1, 43, 44, 16, 45, 46], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 11, 34, 35, 36, 37, 38, 39, 40, 48, 49, 1, 43, 44, 16, 45, 46, 2]]"
        }
    },
    {
        "code": "find Path -type d -name Regex -prune -or -type f -print",
        "text": "find all file in current director i tree ig nor file director i ..",
        "id": 694,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'type', 'f', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 19, 21, 23, 26], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 20, 22, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "loc at file in file director i tree ..",
        "id": 695,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "od -A n -N File -t u2 File",
        "text": "read size from file and print them as an unsign integ ..",
        "id": 696,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', 'n', '-', 'n', 'file', '-', 't', 'u2', 'file', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 9, 12, 15], [1, 2, 3, 4, 5, 6, 7, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "echo -n Regex | md5sum",
        "text": "cal cu l regex sum of e mp ti string ..",
        "id": 697,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '-', 'n', 'regex', 'word', 'echo', 'md', '<number>', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 2, 2, 3, 0, 4, 8, 8, 8]]",
            "sibling_edges": "[[3, 1, 4, 2, 5, 10, 11], [1, 8, 2, 3, 6, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7, 1, 10, 11], [5, 6, 7, 1, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -type f | xargs -I {} grep Regex {}",
        "text": "search regular file of current director i tree for string regex ..",
        "id": 698,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 0, 0, 8, 13, 13, 16, 17, 20, 21]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 17, 6, 7, 10, 14, 16, 20, 23], [1, 13, 2, 3, 4, 5, 16, 6, 7, 20, 11, 15, 17, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 19, 27], [9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 19, 27, 28]]"
        }
    },
    {
        "code": "find Path -name Regex -prune -or -name Regex -type f -print",
        "text": "search file director i recur for regular file name regex ig nor regex director i ..",
        "id": 699,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'name', 'regex', '-', 'type', 'f', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 18, 20, 23, 26], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 19, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "find Path -exec cat {} \\;",
        "text": "print content of all file find regard seach option regex ..",
        "id": 700,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'cat', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 1, 2, 2, 3, 0, 0, 4, 4, 5, 10, 11]]",
            "sibling_edges": "[[5, 1, 2, 3, 11, 7, 10, 12], [1, 2, 3, 10, 4, 8, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 15, 16, 12], [6, 7, 8, 9, 15, 16, 12, 13]]"
        }
    },
    {
        "code": "find Path -type d -perm -Permission",
        "text": "find all director i in current one recur which write bite set for regex ..",
        "id": 701,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 13], [1, 2, 3, 4, 5, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -name Regex -or -name Regex",
        "text": "find all file cpp file in current folder ..",
        "id": 702,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14], [1, 2, 3, 4, 5, 6, 10, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "rmdir $( dirname Regex )",
        "text": "cut off last part from path regex and de let result folder if e mp ti ..",
        "id": 703,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'rm', 'dir', 'word', 'word', 'regex', 'dir', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 1, 0, 0, 6, 7, 7]]",
            "sibling_edges": "[[1, 2, 6, 4, 7, 9], [2, 7, 3, 5, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 2, 9, 10, 8], [5, 2, 9, 10, 8, 3]]"
        }
    },
    {
        "code": "read -r -s -p Regex",
        "text": "silent read a line from standard input into v aria bl regex without backslash es cap and use prompt regex ..",
        "id": 704,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 's', '-', 'p', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 10], [1, 2, 3, 4, 7, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -print",
        "text": "find all file and director i under current director i ..",
        "id": 705,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'path', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 2, 3]]",
            "sibling_edges": "[[3, 1, 5], [1, 2, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find Path -perm Permission -exec chmod Permission {} \\;",
        "text": "r emo v all per miss for other to all file in current folder which read write exe cut access to user group and other ..",
        "id": 706,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "echo Regex | nl -b a -s Regex",
        "text": "add a number prefix follow by regex to each line in regex ..",
        "id": 707,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'b', 'a', '-', 's', 'regex', 'echo', 'nl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 6, 7, 9]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 4, 5, 10, 13], [1, 9, 2, 3, 4, 5, 6, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 1, 17, 10, 11, 12, 13, 14], [8, 1, 17, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "chmod +Permission File",
        "text": "add exe cut per miss to file ..",
        "id": 708,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '+', 'permission', 'file', 'ch', 'mod']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "time -o time.log command",
        "text": "use gnu tool regex to estim time consum by command regex and redirect output to file ..",
        "id": 709,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'o', 'time', '.', 'log', 'command', 'time']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 8], [1, 2, 3, 6, 8, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path | grep Regex | xargs -I {} cp {} File",
        "text": "cop i all file with regex in path under current director i to file director i ..",
        "id": 710,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'word', 'regex', 'word', '-', 'i', 'word', 'word', 'cp', 'word', 'word', 'file', 'find', 'grep', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 5, 0, 0, 6, 0, 0, 7, 8, 10, 12, 12, 15, 16, 18, 19]]",
            "sibling_edges": "[[3, 1, 4, 2, 8, 10, 12, 5, 16, 6, 19, 13, 15, 18, 23], [1, 10, 2, 12, 3, 4, 5, 15, 6, 18, 7, 14, 16, 19, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 1, 22, 11, 2, 23, 24, 13, 14, 25, 26, 17, 27, 28], [9, 1, 22, 11, 2, 23, 24, 13, 14, 25, 26, 17, 27, 28, 20]]"
        }
    },
    {
        "code": "find Path -type d -name Regex -exec dirname {} +",
        "text": "find file director i in director i tree file and print path n be of p be not ..",
        "id": 711,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', '-', 'exec', 'dir', 'name', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 0, 0, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 14, 17, 19, 21], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 15, 18, 20, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 23]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} mv {} File",
        "text": "move all file in current director i tree that match regex to regex ..",
        "id": 712,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'mv', 'word', 'word', 'file', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 0, 0, 9, 10, 18, 18, 23, 24, 26, 27]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 18, 6, 7, 24, 8, 27, 12, 15, 16, 19, 21, 23, 26, 30], [1, 18, 2, 3, 4, 5, 6, 7, 23, 8, 26, 9, 13, 16, 17, 20, 22, 24, 27, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 17, 1, 30, 31, 19, 20, 21, 22, 32, 33, 25, 34, 35], [11, 12, 13, 14, 15, 16, 17, 1, 30, 31, 19, 20, 21, 22, 32, 33, 25, 34, 35, 28]]"
        }
    },
    {
        "code": "ping Regex -c Quantity | grep -E -o Regex | cut -f Number -d Regex",
        "text": "set v aria bl ping to number if it 's possibl to ping host address to number otherwis ..",
        "id": 713,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', '-', 'c', 'quantity', 'word', '-', 'e', '-', 'o', 'regex', 'word', '-', 'f', 'number', '-', 'd', 'regex', 'ping', 'grep', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 6, 7, 7, 8, 0, 9, 9, 10, 11, 11, 12, 13, 18, 24]]",
            "sibling_edges": "[[5, 1, 8, 2, 13, 3, 4, 18, 6, 7, 24, 9, 10, 11, 15, 19, 21, 25, 28], [1, 18, 2, 24, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 20, 22, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 14, 15, 16, 17, 1, 32, 19, 20, 21, 22, 23, 2, 33, 25, 26, 27, 28, 29], [14, 15, 16, 17, 1, 32, 19, 20, 21, 22, 23, 2, 33, 25, 26, 27, 28, 29, 30]]"
        }
    },
    {
        "code": "find Path -name Regex -mtime +Timespan",
        "text": "find all file and director i under current director i tree that start with regex and end with regex in name and be mod if i more than time span ago ..",
        "id": 714,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'm', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14], [1, 2, 3, 4, 5, 9, 12, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -name Regex -exec ls -l -r -t {} + | awk Program",
        "text": "list all file file and director i under directory director i ..",
        "id": 715,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'ls', '-', 'l', '-', 'r', '-', 't', 'word', 'word', '+', 'word', 'program', 'find', '{', '}', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 0, 0, 10, 0, 11, 12, 26, 27, 29, 29]]",
            "sibling_edges": "[[10, 1, 12, 2, 3, 4, 5, 6, 7, 8, 9, 27, 29, 14, 17, 20, 22, 24, 26, 34], [1, 29, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 11, 15, 18, 21, 23, 25, 27, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 28, 1, 34, 35], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 28, 1, 34, 35, 30]]"
        }
    },
    {
        "code": "find Path -iname Regex \\( -type d -or -type f \\) -mtime -Timespan",
        "text": "find all file and director i under current director i tree that mod if i in time span and contain regex in name ..",
        "id": 716,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '\\\\', '(', '-', 'type', 'd', '-', 'or', '-', 'type', 'f', '\\\\', ')', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 12, 13]]",
            "sibling_edges": "[[13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 19, 21, 24, 26, 29, 31, 32, 34], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 20, 22, 25, 27, 30, 32, 33, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]]"
        }
    },
    {
        "code": "find Path -name Regex -delete",
        "text": "r emo v all file file in and below current director i ..",
        "id": 717,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "yes Regex | bash",
        "text": "display infinit scroll of random ascii art ..",
        "id": 718,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'regex', 'word', 'yes', 'bash']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 2, 0, 3, 5]]",
            "sibling_edges": "[[2, 1, 3], [1, 5, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4, 1], [4, 1, 7]]"
        }
    },
    {
        "code": "tail -n +Quantity File",
        "text": "print content of regex start from line number ..",
        "id": 719,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', '+', 'quantity', 'file', 'tail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7], [1, 2, 3, 6, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find . -name *.txt -printf %f\\n > /tmp/a",
        "text": "display all text file in current folder and save output to a file ..",
        "id": 720,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', '>', 'word', 'word', '.', '-', 'name', '*', '.', 'txt', '-', 'print', 'f', '%', 'f', '/', 'tmp', '/', 'a', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 7, 7, 7, 7, 8]]",
            "sibling_edges": "[[5, 8, 1, 2, 3, 4, 6, 10, 12, 13, 15, 16, 18, 20, 21, 22], [6, 1, 2, 3, 4, 5, 7, 11, 13, 14, 16, 17, 19, 21, 22, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 6, 20, 21, 22], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 6, 20, 21, 22, 23]]"
        }
    },
    {
        "code": "find Path -path Regex",
        "text": "find all file in current director i tree who be e path n be match pattern file ..",
        "id": 721,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "tr Regex Regex",
        "text": "rep lac all regex with regex from standard input ..",
        "id": 722,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'regex', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "fold -w30 longline | pr -20ts|",
        "text": "insert regex ever i number char act in file regex ..",
        "id": 723,
        "graph": {
            "nodes": "['program', '|', '|', 'word', 'word', 'word', 'word', '-', 'w30', 'longline', 'word', '-', '20ts', 'fold', 'pr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 5, 5, 6, 10]]",
            "sibling_edges": "[[5, 4, 1, 6, 3, 10, 7, 11], [2, 1, 10, 3, 4, 5, 8, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 7, 8, 9, 1, 14, 11, 12], [7, 8, 9, 1, 14, 11, 12, 2]]"
        }
    },
    {
        "code": "cd $( ls -d File | grep Regex )",
        "text": "go into first director i who be e name contain number ..",
        "id": 724,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'cd', '|', 'word', 'word', 'word', 'word', '-', 'd', 'file', 'word', 'regex', 'ls', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 6, 7, 0, 8, 9, 13]]",
            "sibling_edges": "[[1, 2, 8, 7, 5, 9, 6, 13, 10], [2, 9, 3, 5, 13, 6, 7, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 15, 10, 11, 12, 5, 16, 14], [2, 15, 10, 11, 12, 5, 16, 14, 3]]"
        }
    },
    {
        "code": "find Path -path Regex -prune -or -name Regex -print",
        "text": "search for file and director i name file under current director i tree without t raver into file ..",
        "id": 725,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 14, 16, 18, 21], [1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 17, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "find Path -type 'd' | grep -v Regex | xargs -I {} rmdir {}",
        "text": "find recur all folder in current folder which path not contain regex string and r emo v on li one without file and a not h folder within ..",
        "id": 726,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', \"'d\", \"'\", 'word', '-', 'v', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', 'dir', 'word', 'word', 'find', 'grep', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 5, 0, 6, 6, 7, 0, 8, 8, 0, 0, 9, 9, 0, 0, 10, 16, 20, 20, 23, 24, 27, 28]]",
            "sibling_edges": "[[5, 1, 7, 2, 10, 3, 4, 16, 6, 20, 8, 24, 9, 12, 14, 17, 21, 23, 25, 27, 31], [1, 16, 2, 20, 3, 4, 5, 6, 7, 8, 23, 9, 27, 13, 15, 18, 22, 24, 26, 28, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 1, 30, 17, 18, 19, 2, 31, 32, 21, 22, 33, 34, 25, 26, 35], [11, 12, 13, 14, 15, 1, 30, 17, 18, 19, 2, 31, 32, 21, 22, 33, 34, 25, 26, 35, 36]]"
        }
    },
    {
        "code": "echo Regex | cat",
        "text": "print regex regex ..",
        "id": 727,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'regex', 'word', 'echo', 'cat']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 2, 0, 3, 5]]",
            "sibling_edges": "[[2, 1, 3], [1, 5, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4, 1], [4, 1, 7]]"
        }
    },
    {
        "code": "dig Regex Regex",
        "text": "save short dns lookup output of regex to regex v aria bl ..",
        "id": 728,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'regex', 'dig']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "ps -a -u Regex | awk Program | xargs -I {} pstree {}",
        "text": "print process tree for each process own by user regex ..",
        "id": 729,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'a', '-', 'u', 'regex', 'word', 'program', 'word', '-', 'i', 'word', 'word', 'ps', 'tree', 'word', 'word', 'ps', 'a', 'wk', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 0, 6, 0, 7, 7, 0, 0, 8, 8, 0, 0, 9, 15, 15, 17, 17, 20, 21, 24, 25]]",
            "sibling_edges": "[[5, 1, 6, 2, 9, 3, 4, 15, 17, 7, 21, 8, 10, 12, 18, 20, 22, 24, 27, 29], [1, 15, 2, 17, 3, 4, 5, 6, 7, 20, 8, 24, 11, 13, 19, 21, 23, 25, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 10, 11, 12, 13, 14, 1, 27, 28, 16, 2, 29, 30, 18, 19, 31, 32, 22, 23, 33], [10, 11, 12, 13, 14, 1, 27, 28, 16, 2, 29, 30, 18, 19, 31, 32, 22, 23, 33, 34]]"
        }
    },
    {
        "code": "find Path -amin +Quantity -amin -Quantity",
        "text": "find all file under file director i tree that be access in last number to time span ..",
        "id": 730,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'be', 'in', '+', 'quantity', '-', 'be', 'in', '-', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 11, 13, 14, 16], [1, 2, 3, 4, 5, 9, 10, 12, 14, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "find all file in home director i with open per miss ..",
        "id": 731,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type d",
        "text": "find all level number sub director i of current director i ..",
        "id": 732,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12], [1, 2, 3, 4, 5, 9, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "gzip -c mysqldbbackup.sql | uuencode mysqldbbackup.sql.gz | mail -s MySQL DB backup@email.com",
        "text": "compress file with g zip and email it with subject regex to file ..",
        "id": 733,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'c', 'mysqldbbackup', '.', 'sql', 'word', 'mysqldbbackup', '.', 'sql', '.', 'gz', 'word', '-', 's', 'my', 'sql', 'db', 'backup', '@', 'email', '.', 'com', 'g', 'zip', 'uuencode', 'mail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 4, 0, 5, 5, 5, 5, 5, 0, 6, 6, 7, 7, 8, 9, 9, 9, 9, 9, 10, 10, 16, 22]]",
            "sibling_edges": "[[4, 1, 5, 2, 10, 3, 16, 22, 6, 7, 8, 11, 13, 14, 17, 18, 19, 20, 23, 25, 28, 29, 30, 31, 33], [1, 16, 2, 22, 3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19, 20, 21, 24, 26, 29, 30, 31, 32, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 34, 11, 12, 13, 14, 15, 1, 35, 17, 18, 19, 20, 21, 2, 36, 23, 24, 25, 26, 27, 28, 29, 30, 31], [34, 11, 12, 13, 14, 15, 1, 35, 17, 18, 19, 20, 21, 2, 36, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]]"
        }
    },
    {
        "code": "date +%a | tr Regex Regex",
        "text": "save small letter short day name of week to v aria bl regex ..",
        "id": 734,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '+', '%', 'a', 'word', 'regex', 'regex', 'date', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 2, 2, 0, 3, 4, 5, 9]]",
            "sibling_edges": "[[2, 1, 5, 9, 3, 6, 7], [1, 9, 2, 3, 4, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 1, 13, 10], [6, 7, 8, 1, 13, 10, 11]]"
        }
    },
    {
        "code": "find / -name myfile -type f -print 2> /dev/null",
        "text": "search system for regular file regex ig nor per miss deni error ..",
        "id": 735,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', 'word', 'file_descriptor', '>', 'word', 'word', '/', '-', 'name', 'myfile', '-', 'type', 'f', '-', 'print', '<number>', '/', 'dev', '/', 'null', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 9, 9, 9, 9, 10]]",
            "sibling_edges": "[[6, 10, 1, 2, 3, 4, 5, 7, 8, 12, 15, 18, 21, 22, 23], [7, 1, 2, 3, 4, 5, 6, 8, 9, 13, 16, 19, 22, 23, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 8, 21, 22, 23], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 8, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "ls -hal /root/ > /root/test.out",
        "text": "print long list of content in a root folder incl ud hide file with human read size and store output to file file ..",
        "id": 736,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', '>', 'word', 'word', '-', 'hal', '/', 'root', '/', '/', 'root', '/', 'test', '.', 'out', 'ls']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 4, 4, 4, 4, 4, 4, 5]]",
            "sibling_edges": "[[2, 5, 1, 3, 6, 8, 9, 11, 12, 13, 14, 15], [3, 1, 2, 4, 7, 9, 10, 12, 13, 14, 15, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 6, 7, 8, 9, 10, 3, 11, 12, 13, 14, 15], [6, 7, 8, 9, 10, 3, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "$( date -u -d Regex +\"%s\" )",
        "text": "repr es utc date give in time string file as number of second sin c epoch and save it in regex v aria bl ..",
        "id": 737,
        "graph": {
            "nodes": "['command_substitution', '$(', ')', 'word', 'word', 'word', 'word', '-', 'u', '-', 'd', 'regex', 'word', 'raw_string', 'date', '+', \"'\", '%', 's', \"'\"]",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 0, 0, 6, 12, 13, 13, 13, 13]]",
            "sibling_edges": "[[1, 13, 6, 3, 4, 5, 7, 9, 12, 16, 17, 18], [6, 2, 3, 4, 5, 12, 8, 10, 13, 17, 18, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 14, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19], [14, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 2]]"
        }
    },
    {
        "code": "curl -s http://page.that.serves.json.com/json/ | json_xs",
        "text": "download content from directory and format it as file ..",
        "id": 738,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '-', 's', '<', 'url', '>', '/', 'word', 'curl', 'json_xs']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 0, 4, 11]]",
            "sibling_edges": "[[3, 1, 4, 2, 5, 7, 8, 9], [1, 11, 2, 3, 6, 8, 9, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 5, 6, 7, 8, 9, 10, 1], [5, 6, 7, 8, 9, 10, 1, 13]]"
        }
    },
    {
        "code": "find Path -type d | cpio -p -d -v -m Regex",
        "text": "cop i director i hi er arch i of current director i to regex ..",
        "id": 739,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', 'word', '-', 'p', '-', 'd', '-', 'v', '-', 'm', 'regex', 'find', 'cp', 'io']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 6, 7, 7, 8, 8, 9, 10, 15, 15]]",
            "sibling_edges": "[[4, 1, 10, 2, 3, 15, 5, 6, 7, 8, 12, 16, 18, 20, 22, 26], [1, 15, 2, 3, 4, 5, 6, 7, 8, 9, 13, 17, 19, 21, 23, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 11, 12, 13, 14, 1, 26, 27, 16, 17, 18, 19, 20, 21, 22, 23], [11, 12, 13, 14, 1, 26, 27, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find . -iname *.jar | xargs -n1 zipinfo",
        "text": "list detail inform about all file file in current director i tree ..",
        "id": 740,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'i', 'name', '*', '.', 'jar', 'word', '-', 'n', '<number>', 'zipinfo', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 4, 0, 5, 5, 5, 6, 7, 15, 15]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 15, 5, 9, 10, 12, 13, 16, 17, 21], [1, 15, 2, 3, 4, 5, 6, 10, 11, 13, 14, 17, 18, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 1, 21, 22, 16, 17, 18], [8, 9, 10, 11, 12, 13, 14, 1, 21, 22, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "mktemp --dry-run Regex",
        "text": "c re at regex random file name and save it in regex v aria bl ..",
        "id": 741,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '--', 'dry', '-', 'run', 'regex', 'mk', 'temp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 1, 1, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 5, 6, 9], [1, 2, 5, 6, 7, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 4, 5, 6, 7], [10, 4, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "find /target/path -type f -exec your_command_here {} ;",
        "text": "exe cut script regex for each file from director i tree file pas file n be as an argument to script ..",
        "id": 742,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'target', '/', 'path', '-', 'type', 'f', '-', 'exec', 'your', 'command', 'here', 'word', 'word', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 4, 5, 5, 6, 6, 6, 0, 0, 7, 20, 21]]",
            "sibling_edges": "[[21, 7, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 17, 18, 20], [1, 2, 3, 4, 5, 6, 20, 9, 10, 11, 13, 16, 18, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 1]]"
        }
    },
    {
        "code": "ls -l File",
        "text": "list file descriptor of a current process ..",
        "id": 743,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'l', 'file', 'ls']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "ifconfig Regex | sed -n Program",
        "text": "get ip address of regex network inter fa c ..",
        "id": 744,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'n', 'program', 'if', 'config', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 7, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 8, 11, 13], [1, 7, 2, 3, 4, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 6, 1, 13, 14, 8, 9], [12, 6, 1, 13, 14, 8, 9, 10]]"
        }
    },
    {
        "code": "ssh -l Regex -p Regex Regex",
        "text": "ssh into regex on port number as user regex ..",
        "id": 745,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'regex', '-', 'p', 'regex', 'regex', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 7, 10], [1, 2, 3, 4, 5, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "ps aux",
        "text": "show process for all user file and those not attach to a term in ..",
        "id": 746,
        "graph": {
            "nodes": "['command', 'word', 'word', 'aux', 'ps']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find . -name .git -prune -o -type f -exec perl -i -pe s/\\Q$1\\E/\\L$2\\E/i {} +",
        "text": "find all file under current director i without descend into file director i and rep lac match of regex regex with regex in those file where regex and regex will be expand in current shell ..",
        "id": 747,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', '.', 'git', '-', 'prune', '-', 'o', '-', 'type', 'f', '-', 'exec', 'perl', '-', 'i', '-', 'pe', 'word', 'word', '\\\\', 'e', '/', 'i', 'word', 'word', '+', 'find', 's', '/', '\\\\', 'q', '$', 'variable_name', '\\\\', 'e', '/', '\\\\', 'l', '$', 'variable_name', '{', '}', '<number>', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 0, 0, 12, 12, 12, 12, 0, 0, 13, 14, 34, 34, 34, 34, 0, 0, 35, 35, 35, 35, 35, 0, 0, 40, 41, 49, 56]]",
            "sibling_edges": "[[14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 49, 56, 12, 41, 16, 18, 20, 22, 24, 27, 30, 32, 34, 35, 36, 37, 38, 40, 44, 45, 46, 48, 50, 51, 52, 53, 55], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 34, 35, 12, 40, 13, 17, 19, 21, 23, 25, 28, 31, 33, 48, 55, 37, 38, 39, 41, 45, 46, 47, 49, 51, 52, 53, 54, 56]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 45, 46, 47, 48, 59, 50, 51, 52, 53, 54, 55, 60, 36, 37, 38, 39, 57, 58], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 45, 46, 47, 48, 59, 50, 51, 52, 53, 54, 55, 60, 36, 37, 38, 39, 57, 58, 42]]"
        }
    },
    {
        "code": "find Path Path -name Regex -type f -exec chmod Permission {} \\;",
        "text": "c hang per miss of file file under director i htdoc and cgi bin to number ..",
        "id": 748,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 0, 0, 10, 10, 11, 25, 26]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 14, 17, 20, 22, 25, 27], [1, 2, 3, 4, 5, 6, 7, 8, 9, 25, 10, 15, 18, 21, 23, 26, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 27], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 27, 28]]"
        }
    },
    {
        "code": "which -a Regex",
        "text": "print all match command in regex for command regex ..",
        "id": 749,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'a', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "sort File | uniq | cut -f Number -d Regex | uniq -c | rev",
        "text": "find all inst an c of first column with uni qu rest of line and output a count for each first column that find in uni qu line ..",
        "id": 750,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', 'word', '-', 'f', 'number', '-', 'd', 'regex', 'word', '-', 'c', 'word', 'sort', 'uni', 'q', 'cut', 'uni', 'q', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 6, 6, 7, 8, 8, 9, 0, 10, 10, 0, 11, 13, 13, 14, 21, 21, 24]]",
            "sibling_edges": "[[5, 1, 13, 2, 9, 3, 10, 4, 11, 14, 6, 7, 8, 21, 15, 18, 22, 26, 29], [1, 13, 2, 14, 3, 21, 4, 24, 5, 6, 7, 8, 9, 10, 16, 19, 23, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 12, 1, 26, 27, 2, 28, 15, 16, 17, 18, 19, 20, 3, 29, 30, 22, 23, 4], [12, 1, 26, 27, 2, 28, 15, 16, 17, 18, 19, 20, 3, 29, 30, 22, 23, 4, 31]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -exec wc -l File \\;",
        "text": "count number of line in ever i regular file file in current director i tree ..",
        "id": 751,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'exec', 'wc', '-', 'l', 'file', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 19, 22, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 20, 23, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]]"
        }
    },
    {
        "code": "bzip2 -k File",
        "text": "compress file file keep origin file in place ..",
        "id": 752,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'k', 'file', 'b', 'zip', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 1, 1, 2, 3, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7, 8], [1, 2, 5, 8, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 9, 4, 5], [8, 9, 4, 5, 6]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "display all file in current folder ..",
        "id": 753,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -type f -perm -Permission",
        "text": "find all file under file with number per miss ..",
        "id": 754,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 13], [1, 2, 3, 4, 5, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "setarch `uname -m` -R ./yourProgram",
        "text": "run file without address space random report actual machin type ..",
        "id": 755,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '`', '`', '-', 'r', '.', '/', 'yourprogram', 'setarch', 'word', 'word', '-', 'm', 'u', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 0, 0, 12, 12, 13, 13]]",
            "sibling_edges": "[[3, 5, 1, 4, 12, 6, 8, 9, 13, 14, 16], [4, 1, 2, 13, 5, 7, 9, 10, 12, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 4, 16, 17, 14, 15, 5, 6, 7, 8, 9], [4, 16, 17, 14, 15, 5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find . -type f -maxdepth 1 ! -name .* -exec printf %.0s.\\n {} + | wc -l",
        "text": "find all regular file in current folder excl ud sub director i and hide folder and display count ..",
        "id": 756,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'max', 'depth', '<number>', '!', '-', 'name', '.', '*', '-', 'exec', 'print', 'f', '%', '.', '0s', '.', 'word', 'word', '+', 'word', '-', 'l', 'find', '{', '}', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 0, 0, 13, 0, 14, 14, 15, 37, 38, 40]]",
            "sibling_edges": "[[13, 1, 15, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 38, 40, 17, 20, 21, 25, 27, 29, 31, 33, 34, 35, 37, 41], [1, 40, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 37, 13, 14, 18, 21, 22, 26, 28, 30, 32, 34, 35, 36, 38, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 44, 45, 39, 1, 46, 41], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 44, 45, 39, 1, 46, 41, 42]]"
        }
    },
    {
        "code": "find Path -name Regex -type d -exec rm -r {} \\;",
        "text": "r emo v all director i call regex from current director i tree ..",
        "id": 757,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'd', '-', 'exec', 'rm', '-', 'r', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "for d in /home/*/; do find $d -type d -name bin | grep -q . || echo $d; done",
        "text": "find all top level director i under file that do n 't contain a file or director i name file ..",
        "id": 758,
        "graph": {
            "nodes": "['program', 'command', 'command_name', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'concatenation', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'd', '-', 'exec', 'rm', '-', 'r', 'word', 'word', '\\\\', ';']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "shred -v -n File -z -u File",
        "text": "over writ file file with zero and r emo v show progress while exe cut ..",
        "id": 759,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'v', '-', 'n', 'file', '-', 'z', '-', 'u', 'file', 'shred']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 10, 13, 15], [1, 2, 3, 4, 5, 6, 9, 11, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -empty -not -name Regex",
        "text": "list on li non hide e mp ti file on li in current director i ..",
        "id": 760,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'empty', '-', 'not', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 11, 14, 16, 18], [1, 2, 3, 4, 5, 6, 7, 11, 12, 15, 17, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "ssh -t Regex command",
        "text": "ssh into regex with f orc pseudo term in alloc exe cut regex and save output to v aria bl regex ..",
        "id": 761,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 't', 'regex', 'command', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -exec cp --parents {} File \\;",
        "text": "find file file in file director i recur and cop i them to director i file ..",
        "id": 762,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'exec', 'cp', '--', 'p', 'be', 'not', 's', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 8, 8, 8, 0, 0, 9, 10, 10, 11, 27, 28]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 28, 9, 13, 16, 19, 22, 23, 24, 25, 27, 30], [1, 2, 3, 4, 5, 6, 7, 8, 27, 9, 10, 14, 17, 20, 23, 24, 25, 26, 28, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 33, 34, 29, 30], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 33, 34, 29, 30, 31]]"
        }
    },
    {
        "code": "find Path -type f -perm -Permission -printf '%p has world write -permissions\\n'",
        "text": "find file with number per miss in en ti r file system and print them with string regex append after ever i path ..",
        "id": 763,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'type', 'f', '-', 'perm', '-', 'permission', '-', 'print', 'f', \"'\", '%', 'p', 'have', 'world', 'write', '-', 'permission', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 10, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27], [1, 2, 3, 4, 5, 6, 7, 11, 14, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]]"
        }
    },
    {
        "code": "find Path -type f \\( -iname Regex -or -iname Regex \\)",
        "text": "use find command to search for file and file file ..",
        "id": 764,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'i', 'name', 'regex', '-', 'or', '-', 'i', 'name', 'regex', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 8, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 18, 19, 22, 24, 25, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 19, 20, 23, 25, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]"
        }
    },
    {
        "code": "mount | sed -n -e Program",
        "text": "print path of all network mount ..",
        "id": 765,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', '-', 'n', '-', 'e', 'program', 'mount', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 6, 6]]",
            "sibling_edges": "[[5, 1, 6, 2, 3, 7, 9, 13], [1, 6, 2, 3, 4, 8, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 1, 13, 14, 7, 8, 9, 10], [1, 13, 14, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "yes | cat -n | head - Quantity | awk Program",
        "text": "print ever i regex line from number line of regex with line number ..",
        "id": 766,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'word', '-', 'quantity', 'word', 'program', 'yes', 'cat', 'head', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 5, 6, 0, 7, 8, 9, 12, 15, 15]]",
            "sibling_edges": "[[8, 1, 4, 2, 6, 3, 9, 12, 5, 15, 10, 20], [1, 9, 2, 12, 3, 15, 4, 5, 6, 7, 11, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 1, 18, 10, 11, 2, 19, 13, 14, 3, 20, 21], [1, 18, 10, 11, 2, 19, 13, 14, 3, 20, 21, 16]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -execdir rename Regex {} \\;",
        "text": "find all regular file file under and below file and r en be them prefix name with regex ..",
        "id": 767,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'exec', 'dir', 'rename', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 19, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 20, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -I {} grep -n -H Regex {}",
        "text": "search file file find in current director i tree for string regex ..",
        "id": 768,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', '-', 'n', '-', 'h', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 9, 9, 10, 10, 11, 0, 0, 12, 20, 20, 25, 26, 33, 34]]",
            "sibling_edges": "[[5, 1, 12, 2, 3, 4, 20, 6, 7, 26, 8, 9, 10, 11, 14, 17, 18, 21, 23, 25, 28, 30, 33, 36], [1, 20, 2, 3, 4, 5, 6, 7, 25, 8, 9, 10, 11, 33, 15, 18, 19, 22, 24, 26, 29, 31, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 13, 14, 15, 16, 17, 18, 19, 1, 36, 37, 21, 22, 23, 24, 38, 39, 27, 28, 29, 30, 31, 32, 40], [13, 14, 15, 16, 17, 18, 19, 1, 36, 37, 21, 22, 23, 24, 38, 39, 27, 28, 29, 30, 31, 32, 40, 41]]"
        }
    },
    {
        "code": "stat --printf=%y %n\\n $(ls -tr $(find * -type f))",
        "text": "recur list all file in a current folder and print full path along with mod if time ..",
        "id": 769,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '--', 'print', 'f', '=', '%', 'y', '%', 'n', '$(', ')', 'stat', 'word', 'word', '-', 'tr', '$(', ')', 'ls', 'word', 'word', 'word', 'word', '*', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 3, 0, 0, 15, 15, 0, 0, 16, 0, 0, 0, 0, 22, 23, 23, 24, 25]]",
            "sibling_edges": "[[3, 1, 2, 4, 5, 6, 7, 8, 10, 12, 20, 16, 15, 17, 19, 24, 25, 22, 23, 27], [1, 2, 12, 5, 6, 7, 8, 9, 11, 16, 13, 15, 19, 18, 25, 20, 22, 23, 24, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 4, 5, 6, 7, 8, 9, 10, 11, 12, 21, 17, 18, 19, 30, 26, 27, 28, 29, 20], [4, 5, 6, 7, 8, 9, 10, 11, 12, 21, 17, 18, 19, 30, 26, 27, 28, 29, 20, 13]]"
        }
    },
    {
        "code": "source <( echo Regex )",
        "text": "set v aria bl regex to number ..",
        "id": 770,
        "graph": {
            "nodes": "['command', 'word', '<(', ')', 'source', 'word', 'word', 'regex', 'echo']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 0, 0, 5, 6]]",
            "sibling_edges": "[[1, 2, 5, 6], [2, 6, 3, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 8, 7], [2, 8, 7, 3]]"
        }
    },
    {
        "code": "find Path -type f -printf '%T@ %p\\n' | sort -n -r | head - Quantity | cut -f Number -d Regex | sed -e Program | xargs -I {} ls -U -l {}",
        "text": "print number late mod if i file within current director i ..",
        "id": 771,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'f', \"'\", '%', 't', '@', '%', 'p', \"'\", 'word', '-', 'n', '-', 'r', 'word', '-', 'quantity', 'word', '-', 'f', 'number', '-', 'd', 'regex', 'word', '-', 'e', 'program', 'word', '-', 'i', 'word', 'word', 'ls', '-', 'u', '-', 'l', 'word', 'word', 'find', 'sort', 'head', 'cut', 's', 'ed', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 0, 11, 11, 12, 12, 0, 13, 14, 0, 15, 15, 16, 17, 17, 18, 0, 19, 19, 20, 0, 21, 21, 0, 0, 22, 23, 23, 24, 24, 0, 0, 25, 40, 45, 48, 55, 55, 59, 59, 62, 63, 69, 70]]",
            "sibling_edges": "[[10, 1, 12, 2, 14, 3, 18, 4, 20, 5, 25, 6, 7, 8, 9, 40, 11, 45, 13, 48, 15, 16, 17, 55, 19, 59, 21, 63, 22, 23, 24, 27, 30, 31, 33, 34, 35, 36, 37, 38, 41, 43, 49, 52, 56, 60, 62, 65, 67, 69, 75, 77], [1, 40, 2, 45, 3, 48, 4, 55, 5, 59, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 62, 22, 23, 24, 69, 28, 31, 32, 34, 35, 36, 37, 38, 39, 42, 44, 50, 53, 57, 61, 63, 66, 68, 70, 76, 78]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[71, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 1, 72, 41, 42, 43, 44, 2, 73, 46, 47, 3, 74, 49, 50, 51, 52, 53, 54, 4, 75, 76, 56, 57, 58, 5, 77, 78, 60, 61, 79, 80, 64, 65, 66, 67, 68, 81], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 1, 72, 41, 42, 43, 44, 2, 73, 46, 47, 3, 74, 49, 50, 51, 52, 53, 54, 4, 75, 76, 56, 57, 58, 5, 77, 78, 60, 61, 79, 80, 64, 65, 66, 67, 68, 81, 82]]"
        }
    },
    {
        "code": "find Path -name Regex -type f",
        "text": "find all file under current director i match pattern file in name ..",
        "id": 772,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find . -type f -exec printf %.0sbla\\n {} +",
        "text": "find all regular file in current director i and display file name with new line as delimit ..",
        "id": 773,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'exec', 'print', 'f', '%', '.', '0sbla', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6, 0, 0, 7, 8, 20, 21]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 21, 10, 13, 15, 17, 18, 20], [1, 2, 3, 4, 5, 6, 20, 7, 11, 14, 16, 18, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 22]]"
        }
    },
    {
        "code": "find Path -type f | xargs -I {} md5sum {} | sort | uniq -D w32",
        "text": "list all file with path that i dent content ..",
        "id": 774,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'i', 'word', 'word', 'md', '<number>', 'sum', 'word', 'word', 'word', 'word', '-', 'd', 'w32', 'find', 'x', 'arg', '{', '}', '{', '}', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 0, 7, 7, 0, 0, 8, 8, 8, 0, 0, 0, 0, 9, 9, 10, 11, 16, 16, 19, 20, 24, 25, 26, 27, 27]]",
            "sibling_edges": "[[6, 1, 25, 2, 26, 3, 11, 4, 5, 16, 7, 20, 8, 27, 9, 13, 17, 19, 21, 22, 24, 28, 32, 39], [1, 16, 2, 26, 3, 27, 4, 5, 6, 7, 19, 8, 24, 9, 10, 14, 18, 20, 22, 23, 25, 29, 33, 40]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 1, 32, 33, 17, 18, 34, 35, 21, 22, 23, 36, 37, 2, 38, 3, 39, 40, 28, 29], [12, 13, 14, 15, 1, 32, 33, 17, 18, 34, 35, 21, 22, 23, 36, 37, 2, 38, 3, 39, 40, 28, 29, 30]]"
        }
    },
    {
        "code": "split --number Quantity File Regex",
        "text": "split regex into number file with about equal number of line each and use prefix regex ..",
        "id": 775,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '--', 'number', 'quantity', 'file', 'regex', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6], [1, 2, 3, 4, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -type f -printf '%20s %p\\n' | sort -n | cut -b Number | tr Regex Regex | xargs -0 -I {} ls -l -a -S -r {}",
        "text": "search current director i recur for large file ..",
        "id": 776,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'f', \"'\", '%', '<number>', '%', 'p', \"'\", 'word', '-', 'n', 'word', '-', 'b', 'number', 'word', 'regex', 'regex', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'ls', '-', 'l', '-', 'a', '-', 's', '-', 'r', 'word', 'word', 'find', 'sort', 'cut', 'tr', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 0, 10, 10, 0, 11, 11, 12, 0, 13, 14, 0, 15, 15, 16, 16, 0, 0, 17, 18, 18, 19, 19, 20, 20, 21, 21, 0, 0, 22, 36, 39, 43, 46, 46, 51, 52, 62, 63]]",
            "sibling_edges": "[[9, 1, 10, 2, 12, 3, 14, 4, 22, 5, 6, 7, 8, 36, 39, 11, 43, 13, 46, 15, 16, 52, 17, 18, 19, 20, 21, 24, 27, 28, 30, 31, 32, 33, 34, 37, 40, 47, 49, 51, 54, 56, 58, 60, 62, 68], [1, 36, 2, 39, 3, 43, 4, 46, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 51, 17, 18, 19, 20, 21, 62, 25, 28, 29, 31, 32, 33, 34, 35, 38, 41, 48, 50, 52, 55, 57, 59, 61, 63, 69]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[64, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 1, 65, 37, 38, 2, 66, 40, 41, 42, 3, 67, 44, 45, 4, 68, 69, 47, 48, 49, 50, 70, 71, 53, 54, 55, 56, 57, 58, 59, 60, 61, 72], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 1, 65, 37, 38, 2, 66, 40, 41, 42, 3, 67, 44, 45, 4, 68, 69, 47, 48, 49, 50, 70, 71, 53, 54, 55, 56, 57, 58, 59, 60, 61, 72, 73]]"
        }
    },
    {
        "code": "find Path -nouser -exec chown Regex {} \\;",
        "text": "c hang all file with no user under file to owner regex and group regex ..",
        "id": 777,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'no', 'user', '-', 'exec', 'chow', 'n', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 0, 0, 6, 6, 7, 17, 18]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 18, 9, 10, 12, 14, 17, 19], [1, 2, 3, 4, 5, 17, 6, 10, 11, 13, 15, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 8, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19], [8, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19, 20]]"
        }
    },
    {
        "code": "find Path -type f -exec chmod Permission {} +",
        "text": "set per miss to number for all regular file in current director i tree ..",
        "id": 778,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], [9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 20]]"
        }
    },
    {
        "code": "rsync File File",
        "text": "cop i all file in file to file on host file authent as user regex ..",
        "id": 779,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'file', 'file', 'r', 'sync']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find Path Path -name Regex -print",
        "text": "find all file and director i name file under file and file director i tree ..",
        "id": 780,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 9, 12], [1, 2, 3, 4, 5, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -iname Regex -type f -exec sed Program -i Regex {} \\; -exec rm File \\;",
        "text": "find file regex file with bom and correct them ..",
        "id": 781,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', '-', 'type', 'f', '-', 'exec', 's', 'ed', 'program', '-', 'i', 'regex', 'word', 'word', '\\\\', ';', '-', 'exec', 'rm', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 0, 0, 11, 11, 12, 12, 13, 14, 15, 15, 16, 33, 34]]",
            "sibling_edges": "[[16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 34, 11, 12, 13, 14, 18, 19, 22, 25, 27, 30, 33, 35, 37, 41], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 19, 20, 23, 26, 28, 31, 34, 36, 38, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 44, 45, 35, 36, 37, 38, 39, 40, 41], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 44, 45, 35, 36, 37, 38, 39, 40, 41, 42]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -name Regex",
        "text": "search for file specif i minimum depth of search ..",
        "id": 782,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12], [1, 2, 3, 4, 5, 9, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find ~/container -mindepth 3 -type f | while read file; do mv $file $(dirname $file)/..; done",
        "text": "find all regular file start from level number of director i tree file and move them one level up ..",
        "id": 783,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'number', 'word', 'word', 'while', ';', 'word', '~', '/', 'container', '-', 'min', 'depth', '<number>', '-', 'type', 'f', 'word', 'do', ';', 'done', 'find', 'word', 'file', 'read', 'word', '$', 'variable_name', 'word', 'mv', 'file', '$(', ')', '/', '.', '.', 'word', '$', 'variable_name', 'dir', 'name', 'file']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 5, 5, 6, 0, 0, 0, 0, 9, 0, 20, 25, 0, 0, 0, 0, 28, 30, 0, 0, 31, 31, 31, 0, 0, 0, 39, 39, 41]]",
            "sibling_edges": "[[6, 1, 9, 2, 3, 4, 5, 7, 20, 8, 10, 11, 13, 14, 17, 25, 21, 31, 22, 28, 30, 29, 35, 34, 41, 36, 37, 39, 40, 42], [1, 7, 2, 3, 4, 5, 6, 25, 8, 21, 11, 12, 14, 15, 18, 20, 28, 22, 23, 29, 34, 30, 31, 39, 35, 37, 38, 40, 41, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 7, 27, 26, 8, 21, 32, 29, 33, 34, 42, 43, 40, 44, 35, 36, 37, 38, 22], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 7, 27, 26, 8, 21, 32, 29, 33, 34, 42, 43, 40, 44, 35, 36, 37, 38, 22, 23]]"
        }
    },
    {
        "code": "cat `find . -type f` > out.txt",
        "text": "display content of all regular file in current folder and save output to file ..",
        "id": 784,
        "graph": {
            "nodes": "['redirected_statement', '>', 'word', 'word', '`', '`', 'out', '.', 'txt', 'cat', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 2, 2, 2, 3, 0, 0, 0, 0, 10, 11, 11, 12, 13]]",
            "sibling_edges": "[[5, 3, 1, 4, 12, 6, 7, 13, 10, 11, 15], [1, 4, 2, 13, 5, 7, 8, 10, 11, 12, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 4, 18, 14, 15, 16, 17, 5, 1, 6, 7], [4, 18, 14, 15, 16, 17, 5, 1, 6, 7, 8]]"
        }
    },
    {
        "code": "ping host | perl -nle print scalar(localtime), \" \", $_",
        "text": "add a date time stamp to ever i line of output in regex ..",
        "id": 785,
        "graph": {
            "nodes": "['program', ';', '|', ',', 'word', 'word', 'word', 'word', '(', ')', '$', 'special_variable_name', 'word', 'host', 'word', '-', 'nle', 'print', 'scalar', 'raw_string', 'word', '_', 'ping', 'perl', 'word', \"'\", \"'\", ',', 'localtime']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 5, 6, 7, 0, 0, 11, 12, 14, 0, 19, 19, 20, 24]]",
            "sibling_edges": "[[7, 1, 3, 4, 2, 9, 20, 12, 14, 5, 6, 8, 24, 10, 15, 19, 25], [1, 8, 19, 2, 14, 3, 10, 4, 5, 6, 7, 24, 9, 11, 16, 20, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 13, 2, 23, 15, 16, 17, 18, 1, 8, 28, 9, 3, 25, 26, 27, 10], [13, 2, 23, 15, 16, 17, 18, 1, 8, 28, 9, 3, 25, 26, 27, 10, 21]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i file ..",
        "id": 786,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "echo Regex | awk Program",
        "text": "trim lead and trail white spa c from v aria bl regex ..",
        "id": 787,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'word', 'program', 'echo', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 4, 6, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 9], [1, 6, 2, 3, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 1, 9, 10], [5, 1, 9, 10, 7]]"
        }
    },
    {
        "code": "ls -1 | perl -l40pe0",
        "text": "list all file in a current folder se par name with space ..",
        "id": 788,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'word', 'word', '-', '<number>', 'word', '-', 'l40pe0', 'ls', 'perl']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 2, 2, 0, 3, 3, 4, 7]]",
            "sibling_edges": "[[2, 1, 4, 7, 5, 8], [1, 7, 2, 3, 6, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 1, 11, 8], [5, 6, 1, 11, 8, 9]]"
        }
    },
    {
        "code": "file File",
        "text": "display human read file type de script of file ..",
        "id": 789,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'file']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "sed Program File | split -d -l Quantity File Regex",
        "text": "add new l in be for all regex and consequ occur r of regex in file regex and write each line from output to file with prefix regex and num er suffix ..",
        "id": 790,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'program', 'file', 'word', '-', 'd', '-', 'l', 'quantity', 'file', 'regex', 's', 'ed', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 4, 4, 5, 5, 6, 7, 8, 9, 9, 12]]",
            "sibling_edges": "[[3, 1, 9, 2, 12, 4, 5, 6, 7, 13, 15, 20], [1, 12, 2, 3, 4, 5, 6, 7, 8, 14, 16, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 21, 10, 11, 1, 22, 13, 14, 15, 16, 17, 18], [21, 10, 11, 1, 22, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -type l -name Regex -ls",
        "text": "list regex link in file director i with i nod inform and file to which it point to ..",
        "id": 791,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'l', '-', 'name', 'regex', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find -P Path -type f | rev | cut -d Regex -f Number | rev | cut -d Regex -f Number | cut -d Regex -f Number | sort | uniq -c",
        "text": "display a count of regular file in each director i at current level ..",
        "id": 792,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'p', 'path', '-', 'type', 'f', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'word', '-', 'c', 'find', 'rev', 'cut', 'rev', 'cut', 'cut', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 9, 10, 10, 11, 0, 0, 12, 12, 13, 14, 14, 15, 0, 0, 16, 16, 17, 18, 18, 19, 0, 20, 20, 21, 22, 22, 23, 0, 0, 24, 24, 25, 32, 33, 40, 41, 48, 55, 56, 56]]",
            "sibling_edges": "[[11, 1, 32, 2, 15, 3, 40, 4, 19, 5, 23, 6, 55, 7, 25, 8, 9, 10, 33, 12, 13, 14, 41, 16, 17, 18, 48, 20, 21, 22, 56, 26, 29, 34, 37, 42, 45, 49, 52, 57, 66], [1, 32, 2, 33, 3, 40, 4, 41, 5, 48, 6, 55, 7, 56, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 30, 35, 38, 43, 46, 50, 53, 58, 67]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[59, 26, 27, 28, 29, 30, 31, 1, 60, 2, 61, 34, 35, 36, 37, 38, 39, 3, 62, 4, 63, 42, 43, 44, 45, 46, 47, 5, 64, 49, 50, 51, 52, 53, 54, 6, 65, 7, 66, 67, 57], [26, 27, 28, 29, 30, 31, 1, 60, 2, 61, 34, 35, 36, 37, 38, 39, 3, 62, 4, 63, 42, 43, 44, 45, 46, 47, 5, 64, 49, 50, 51, 52, 53, 54, 6, 65, 7, 66, 67, 57, 58]]"
        }
    },
    {
        "code": "find -L Path -type l",
        "text": "find all break s ym link under current director i ..",
        "id": 793,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'l', 'path', '-', 'type', 'l', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 9], [1, 2, 3, 4, 7, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "uname -m | grep Regex",
        "text": "check if current system be run in regex address ..",
        "id": 794,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '-', 'm', 'word', 'regex', 'u', 'name', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 2, 2, 0, 3, 4, 4, 7]]",
            "sibling_edges": "[[2, 1, 4, 7, 5, 9], [1, 7, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 1, 11], [10, 5, 6, 1, 11, 8]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search director i tree regex for file file ..",
        "id": 795,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -E Regex {} \\;",
        "text": "search for regex in all file file under current director i ..",
        "id": 796,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'e', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 0, 0, 8, 8, 9, 20, 21]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 21, 11, 14, 17, 20, 22], [1, 2, 3, 4, 5, 6, 7, 20, 8, 12, 15, 18, 21, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 22, 23]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -or -name Regex -or -name Regex \\) -print | xargs -I {} chmod Permission {}",
        "text": "find all regex regex and regex file under current director i and c hang per miss to number ..",
        "id": 797,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'print', 'word', '-', 'i', 'word', 'word', 'ch', 'mod', 'permission', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 0, 14, 14, 0, 0, 15, 15, 16, 0, 0, 17, 38, 38, 41, 42, 46, 47]]",
            "sibling_edges": "[[13, 1, 17, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 38, 14, 42, 15, 16, 19, 21, 24, 26, 29, 31, 34, 36, 39, 41, 43, 46, 49], [1, 38, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 41, 15, 16, 46, 20, 22, 25, 27, 30, 32, 35, 37, 40, 42, 44, 47, 50]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[48, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 49, 50, 39, 40, 51, 52, 43, 44, 45, 53], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 49, 50, 39, 40, 51, 52, 43, 44, 45, 53, 54]]"
        }
    },
    {
        "code": "find Path -name Regex -exec grep -w Regex {} \\; -print | grep Regex",
        "text": "find all file in current folder end with file and search for a word in all t he be e file ..",
        "id": 798,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'grep', '-', 'w', 'regex', 'word', 'word', '\\\\', ';', '-', 'print', 'word', 'regex', 'find', '{', '}', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 0, 0, 9, 9, 10, 10, 0, 11, 12, 23, 24, 29]]",
            "sibling_edges": "[[10, 1, 12, 2, 3, 4, 5, 6, 7, 8, 24, 9, 29, 14, 17, 20, 23, 25, 27], [1, 29, 2, 3, 4, 5, 6, 7, 8, 23, 9, 10, 11, 15, 18, 21, 24, 26, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 32, 33, 25, 26, 27, 28, 1, 34], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 32, 33, 25, 26, 27, 28, 1, 34, 30]]"
        }
    },
    {
        "code": "ln -s `canonical.bash foo` bar",
        "text": "c re at a symbol link name regex to file that name be a result of command file regex ..",
        "id": 799,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 's', '`', '`', 'bar', 'ln', 'word', 'word', 'foo', 'canonical', '.', 'bash']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 1, 1, 0, 0, 2, 3, 0, 0, 10, 11, 11, 11]]",
            "sibling_edges": "[[3, 1, 7, 4, 6, 10, 11, 13, 14], [1, 6, 2, 5, 11, 7, 10, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 4, 5, 6, 13, 14, 15, 12, 7], [4, 5, 6, 13, 14, 15, 12, 7, 8]]"
        }
    },
    {
        "code": "find Path -type d -maxdepth Quantity",
        "text": "search director i match pattern file for level number sub director i ..",
        "id": 800,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'max', 'depth', 'quantity', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan -type f -size +Size -ls",
        "text": "find file with size more than size and which be more than time span old under file director i ..",
        "id": 801,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', '-', 'type', 'f', '-', 'size', '+', 'size', '-', 'ls', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 12, 14, 16, 19, 21, 23], [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 15, 17, 20, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} grep -E Regex {} | grep -E -v Regex",
        "text": "search current director i for file who be e name start with regex ig nor svn git and file file ..",
        "id": 802,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'grep', '-', 'e', 'regex', 'word', 'word', 'word', '-', 'e', '-', 'v', 'regex', 'find', 'x', 'arg', '{', '}', '{', '}', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 0, 7, 7, 8, 8, 0, 0, 9, 10, 10, 11, 0, 0, 0, 12, 12, 13, 13, 14, 15, 23, 23, 28, 29, 34, 35, 36]]",
            "sibling_edges": "[[6, 1, 35, 2, 15, 3, 4, 5, 23, 7, 8, 29, 9, 10, 11, 36, 12, 13, 17, 20, 21, 24, 26, 28, 31, 34, 37, 39, 43], [1, 23, 2, 36, 3, 4, 5, 6, 7, 8, 28, 9, 10, 11, 34, 12, 13, 14, 18, 21, 22, 25, 27, 29, 32, 35, 38, 40, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[42, 16, 17, 18, 19, 20, 21, 22, 1, 43, 44, 24, 25, 26, 27, 45, 46, 30, 31, 32, 33, 47, 48, 2, 49, 37, 38, 39, 40], [16, 17, 18, 19, 20, 21, 22, 1, 43, 44, 24, 25, 26, 27, 45, 46, 30, 31, 32, 33, 47, 48, 2, 49, 37, 38, 39, 40, 41]]"
        }
    },
    {
        "code": "find ~ -type f ( -iname *.mp3 -o -iname *.ogg ) > mynewplaylist.m3u",
        "text": "make a playlist out of all file and file file in home director i ..",
        "id": 803,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', '~', '-', 'type', 'f', '(', ')', '>', 'word', 'find', 'word', 'word', 'word', 'word', 'mynewplaylist', '.', 'm3u', 'word', '*', '.', 'mp3', '-', 'o', '-', 'i', 'name', '*', '.', 'ogg', '-', 'i', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 13, 13, 13, 0, 15, 15, 15, 16, 16, 17, 17, 17, 18, 18, 18, 22, 22, 22]]",
            "sibling_edges": "[[4, 1, 5, 2, 3, 11, 7, 10, 18, 12, 22, 15, 16, 17, 19, 20, 23, 24, 26, 28, 29, 31, 32, 34, 35], [1, 10, 2, 3, 4, 12, 8, 22, 11, 13, 15, 16, 17, 18, 20, 21, 24, 25, 27, 29, 30, 32, 33, 35, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 6, 7, 8, 9, 1, 10, 34, 35, 36, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 11, 12, 19, 20], [6, 7, 8, 9, 1, 10, 34, 35, 36, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 11, 12, 19, 20, 21]]"
        }
    },
    {
        "code": "sed -i $( whoami ) File",
        "text": "run s ed command file on file where regex be rep lac with current user name ..",
        "id": 804,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'i', '$(', ')', 'file', 's', 'ed', 'word', 'whoa', 'mi']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 1, 1, 0, 0, 2, 3, 3, 0, 11, 11]]",
            "sibling_edges": "[[3, 1, 7, 4, 6, 11, 9, 12], [1, 6, 2, 5, 11, 7, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 4, 5, 6, 12, 13, 7], [10, 4, 5, 6, 12, 13, 7, 8]]"
        }
    },
    {
        "code": "find Path -type d | grep -E -v Regex | less",
        "text": "find director i in file and show on li those that do n 't match regex file ..",
        "id": 805,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', 'word', '-', 'e', '-', 'v', 'regex', 'word', 'find', 'grep', 'le']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 6, 7, 7, 8, 0, 9, 14, 20]]",
            "sibling_edges": "[[5, 1, 8, 2, 9, 3, 4, 14, 6, 7, 11, 15, 17], [1, 14, 2, 20, 3, 4, 5, 6, 7, 8, 12, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 13, 1, 22, 15, 16, 17, 18, 19, 2], [10, 11, 12, 13, 1, 22, 15, 16, 17, 18, 19, 2, 23]]"
        }
    },
    {
        "code": "find Path -atime -Timespan -name Regex",
        "text": "display all file file in folder file which be access in time span ..",
        "id": 806,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'a', 'time', '-', 'timespan', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 11, 13], [1, 2, 3, 4, 5, 9, 10, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "ssh Regex -l Regex",
        "text": "ssh into regex with login name regex ..",
        "id": 807,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'regex', '-', 'l', 'regex', 'ssh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -xdev -inum Quantity | xargs -I {} rm {}",
        "text": "de let all hard link to physic file with i nod number number ..",
        "id": 808,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'x', 'dev', '-', 'in', 'um', 'quantity', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 4, 5, 0, 6, 6, 0, 0, 7, 0, 0, 8, 17, 17, 20, 21, 23, 24]]",
            "sibling_edges": "[[5, 1, 8, 2, 3, 4, 17, 6, 21, 7, 10, 11, 13, 14, 18, 20, 23, 26], [1, 17, 2, 3, 4, 5, 6, 20, 7, 23, 11, 12, 14, 15, 19, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 9, 10, 11, 12, 13, 14, 15, 16, 1, 26, 27, 18, 19, 28, 29, 22, 30], [9, 10, 11, 12, 13, 14, 15, 16, 1, 26, 27, 18, 19, 28, 29, 22, 30, 31]]"
        }
    },
    {
        "code": "echo $( basename $( dirname $( dirname Regex ) ) )",
        "text": "strip number last section from path regex and print basenam of rest part ..",
        "id": 809,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'echo', 'word', '$(', ')', 'base', 'name', 'word', '$(', ')', 'dir', 'name', 'word', 'word', 'regex', 'dir', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 1, 0, 0, 0, 5, 5, 0, 0, 0, 10, 10, 0, 0, 15, 16, 16]]",
            "sibling_edges": "[[1, 2, 7, 5, 6, 12, 8, 10, 11, 15, 13, 16, 18], [2, 5, 3, 6, 10, 7, 9, 11, 16, 12, 14, 15, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 8, 9, 6, 13, 14, 11, 18, 19, 17, 12, 7], [2, 8, 9, 6, 13, 14, 11, 18, 19, 17, 12, 7, 3]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan -mtime -Timespan",
        "text": "find all file in folder file which be mod if i between number to time span ago ..",
        "id": 810,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 11, 13, 14, 16], [1, 2, 3, 4, 5, 9, 10, 12, 14, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "pushd Directory",
        "text": "push current folder to director i stack ..",
        "id": 811,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'push', 'd']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "mount | tail - Quantity | sed -e Program",
        "text": "print mount point of last mount drive ..",
        "id": 812,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'quantity', 'word', '-', 'e', 'program', 'mount', 'tail', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 5, 5, 6, 7, 8, 11, 11]]",
            "sibling_edges": "[[7, 1, 4, 2, 8, 3, 11, 5, 12, 17], [1, 8, 2, 11, 3, 4, 5, 6, 13, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 1, 16, 9, 10, 2, 17, 18, 12, 13], [1, 16, 9, 10, 2, 17, 18, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -iname Regex",
        "text": "find all file and director i under current director i match case in sen it pattern regex ..",
        "id": 813,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex -user Regex",
        "text": "display all file file in current folder which belong to user no bod i ..",
        "id": 814,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'user', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "cowsay hello | rev",
        "text": "display a garbl ascii art of a cow say regex backward ..",
        "id": 815,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'hello', 'word', 'cowsay', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 2, 0, 3, 5]]",
            "sibling_edges": "[[2, 1, 3], [1, 5, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4, 1], [4, 1, 7]]"
        }
    },
    {
        "code": "tmux set-option -g history-limit 10000",
        "text": "global set maximum number of line to hold in window hist or i as number ..",
        "id": 816,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'number', 'word', 'set', '-', 'option', '-', 'g', 'history', '-', 'limit', '<number>', 't', 'mu', 'x']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 7, 9, 11, 12, 15, 16], [1, 2, 3, 4, 7, 8, 10, 12, 13, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13], [16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "echo $( seq Number ) | xargs -P Quantity -I {} -d Regex ping -W Quantity -c Quantity Regex | grep -E Regex",
        "text": "ping ever i address from file to file with a timeout of time span and filter out no respons ..",
        "id": 817,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '$(', ')', 'word', '-', 'p', 'quantity', '-', 'i', 'word', 'word', '-', 'd', 'regex', 'ping', '-', 'w', 'quantity', '-', 'c', 'quantity', 'regex', 'word', '-', 'e', 'regex', 'echo', 'word', 'x', 'arg', '{', '}', 'grep', 'word', 'number', 'seq']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 5, 0, 0, 6, 6, 7, 8, 9, 9, 10, 11, 11, 12, 13, 0, 14, 14, 15, 16, 0, 19, 19, 25, 26, 38, 0, 43, 49]]",
            "sibling_edges": "[[18, 1, 13, 2, 16, 19, 3, 4, 5, 26, 6, 7, 8, 9, 10, 11, 12, 38, 14, 17, 43, 20, 23, 25, 27, 31, 34, 39, 49, 44], [1, 19, 2, 38, 17, 3, 4, 5, 25, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 49, 18, 21, 24, 26, 28, 32, 35, 40, 43, 45]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[42, 17, 51, 50, 18, 1, 44, 45, 20, 21, 22, 23, 24, 46, 47, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 2, 48, 39, 40], [17, 51, 50, 18, 1, 44, 45, 20, 21, 22, 23, 24, 46, 47, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 2, 48, 39, 40, 41]]"
        }
    },
    {
        "code": "fold -w Quantity -s File",
        "text": "wrap each line in regex to a maximum of number char act break at space ..",
        "id": 818,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'w', 'quantity', '-', 's', 'file', 'fold']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 9], [1, 2, 3, 4, 7, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "find all file and director i with number per miss under current director i tree ..",
        "id": 819,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -not -iname Regex",
        "text": "find all file that be not name file in current director i on li and without regard to case ..",
        "id": 820,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'not', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 10, 13, 15, 16], [1, 2, 3, 4, 5, 6, 10, 11, 14, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find . ( -size 100 -o -size -100 ) -name *.html   -exec ls -l {} ; 2> /dev/null",
        "text": "find all file file in current director i which size great than size and display detail and discard all error ..",
        "id": 821,
        "graph": {
            "nodes": "['program', ';', '-', 'word', '}', 'word', 'word', '(', ')', 'name', '*', '.', 'html', '-', 'exec', 'ls', '-', 'l', '{', 'file_descriptor', '>', 'word', 'find', '.', 'number', 'word', 'word', 'number', '<number>', '/', 'dev', '/', 'null', 'word', '<number>', '-', 'o', '-', 'size', '-', '<number>', '-', 'size']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 5, 6, 0, 0, 0, 0, 19, 21, 21, 21, 21, 0, 24, 25, 25, 26, 26, 27, 27, 33, 33]]",
            "sibling_edges": "[[8, 4, 1, 5, 6, 2, 3, 7, 27, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 33, 24, 25, 26, 29, 30, 31, 35, 37, 39, 41], [2, 1, 19, 6, 7, 3, 4, 33, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 30, 31, 32, 36, 38, 40, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 23, 7, 41, 42, 34, 35, 36, 37, 38, 39, 40, 8, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 4, 1, 28, 20, 29, 30, 31], [23, 7, 41, 42, 34, 35, 36, 37, 38, 39, 40, 8, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 4, 1, 28, 20, 29, 30, 31, 32]]"
        }
    },
    {
        "code": "find Path -name Regex -delete",
        "text": "find all file file under file and de let them ..",
        "id": 822,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -ctime -Timespan -name Regex -print0 | xargs -r -0 -I {} mv -t Directory {}",
        "text": "find regex file and director i under file director i who be e status be c hang le than time span ago and move them to file ..",
        "id": 823,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'c', 'time', '-', 'timespan', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', 'r', '-', '<number>', '-', 'i', 'word', 'word', 'mv', '-', 't', 'directory', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 10, 10, 0, 0, 11, 12, 12, 13, 0, 0, 14, 27, 27, 34, 35, 40, 41]]",
            "sibling_edges": "[[7, 1, 14, 2, 3, 4, 5, 6, 27, 8, 9, 10, 35, 11, 12, 13, 16, 17, 19, 21, 24, 25, 28, 30, 32, 34, 37, 40, 43], [1, 27, 2, 3, 4, 5, 6, 7, 8, 9, 10, 34, 11, 12, 13, 40, 17, 18, 20, 22, 25, 26, 29, 31, 33, 35, 38, 41, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[42, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 43, 44, 28, 29, 30, 31, 32, 33, 45, 46, 36, 37, 38, 39, 47], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 43, 44, 28, 29, 30, 31, 32, 33, 45, 46, 36, 37, 38, 39, 47, 48]]"
        }
    },
    {
        "code": "chgrp Regex File",
        "text": "c hang group ownership of file to regex ..",
        "id": 824,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'file', 'chg', 'rp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find Path Path -name Regex",
        "text": "search all file and director i either of director i file and file which contain regex anywher in file or director i name ..",
        "id": 825,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 8], [1, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "basename Regex | cut -d Regex -f -Number",
        "text": "take section of v aria bl regex between last slash and follow dot if an i and store that section in v aria bl regex ..",
        "id": 826,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'd', 'regex', '-', 'f', '-', 'number', 'base', 'name', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 6, 6, 7, 7, 9]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 4, 5, 10, 13, 15, 17], [1, 9, 2, 3, 4, 5, 6, 11, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 18, 8, 1, 19, 10, 11, 12, 13, 14, 15], [18, 8, 1, 19, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -size Size",
        "text": "find all size file ..",
        "id": 827,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'size', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -perm -Permission",
        "text": "find all file under file with read writ access for other ..",
        "id": 828,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 13], [1, 2, 3, 4, 5, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "grep $( cat File ) File",
        "text": "print all string from file file match pattern in file file ..",
        "id": 829,
        "graph": {
            "nodes": "['command', 'word', 'word', '$(', ')', 'file', 'grep', 'word', 'word', 'file', 'cat']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 0, 0, 7, 8]]",
            "sibling_edges": "[[2, 4, 3, 7, 8], [3, 1, 8, 4, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 10, 9, 4], [3, 10, 9, 4, 5]]"
        }
    },
    {
        "code": "find . -iname $srch* -exec grep Processed Files {} ; -print| sed -r N;s/(.*)\\n(.*)/\\2 \\1/ > temp2",
        "text": "search for regex in all regex file under current director i run s ed script directory on output and redirect final output to regex file ..",
        "id": 830,
        "graph": {
            "nodes": "['program', ';', ';', ';', ';', 'word', 'word', 'word', 'word', 'word', 'word', '|', '(', ')', 'word', '.', '-', 'i', 'name', 'word', '-', 'exec', 'grep', 'process', 'file', 'word', 'word', 'word', 'word', 'word', '(', ')', 'word', '>', 'word', 'find', '$', 'variable_name', '*', '{', '}', 'word', 'word', '-', 'r', 'n', 's', '/', 'word', 'word', '\\\\', '<number>', '/', 'temp2', 'srch', '-', 'print', 's', 'ed', 'word', '.', '*', '/', '\\\\', '<number>', '.', '*']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 6, 0, 7, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 19, 25, 26, 0, 0, 27, 27, 28, 29, 29, 0, 0, 32, 32, 32, 34, 37, 41, 41, 42, 42, 0, 48, 48, 49, 49, 49, 59, 59]]",
            "sibling_edges": "[[26, 1, 28, 2, 31, 3, 13, 4, 14, 5, 6, 19, 7, 8, 9, 10, 41, 11, 29, 12, 48, 32, 16, 17, 37, 20, 25, 42, 27, 30, 59, 49, 33, 36, 43, 46, 50, 51, 55, 57, 60, 62, 63, 65], [1, 41, 2, 29, 3, 12, 4, 49, 5, 6, 36, 7, 8, 9, 10, 25, 11, 42, 30, 48, 13, 33, 17, 18, 19, 21, 26, 27, 28, 59, 31, 32, 34, 37, 44, 47, 51, 52, 56, 58, 61, 63, 64, 66]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 15, 16, 17, 18, 36, 54, 38, 20, 21, 22, 23, 24, 39, 40, 1, 55, 56, 11, 57, 58, 43, 44, 45, 2, 46, 47, 30, 65, 66, 31, 3, 12, 60, 61, 13, 4, 62, 63, 64, 50, 51, 52, 33], [15, 16, 17, 18, 36, 54, 38, 20, 21, 22, 23, 24, 39, 40, 1, 55, 56, 11, 57, 58, 43, 44, 45, 2, 46, 47, 30, 65, 66, 31, 3, 12, 60, 61, 13, 4, 62, 63, 64, 50, 51, 52, 33, 53]]"
        }
    },
    {
        "code": "chown Regex File",
        "text": "c hang owner and group of file to regex ..",
        "id": 831,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "find Path -type d -name Regex",
        "text": "find all hide director i start from current director i ..",
        "id": 832,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find $DiskName -type f -mtime -3 -size +5000 -exec ls -ld {} ; 2>/dev/null | sort -n -k 5.1,5 >> $TMPFILE",
        "text": "sort all regular file in regex director i which be mod if i in time span and which be big than size base on size and save output to regex ..",
        "id": 833,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', '$', 'variable_name', '-', 'type', 'f', '-', 'm', 'time', '-', '<number>', '-', 'size', '+', '<number>', '-', 'exec', 'ls', '-', 'ld', 'word', 'word', '|', '>>', 'find', 'diskname', '{', '}', 'word', 'word', 'word', '$', 'variable_name', 'file_descriptor', '>', 'word', 'word', '-', 'n', '-', 'k', '<number>', '.', '<number>', ',', '<number>', 'tmpfile', '<number>', '/', 'dev', '/', 'null', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 0, 0, 0, 0, 11, 13, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 40, 40, 41, 41, 41, 41, 41, 43, 44, 46, 46, 46, 46, 47]]",
            "sibling_edges": "[[32, 1, 11, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 41, 12, 14, 17, 18, 20, 22, 24, 26, 29, 31, 46, 33, 34, 47, 39, 40, 42, 44, 45, 48, 50, 52, 53, 54, 55, 59, 60, 61], [1, 44, 12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 31, 34, 13, 15, 18, 19, 21, 23, 25, 27, 30, 32, 33, 47, 42, 39, 40, 41, 43, 45, 46, 49, 51, 53, 54, 55, 56, 60, 61, 62]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 12, 36, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 1, 58, 45, 59, 60, 61, 62, 33, 63, 48, 49, 50, 51, 52, 53, 54, 55, 56, 34, 42], [12, 36, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 1, 58, 45, 59, 60, 61, 62, 33, 63, 48, 49, 50, 51, 52, 53, 54, 55, 56, 34, 42, 57]]"
        }
    },
    {
        "code": "find Path -name Regex -exec ls -s {} \\;",
        "text": "list all file in file director i tree who be e name be regex and size ..",
        "id": 834,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'ls', '-', 's', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 16, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 17, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "timex find /tmp -print|backup -ivqf/dev/null",
        "text": "c re at a backup of all file in folder file and display take for oper ..",
        "id": 835,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'find', '/', 'tmp', '-', 'print', 'word', '-', 'ivqf', '/', 'dev', '/', 'null', 'timex', 'backup']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 0, 5, 5, 5, 5, 5, 5, 6, 12]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 12, 8, 10, 13, 14, 15, 16, 17], [1, 12, 2, 3, 4, 5, 9, 11, 14, 15, 16, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 7, 8, 9, 10, 11, 1, 20, 13, 14, 15, 16, 17], [7, 8, 9, 10, 11, 1, 20, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "mount | grep Regex",
        "text": "check if a drive be mount to nfs ..",
        "id": 836,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'mount', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 0, 2, 3, 4]]",
            "sibling_edges": "[[3, 1, 4], [1, 4, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 1, 7], [1, 7, 5]]"
        }
    },
    {
        "code": "find Path -name Regex -exec sed -i -r Program {} \\;",
        "text": "c hang ever i refer to colour red to green in all file file ..",
        "id": 837,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 's', 'ed', '-', 'i', '-', 'r', 'program', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 24, 25]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 25, 12, 15, 17, 19, 21, 24, 26], [1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 13, 16, 18, 20, 22, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26, 27]]"
        }
    },
    {
        "code": "yes | more",
        "text": "display an infinit number of line consist of regex until user press q key ..",
        "id": 838,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'yes', 'more']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 0, 2, 3]]",
            "sibling_edges": "[[2, 1], [1, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 1], [1, 5]]"
        }
    },
    {
        "code": "find Path -type d -printf '%d:%p\\n' | sort -n | tail - Quantity",
        "text": "return depth of current director i tree ..",
        "id": 839,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'print', 'f', \"'\", '%', 'd', ':', '%', 'p', \"'\", 'word', '-', 'n', 'word', '-', 'quantity', 'find', 'sort', 'tail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 0, 8, 8, 0, 9, 10, 11, 26, 29]]",
            "sibling_edges": "[[7, 1, 8, 2, 11, 3, 4, 5, 6, 26, 29, 9, 13, 16, 17, 19, 20, 21, 22, 23, 24, 27], [1, 26, 2, 29, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 18, 20, 21, 22, 23, 24, 25, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 33, 27, 28, 2, 34, 30], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 33, 27, 28, 2, 34, 30, 31]]"
        }
    },
    {
        "code": "shopt extglob",
        "text": "show state of shell option regex ..",
        "id": 840,
        "graph": {
            "nodes": "['command', 'word', 'word', 'extglob', 'shop', 't']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all read file in a folder ..",
        "id": 841,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "cp -R File File",
        "text": "make a cop i of en ti r content of sub fold call regex if testfold exist cop i will be place within it ..",
        "id": 842,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'file', 'file', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "ps -p $$ | tail -1 | awk {print $NF}",
        "text": "print current shell ..",
        "id": 843,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'number', 'word', '-', 'p', '$', 'special_variable_name', 'word', '-', '<number>', 'word', 'word', 'word', 'word', 'ps', '$', 'tail', 'a', 'wk', '{', 'print', '$', 'variable_name', '}', 'nf']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, 5, 9, 10, 13, 13, 14, 15, 0, 0, 16, 25]]",
            "sibling_edges": "[[9, 1, 4, 2, 5, 3, 10, 13, 15, 6, 8, 11, 14, 25, 20, 24], [1, 10, 2, 13, 3, 8, 4, 14, 24, 7, 9, 12, 15, 16, 21, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 6, 7, 8, 18, 1, 19, 11, 12, 2, 20, 21, 22, 23, 24, 27], [6, 7, 8, 18, 1, 19, 11, 12, 2, 20, 21, 22, 23, 24, 27, 26]]"
        }
    },
    {
        "code": "find Path ! -perm Permission",
        "text": "find all file under director i tree file who be e per miss be not number ..",
        "id": 844,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '!', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 8], [1, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "pushd $( whoami )",
        "text": "expand regex as current user name and add result path to director i stack ..",
        "id": 845,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'push', 'd', 'word', 'whoa', 'mi']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 0, 6, 6]]",
            "sibling_edges": "[[1, 2, 6, 4, 7], [2, 6, 3, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 2, 7, 8], [5, 2, 7, 8, 3]]"
        }
    },
    {
        "code": "read -p Regex Regex",
        "text": "read a line from standard input with prompt regex and save respons in v aria bl regex ..",
        "id": 846,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'p', 'regex', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "readlink --canonicalize-existing File",
        "text": "save ab sol ut path of script file n be in v aria bl regex ..",
        "id": 847,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '--', 'canonical', 'iz', 'e', '-', 'exist', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 5, 6, 7, 8, 11], [1, 2, 5, 6, 7, 8, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 4, 5, 6, 7, 8, 9], [12, 4, 5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -name Regex -prune -or -print",
        "text": "print all file and director i in regex director i tree skip sccs director i ..",
        "id": 848,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14, 16], [1, 2, 3, 4, 5, 6, 10, 13, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file with pattern file ..",
        "id": 849,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "paste File",
        "text": "print each line in parallel in file file and file ..",
        "id": 850,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'paste']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "display all regular file in current folder with name dummi ..",
        "id": 851,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} sed -i -e Program {}",
        "text": "rep lac occur r of regex with regex on c per each line of file from current director i tree ..",
        "id": 852,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', '-', 'e', 'program', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 8, 9, 9, 10, 10, 11, 0, 0, 12, 20, 20, 25, 26, 34, 35]]",
            "sibling_edges": "[[5, 1, 12, 2, 3, 4, 20, 6, 7, 26, 8, 9, 10, 11, 14, 17, 18, 21, 23, 25, 27, 29, 31, 34, 37], [1, 20, 2, 3, 4, 5, 6, 7, 25, 8, 9, 10, 11, 34, 15, 18, 19, 22, 24, 26, 28, 30, 32, 35, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 13, 14, 15, 16, 17, 18, 19, 1, 37, 38, 21, 22, 23, 24, 39, 40, 27, 28, 29, 30, 31, 32, 33, 41], [13, 14, 15, 16, 17, 18, 19, 1, 37, 38, 21, 22, 23, 24, 39, 40, 27, 28, 29, 30, 31, 32, 33, 41, 42]]"
        }
    },
    {
        "code": "find Path -perm Permission | head",
        "text": "find all read on li file in en ti r file system and show a few line of output from begin ..",
        "id": 853,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'word', 'find', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 10]]",
            "sibling_edges": "[[4, 1, 5, 2, 3, 7], [1, 10, 2, 3, 4, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9, 1], [6, 7, 8, 9, 1, 12]]"
        }
    },
    {
        "code": "head -n -Quantity File",
        "text": "r emo v last number line from a file ..",
        "id": 854,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', '-', 'quantity', 'file', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7], [1, 2, 3, 6, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "bzip2 -k -v File",
        "text": "verbos compress all file on third and fourth depth level keep origin file in place ..",
        "id": 855,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'k', '-', 'v', 'file', 'b', 'zip', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 7, 10, 11], [1, 2, 3, 6, 8, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 12, 5, 6, 7, 8], [11, 12, 5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex | sed Program | xargs -I {} cp File {}",
        "text": "cop i all file like regex under current director i to file director i ..",
        "id": 856,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', 'program', 'word', '-', 'i', 'word', 'word', 'cp', 'file', 'word', 'word', 'find', 's', 'ed', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 0, 7, 7, 0, 0, 8, 9, 0, 0, 10, 15, 15, 17, 17, 20, 21, 24, 25]]",
            "sibling_edges": "[[5, 1, 6, 2, 10, 3, 4, 15, 17, 7, 21, 8, 9, 12, 18, 20, 24, 27, 29], [1, 15, 2, 17, 3, 4, 5, 6, 7, 20, 8, 9, 24, 13, 19, 21, 25, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 1, 27, 28, 16, 2, 29, 30, 18, 19, 31, 32, 22, 23, 33], [11, 12, 13, 14, 1, 27, 28, 16, 2, 29, 30, 18, 19, 31, 32, 22, 23, 33, 34]]"
        }
    },
    {
        "code": "ls -d File | cut -f Number -d Regex",
        "text": "list all of sub director i in current director i with no trail slash ..",
        "id": 857,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', 'file', 'word', '-', 'f', 'number', '-', 'd', 'regex', 'ls', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 4, 4, 5, 6, 6, 7, 8, 12]]",
            "sibling_edges": "[[3, 1, 8, 2, 12, 4, 5, 6, 9, 13, 16], [1, 12, 2, 3, 4, 5, 6, 7, 10, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 1, 20, 13, 14, 15, 16, 17], [9, 10, 11, 1, 20, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -exec sed -i Program -- {} \\;",
        "text": "find all text file in current folder start with regex and prep end first line ..",
        "id": 858,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'exec', 's', 'ed', '-', 'i', 'program', '--', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 10, 0, 0, 11, 11, 12, 28, 29]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 14, 17, 20, 22, 24, 28, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 28, 11, 15, 18, 21, 23, 25, 29, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 30], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 30, 31]]"
        }
    },
    {
        "code": "pwd -P",
        "text": "save physic current work director i to v aria bl regex ..",
        "id": 859,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'p', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "echo Regex | od -t x1",
        "text": "print a hex dump byte to byte of output of regex ..",
        "id": 860,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 't', 'x', '<number>', 'echo', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 5, 7]]",
            "sibling_edges": "[[2, 1, 5, 7, 3, 8, 10], [1, 7, 2, 3, 4, 9, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 1, 13, 8, 9, 10], [6, 1, 13, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -newer File",
        "text": "find all file new than file under and below current director i ..",
        "id": 861,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "chmod -R Permission File",
        "text": "recur set all per miss under file to number ..",
        "id": 862,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'r', 'permission', 'file', 'ch', 'mod']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "df -h",
        "text": "report file system disk space u sag in human read a bl format ..",
        "id": 863,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'h', 'df']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 1, 2]]",
            "sibling_edges": "[[2, 3], [1, 4]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[5, 3], [3, 4]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file file and director i under home director i ..",
        "id": 864,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "comm -2 -3 File File",
        "text": "print uni qu line of file com par to file ..",
        "id": 865,
        "graph": {
            "nodes": "['command', 'number', 'number', 'word', 'word', 'word', '-', '<number>', '-', '<number>', 'file', 'file', 'comm']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "cut -d Regex -f Number File | xargs -I {} dig Regex {}",
        "text": "take first text field from file file as a domain name and get short a record for one ..",
        "id": 866,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'file', 'word', '-', 'i', 'word', 'word', 'dig', 'regex', 'word', 'word', 'cut', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 5, 6, 0, 7, 7, 0, 0, 8, 9, 0, 0, 10, 18, 18, 21, 22, 25, 26]]",
            "sibling_edges": "[[6, 1, 10, 2, 3, 4, 5, 18, 7, 22, 8, 9, 11, 14, 19, 21, 25, 28], [1, 18, 2, 3, 4, 5, 6, 7, 21, 8, 9, 25, 12, 15, 20, 22, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 1, 28, 29, 19, 20, 30, 31, 23, 24, 32], [11, 12, 13, 14, 15, 16, 17, 1, 28, 29, 19, 20, 30, 31, 23, 24, 32, 33]]"
        }
    },
    {
        "code": "mount -v | grep Regex | awk Program | xargs -I {} ls -l -s -R {}",
        "text": "recur list all file on smbfs mount ..",
        "id": 867,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'v', 'word', 'regex', 'word', 'program', 'word', '-', 'i', 'word', 'word', 'ls', '-', 'l', '-', 's', '-', 'r', 'word', 'word', 'mount', 'grep', 'a', 'wk', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 5, 0, 6, 0, 7, 7, 0, 0, 8, 9, 9, 10, 10, 11, 11, 0, 0, 12, 15, 17, 17, 19, 19, 22, 23, 31, 32]]",
            "sibling_edges": "[[4, 1, 5, 2, 6, 3, 12, 15, 17, 19, 7, 23, 8, 9, 10, 11, 13, 20, 22, 25, 27, 29, 31, 35, 37], [1, 15, 2, 17, 3, 19, 4, 5, 6, 7, 22, 8, 9, 10, 11, 31, 14, 21, 23, 26, 28, 30, 32, 36, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 1, 34, 16, 2, 35, 36, 18, 3, 37, 38, 20, 21, 39, 40, 24, 25, 26, 27, 28, 29, 30, 41], [13, 14, 1, 34, 16, 2, 35, 36, 18, 3, 37, 38, 20, 21, 39, 40, 24, 25, 26, 27, 28, 29, 30, 41, 42]]"
        }
    },
    {
        "code": "alias prettify_json=php -E $o = json_decode($argn); print json_encode($o, JSON_PRETTY_PRINT);",
        "text": "set alia regex for command regex ..",
        "id": 868,
        "graph": {
            "nodes": "['program', ';', ';', ';', ';', 'word', 'word', 'word', 'word', '(', ')', 'word', '(', ')', 'word', 'prettify_json', '=', 'php', '-', 'e', '$', 'variable_name', '=', 'json_decode', 'word', 'json_encode', 'word', 'alias', 'o', 'print', 'json_pretty_print', '$', 'variable_name', 'word', 'argn', '$', 'variable_name', ',', 'o']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 6, 6, 0, 0, 7, 8, 0, 11, 0, 14, 21, 24, 26, 0, 0, 0, 32, 0, 0, 33, 36]]",
            "sibling_edges": "[[8, 1, 10, 2, 11, 3, 13, 14, 5, 6, 21, 7, 9, 32, 24, 12, 26, 15, 16, 18, 20, 33, 31, 36, 35], [1, 9, 2, 24, 3, 12, 4, 5, 6, 20, 7, 8, 31, 10, 11, 35, 13, 16, 17, 19, 21, 26, 32, 33, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 15, 16, 17, 18, 19, 20, 28, 22, 23, 1, 9, 31, 34, 10, 2, 29, 25, 3, 12, 35, 38, 37, 30, 13], [15, 16, 17, 18, 19, 20, 28, 22, 23, 1, 9, 31, 34, 10, 2, 29, 25, 3, 12, 35, 38, 37, 30, 13, 4]]"
        }
    },
    {
        "code": "sort -S Size File",
        "text": "sort regex use a buff with a size regex of main m em or i ..",
        "id": 869,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 's', 'size', 'file', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type d -iname Regex",
        "text": "find all director i contain regex in name under file director i tree ..",
        "id": 870,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "sed -n Program File",
        "text": "print all line in file that not match regex ..",
        "id": 871,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'n', 'program', 'file', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 9], [1, 2, 3, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "command -1 <(gzip -dc file1.gz) -2 <(gzip -dc file2.gz)",
        "text": "unzip file file and file as argument to regex ..",
        "id": 872,
        "graph": {
            "nodes": "['command', 'number', 'number', 'word', '-', '<number>', '<(', ')', '-', '<number>', '<(', ')', 'command', 'word', 'word', 'word', 'word', 'word', '-', 'dc', 'file', '<number>', '.', 'gz', 'word', '-', 'dc', 'file', '<number>', '.', 'gz', 'g', 'zip', 'g', 'zip']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 3, 0, 0, 0, 0, 0, 13, 13, 14, 14, 14, 14, 0, 15, 15, 16, 16, 16, 16, 17, 17, 24, 24]]",
            "sibling_edges": "[[3, 1, 7, 2, 4, 6, 14, 8, 10, 16, 17, 13, 24, 15, 18, 20, 21, 22, 25, 27, 28, 29, 31, 33], [1, 6, 2, 10, 5, 17, 7, 9, 24, 11, 13, 14, 15, 16, 19, 21, 22, 23, 26, 28, 29, 30, 32, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 4, 5, 6, 31, 32, 18, 19, 20, 21, 22, 23, 7, 8, 9, 10, 33, 34, 25, 26, 27, 28, 29, 30], [4, 5, 6, 31, 32, 18, 19, 20, 21, 22, 23, 7, 8, 9, 10, 33, 34, 25, 26, 27, 28, 29, 30, 11]]"
        }
    },
    {
        "code": "find Path -type d -print0 | tr Regex Regex",
        "text": "save a comma se par list of all director i under current director i tree to v aria bl regex ..",
        "id": 873,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'print', '<number>', 'word', 'regex', 'regex', 'find', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 7, 8, 16]]",
            "sibling_edges": "[[5, 1, 8, 2, 3, 4, 16, 6, 10, 13, 14], [1, 16, 2, 3, 4, 5, 6, 7, 11, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 1, 20, 17], [9, 10, 11, 12, 13, 14, 15, 1, 20, 17, 18]]"
        }
    },
    {
        "code": "find . -name *$lower1* -exec bash -c mv \"$1\" \"${1/$2/$3}\" -- {} $lower1 $lower2 ;",
        "text": "move all regex file and director i under current director i to path form by rep lac match of regex with regex in path ..",
        "id": 874,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'raw_string', 'raw_string', 'word', 'word', '.', '-', 'name', 'word', 'word', '-', 'exec', 'bash', '-', 'c', 'mv', \"'\", '$', '<number>', \"'\", \"'\", '$', '{', '<number>', '/', '$', '<number>', '/', '$', '<number>', '}', \"'\", '--', 'word', 'word', '$', 'variable_name', '$', 'variable_name', 'find', '*', '$', 'variable_name', '*', '{', '}', 'lower1', 'lower2', 'lower1']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 0, 0, 4, 4, 5, 6, 6, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 0, 0, 0, 0, 0, 0, 11, 15, 0, 0, 16, 40, 41, 43, 45, 49]]",
            "sibling_edges": "[[45, 11, 2, 3, 16, 4, 5, 6, 7, 8, 9, 10, 41, 43, 13, 15, 49, 17, 20, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 42, 44, 48], [1, 2, 3, 15, 4, 5, 6, 7, 8, 9, 10, 40, 42, 44, 14, 48, 16, 18, 21, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43, 45, 49]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[46, 12, 13, 14, 47, 48, 55, 50, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 42, 53, 44, 54], [12, 13, 14, 47, 48, 55, 50, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 42, 53, 44, 54, 1]]"
        }
    },
    {
        "code": "find Path -type f ! -perm -Permission",
        "text": "find all regular file in current director i tree that be not read a bl by anyon ..",
        "id": 875,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '!', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 13, 15], [1, 2, 3, 4, 5, 6, 10, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find . -name *-GHBAG-* -exec bash -c mv $0 ${0/GHBAG/stream-agg} {} ;",
        "text": "c hang word regex to regex in all file name in current folder which word regex in name ..",
        "id": 876,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'name', '*', '-', 'ghbag', '-', '*', '-', 'exec', 'bash', '-', 'c', 'mv', '$', 'special_variable_name', '${', 'special_variable_name', '/', 'regex', '/', '}', 'word', 'word', 'find', '<number>', '<number>', 'ghbag', 'variable_name', 'word', '{', '}', 'stream', '-', 'agg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 7, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 25, 27, 29, 0, 0, 32, 33, 38, 39, 39]]",
            "sibling_edges": "[[33, 9, 2, 3, 4, 5, 6, 7, 8, 25, 31, 11, 13, 14, 15, 16, 18, 21, 24, 26, 27, 28, 29, 30, 39, 32, 38, 43], [1, 2, 3, 4, 5, 6, 7, 8, 24, 26, 32, 12, 14, 15, 16, 17, 19, 22, 25, 27, 28, 29, 30, 38, 31, 33, 39, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 35, 26, 36, 28, 37, 30, 42, 43, 44, 31, 40, 41], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 35, 26, 36, 28, 37, 30, 42, 43, 44, 31, 40, 41, 1]]"
        }
    },
    {
        "code": "column -t -s Regex File",
        "text": "format file file with no column delimit ..",
        "id": 877,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 't', '-', 's', 'regex', 'file', 'column']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8], [1, 2, 3, 4, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "read -n Quantity -r -p Regex Regex",
        "text": "read a sing l char act from standard input into v aria bl regex without backslash es cap and use prompt file ..",
        "id": 878,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'quantity', '-', 'r', '-', 'p', 'regex', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 8, 11, 13], [1, 2, 3, 4, 5, 6, 9, 12, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "chown Regex File",
        "text": "c hang owner of directory to regex ..",
        "id": 879,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'regex', 'file', 'chow', 'n']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 6], [1, 2, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 7, 4], [7, 4, 5]]"
        }
    },
    {
        "code": "IFS= read -t 0.01 -d  -n1 keypress",
        "text": "unset if and read a sing l char act from standard input with timeout of time span and save respons in v aria bl regex ..",
        "id": 880,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'variable_name', '=', 'word', '-', 't', '<number>', '.', '<number>', '-', 'd', '-', 'n', '<number>', 'keypress', 'ifs', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 6, 8]]",
            "sibling_edges": "[[7, 8, 1, 2, 3, 4, 6, 9, 11, 12, 14, 16, 17], [8, 1, 2, 3, 4, 5, 7, 10, 12, 13, 15, 17, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 7, 21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [7, 21, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find -type f -name *.au | awk {printf \"%s %s\\n\",$0,$0\".wav\" } | xargs sox",
        "text": "convert file file to file file use regex ..",
        "id": 881,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'type', 'f', '-', 'name', '*', '.', 'au', 'word', 'word', 'word', 'raw_string', 'word', '$', 'word', 'raw_string', '}', 'word', 'sox', 'find', 'a', 'wk', '{', 'print', 'f', \"'\", '%', 's', '%', 's', \"'\", ',', '<number>', ',', '$', 'special_variable_name', \"'\", '.', 'wav', \"'\", 'x', 'arg', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 5, 5, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 9, 18, 18, 19, 20, 20, 21, 21, 21, 21, 21, 21, 22, 24, 24, 0, 0, 25, 25, 25, 25, 27, 27, 45]]",
            "sibling_edges": "[[6, 1, 7, 2, 9, 3, 4, 5, 18, 20, 23, 25, 27, 10, 13, 15, 16, 19, 21, 22, 24, 45, 30, 33, 35, 36, 37, 38, 39, 42, 44, 46, 47, 48, 50], [1, 18, 2, 27, 3, 4, 5, 6, 19, 21, 24, 7, 8, 11, 14, 16, 17, 20, 22, 23, 44, 25, 31, 34, 36, 37, 38, 39, 40, 43, 45, 47, 48, 49, 51]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 10, 11, 12, 13, 14, 15, 16, 17, 1, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 23, 42, 43, 44, 52, 46, 47, 48, 49, 26, 2, 50, 51], [10, 11, 12, 13, 14, 15, 16, 17, 1, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 23, 42, 43, 44, 52, 46, 47, 48, 49, 26, 2, 50, 51, 28]]"
        }
    },
    {
        "code": "tac File | sed Program | tac",
        "text": "rep lac second to last line of file ..",
        "id": 882,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'file', 'word', 'program', 'word', 'ta', 'c', 's', 'ed', 'ta', 'c']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 3, 0, 4, 0, 5, 5, 7, 7, 9, 9]]",
            "sibling_edges": "[[3, 1, 4, 2, 5, 7, 10, 12, 14], [1, 7, 2, 9, 3, 4, 11, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 11, 6, 1, 12, 13, 8, 2, 14], [11, 6, 1, 12, 13, 8, 2, 14, 15]]"
        }
    },
    {
        "code": "echo Regex | xargs -I {} find {} -mindepth Quantity -maxdepth Quantity -type d",
        "text": "find all director i in level number down regex director i ..",
        "id": 883,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', '-', 'i', 'word', 'word', 'find', 'word', 'word', '-', 'min', 'depth', 'quantity', '-', 'max', 'depth', 'quantity', '-', 'type', 'd', 'echo', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 0, 0, 5, 5, 5, 6, 7, 7, 7, 8, 9, 9, 10, 11, 13, 13, 16, 17, 19, 20]]",
            "sibling_edges": "[[2, 1, 11, 13, 3, 17, 4, 20, 5, 6, 7, 8, 9, 14, 16, 19, 21, 22, 25, 26, 29, 33], [1, 13, 2, 3, 16, 4, 19, 5, 6, 7, 8, 9, 10, 15, 17, 20, 22, 23, 26, 27, 30, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 1, 33, 34, 14, 15, 35, 36, 18, 37, 38, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [12, 1, 33, 34, 14, 15, 35, 36, 18, 37, 38, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]]"
        }
    },
    {
        "code": "read -p Regex Regex",
        "text": "read a line from standard input into v aria bl regex with prompt regex ..",
        "id": 884,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'p', 'regex', 'regex', 'read']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -fprint File",
        "text": "search for file regex in current folder and save output to same file ..",
        "id": 885,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'f', 'print', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find ~ -name Foto* > results.txt",
        "text": "save list of file in home director i tree who be e name begin with regex to file ..",
        "id": 886,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', '>', 'word', 'word', '~', '-', 'name', 'foto', '*', 'result', '.', 'txt', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 5, 5, 5, 6]]",
            "sibling_edges": "[[3, 6, 1, 2, 4, 8, 10, 12, 13], [4, 1, 2, 3, 5, 9, 11, 13, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 4, 12, 13], [7, 8, 9, 10, 11, 4, 12, 13, 14]]"
        }
    },
    {
        "code": "cat message.txt | mail -s Backup -a mysqldbbackup.sql backup@email.com",
        "text": "send email with subject regex and attach file and me sag in file to file ..",
        "id": 887,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'message', '.', 'txt', 'word', '-', 's', 'backup', '-', 'a', 'mysqldbbackup', '.', 'sql', 'backup', '@', 'email', '.', 'com', 'cat', 'mail']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 8, 12]]",
            "sibling_edges": "[[2, 1, 8, 12, 3, 4, 5, 6, 9, 10, 13, 16, 18, 19, 21, 22, 23, 24], [1, 12, 2, 3, 4, 5, 6, 7, 10, 11, 14, 17, 19, 20, 22, 23, 24, 25]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 9, 10, 11, 1, 27, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [9, 10, 11, 1, 27, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -type f \\( -iname Regex -not -perm -Permission \\)",
        "text": "search for text file in current folder which not write access to other ..",
        "id": 888,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'i', 'name', 'regex', '-', 'not', '-', 'perm', '-', 'permission', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 18, 19, 22, 24, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 17, 19, 20, 23, 25, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]"
        }
    },
    {
        "code": "awk -F Regex Program <( zcat Regex ) <( zcat Regex )",
        "text": "decompress file and file and print line in file that match regex tab se par field in file ..",
        "id": 889,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'f', 'regex', 'program', '<(', ')', '<(', ')', 'a', 'wk', 'word', 'word', 'word', 'regex', 'word', 'regex', 'z', 'cat', 'z', 'cat']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 1, 1, 2, 3, 0, 0, 0, 0, 4, 4, 0, 0, 0, 15, 0, 16, 17, 17, 19, 19]]",
            "sibling_edges": "[[4, 1, 2, 3, 10, 5, 9, 15, 11, 16, 13, 17, 19, 21, 23], [1, 2, 3, 9, 11, 6, 17, 10, 19, 12, 14, 15, 16, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 14, 5, 6, 7, 8, 9, 21, 22, 18, 10, 11, 23, 24, 20], [14, 5, 6, 7, 8, 9, 21, 22, 18, 10, 11, 23, 24, 20, 12]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} rm {}",
        "text": "r emo v all text file from current folder ..",
        "id": 890,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 0, 0, 7, 12, 12, 15, 16, 18, 19]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 16, 6, 9, 13, 15, 18, 21], [1, 12, 2, 3, 4, 5, 15, 6, 18, 10, 14, 16, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 1, 21, 22, 13, 14, 23, 24, 17, 25], [8, 9, 10, 11, 1, 21, 22, 13, 14, 23, 24, 17, 25, 26]]"
        }
    },
    {
        "code": "find Path -type f -perm Permission | wc -l",
        "text": "count number of regular file with number per miss under current director i tree ..",
        "id": 891,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', 'permission', 'word', '-', 'l', 'find', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 0, 7, 7, 8, 16]]",
            "sibling_edges": "[[6, 1, 8, 2, 3, 4, 5, 16, 10, 13, 17], [1, 16, 2, 3, 4, 5, 6, 7, 11, 14, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 9, 10, 11, 12, 13, 14, 15, 1, 20, 17], [9, 10, 11, 12, 13, 14, 15, 1, 20, 17, 18]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -maxdepth Quantity -type d | grep Regex | tr Regex Regex | xargs -0 -I {} ln -s -t Directory {}",
        "text": "find director i who be e path n be contain regex at level number of current director i tree and c re at s ym link to them in file ..",
        "id": 892,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'max', 'depth', 'quantity', '-', 'type', 'd', 'word', 'regex', 'word', 'regex', 'regex', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'ln', '-', 's', '-', 't', 'directory', 'word', 'word', 'find', 'grep', 'tr', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 5, 6, 7, 7, 7, 8, 9, 9, 10, 0, 11, 0, 12, 13, 0, 14, 14, 15, 15, 0, 0, 16, 17, 17, 18, 18, 19, 0, 0, 20, 33, 35, 38, 38, 43, 44, 51, 52]]",
            "sibling_edges": "[[10, 1, 11, 2, 13, 3, 20, 4, 5, 6, 7, 8, 9, 33, 35, 12, 38, 14, 15, 44, 16, 17, 18, 19, 22, 23, 26, 27, 30, 39, 41, 43, 46, 48, 51, 56], [1, 33, 2, 35, 3, 38, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 43, 16, 17, 18, 19, 51, 23, 24, 27, 28, 31, 40, 42, 44, 47, 49, 52, 57]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[53, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1, 54, 34, 2, 55, 36, 37, 3, 56, 57, 39, 40, 41, 42, 58, 59, 45, 46, 47, 48, 49, 50, 60], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1, 54, 34, 2, 55, 36, 37, 3, 56, 57, 39, 40, 41, 42, 58, 59, 45, 46, 47, 48, 49, 50, 60, 61]]"
        }
    },
    {
        "code": "find $sourcePath -type f -mtime +10 -name *.log | xargs zip -jmT $zipFile -@",
        "text": "move all file file under regex that be mod if i more than time span ago to a zip archiv regex with on li file name ..",
        "id": 893,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '$', 'variable_name', '-', 'type', 'f', '-', 'm', 'time', '+', '<number>', '-', 'name', '*', '.', 'log', 'word', 'zip', '-', 'jmt', '$', 'variable_name', '-', '@', 'find', 'sourcepath', 'x', 'arg', 'zipfile']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 0, 8, 9, 9, 0, 0, 10, 10, 11, 13, 27, 27, 32]]",
            "sibling_edges": "[[7, 1, 11, 13, 2, 3, 4, 5, 6, 27, 8, 9, 32, 12, 14, 17, 18, 20, 22, 24, 25, 29, 31, 33, 37], [1, 27, 12, 2, 3, 4, 5, 6, 7, 8, 9, 31, 10, 13, 15, 18, 19, 21, 23, 25, 26, 30, 32, 34, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 12, 36, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 37, 38, 28, 29, 30, 31, 39, 33], [12, 36, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 37, 38, 28, 29, 30, 31, 39, 33, 34]]"
        }
    },
    {
        "code": "cat File | cut -d Regex -f Number",
        "text": "print fourth column of space se par data from text file file ..",
        "id": 894,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'cat', 'cut']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 5, 5, 6, 7, 9]]",
            "sibling_edges": "[[2, 1, 7, 9, 3, 4, 5, 10, 13], [1, 9, 2, 3, 4, 5, 6, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 1, 17, 10, 11, 12, 13, 14], [8, 1, 17, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -type f",
        "text": "find all file in regex director i without go into sub director i ..",
        "id": 895,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12], [1, 2, 3, 4, 5, 9, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -follow -lname Regex",
        "text": "find break s ym link ..",
        "id": 896,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'follow', '-', 'l', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 9, 10], [1, 2, 3, 4, 8, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path | grep -E Regex | xargs -I {} rm -r -f {}",
        "text": "recur r emo v all file like regex in a current folder ..",
        "id": 897,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'word', '-', 'e', 'regex', 'word', '-', 'i', 'word', 'word', 'rm', '-', 'r', '-', 'f', 'word', 'word', 'find', 'grep', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 0, 6, 6, 0, 0, 7, 8, 8, 9, 9, 0, 0, 10, 12, 16, 16, 19, 20, 26, 27]]",
            "sibling_edges": "[[3, 1, 5, 2, 10, 12, 4, 16, 6, 20, 7, 8, 9, 13, 17, 19, 22, 24, 26, 30], [1, 12, 2, 16, 3, 4, 5, 6, 19, 7, 8, 9, 26, 14, 18, 20, 23, 25, 27, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 1, 29, 13, 14, 15, 2, 30, 31, 17, 18, 32, 33, 21, 22, 23, 24, 25, 34], [11, 1, 29, 13, 14, 15, 2, 30, 31, 17, 18, 32, 33, 21, 22, 23, 24, 25, 34, 35]]"
        }
    },
    {
        "code": "find /path/to/folders/ -name *.emlx -print0 > filelist",
        "text": "print a null delimit list of all file file and director i under directory to filelist ..",
        "id": 898,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', '>', 'word', 'word', '/', 'path', '/', 'to', '/', 'folder', '/', '-', 'name', '*', '.', 'emlx', '-', 'print', '<number>', 'filelist', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 6, 7]]",
            "sibling_edges": "[[4, 7, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 21], [5, 1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 16, 18, 19, 21, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 5], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 5, 23]]"
        }
    },
    {
        "code": "find Path -type f -printf '%p %s\\n' | awk Program",
        "text": "get total size of all file under current director i ..",
        "id": 899,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'f', \"'\", '%', 'p', '%', 's', \"'\", 'word', 'program', 'find', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 0, 7, 8, 22, 22]]",
            "sibling_edges": "[[6, 1, 8, 2, 3, 4, 5, 22, 10, 13, 14, 16, 17, 18, 19, 20, 25], [1, 22, 2, 3, 4, 5, 6, 7, 11, 14, 15, 17, 18, 19, 20, 21, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 25, 26], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 25, 26, 23]]"
        }
    },
    {
        "code": "cd `which <file> | xargs dirname`",
        "text": "c hang to director i of exe cut regex ..",
        "id": 900,
        "graph": {
            "nodes": "['command', 'word', '`', '`', 'cd', '|', '>', 'word', '<', 'word', 'word', 'dir', 'name', 'word', 'file', 'x', 'arg', 'which']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 7, 0, 9, 10, 10, 13]]",
            "sibling_edges": "[[1, 2, 7, 9, 6, 5, 13, 10, 8, 11, 15], [2, 13, 3, 6, 5, 10, 8, 7, 9, 12, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 17, 8, 14, 6, 5, 15, 16, 11, 12], [2, 17, 8, 14, 6, 5, 15, 16, 11, 12, 3]]"
        }
    },
    {
        "code": "chmod Permission -R File",
        "text": "recur set all per miss under file to number ..",
        "id": 901,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'permission', '-', 'r', 'file', 'ch', 'mod']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 3, 4, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 9], [1, 2, 3, 7, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 10, 5, 6, 7], [10, 5, 6, 7, 8]]"
        }
    },
    {
        "code": "tac | sed -n Program | tac",
        "text": "print a line number line from line contain pattern ..",
        "id": 902,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', '-', 'n', 'program', 'word', 'ta', 'c', 's', 'ed', 'ta', 'c']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 5, 5, 6, 6, 10, 10]]",
            "sibling_edges": "[[5, 1, 4, 2, 6, 3, 7, 11, 13, 15], [1, 6, 2, 10, 3, 4, 8, 12, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 12, 1, 13, 14, 7, 8, 9, 2, 15], [12, 1, 13, 14, 7, 8, 9, 2, 15, 16]]"
        }
    },
    {
        "code": "kill $(ps -o pid= -s $(ps -o sess --no-heading --pid $(pgrep rsync )))",
        "text": "send sig term signal to en ti r session of process contain process who be e command match regex ..",
        "id": 903,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'kill', 'word', 'word', 'word', 'word', '-', 'o', 'pi', 'd', '=', '-', 's', '$(', ')', 'ps', 'word', 'word', 'word', 'word', 'word', '-', 'o', 's', 'es', '--', 'no', '-', 'head', '--', 'pi', 'd', '$(', ')', 'ps', 'word', 'word', 'r', 'sync', 'p', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [0, 0, 0, 1, 0, 0, 0, 0, 5, 5, 6, 6, 6, 7, 7, 0, 0, 8, 0, 0, 0, 0, 0, 19, 19, 20, 20, 21, 21, 21, 21, 22, 22, 22, 0, 0, 23, 0, 0, 38, 38, 39, 39]]",
            "sibling_edges": "[[1, 2, 17, 8, 5, 6, 7, 9, 11, 12, 14, 16, 36, 23, 19, 20, 21, 22, 24, 26, 28, 29, 30, 32, 33, 35, 38, 39, 40, 42], [2, 8, 3, 5, 6, 7, 16, 10, 12, 13, 15, 23, 17, 19, 20, 21, 22, 35, 25, 27, 29, 30, 31, 33, 34, 39, 36, 38, 41, 43]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 18, 9, 10, 11, 12, 13, 14, 15, 16, 37, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 40, 41, 36, 17], [2, 18, 9, 10, 11, 12, 13, 14, 15, 16, 37, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 40, 41, 36, 17, 3]]"
        }
    },
    {
        "code": "mount | column -t",
        "text": "format output of regex as a tab l ..",
        "id": 904,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '-', 't', 'mount', 'column']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 2, 2, 3, 4]]",
            "sibling_edges": "[[3, 1, 4, 5], [1, 4, 2, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 1, 8, 5], [1, 8, 5, 6]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -P Quantity -I {} rename Regex {}",
        "text": "recur search for all file with name end with file r en be them to end with file use at most number concurr process ..",
        "id": 905,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'p', 'quantity', '-', 'i', 'word', 'word', 'rename', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 6, 7, 7, 0, 0, 8, 9, 0, 0, 10, 15, 15, 21, 22, 25, 26]]",
            "sibling_edges": "[[4, 1, 10, 2, 3, 15, 5, 6, 7, 22, 8, 9, 12, 16, 19, 21, 25, 28], [1, 15, 2, 3, 4, 5, 6, 7, 21, 8, 9, 25, 13, 17, 20, 22, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 1, 28, 29, 16, 17, 18, 19, 20, 30, 31, 23, 24, 32], [11, 12, 13, 14, 1, 28, 29, 16, 17, 18, 19, 20, 30, 31, 23, 24, 32, 33]]"
        }
    },
    {
        "code": "find Path -type d -name Regex -execdir tar -c -v -f File File \\;",
        "text": "find all director i name number in current director i tree and c re at a tar archiv of regex sub director i ..",
        "id": 906,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', '-', 'exec', 'dir', 'tar', '-', 'c', '-', 'v', '-', 'f', 'file', 'file', '\\\\', ';', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 12, 13, 13, 14]]",
            "sibling_edges": "[[14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 19, 22, 23, 26, 28, 30, 34], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 20, 23, 24, 27, 29, 31, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]]"
        }
    },
    {
        "code": "find Path -type d -exec chmod Permission {} \\;",
        "text": "c hang per miss of all director i in current folder ..",
        "id": 907,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 15, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 16, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -name Regex -type d",
        "text": "look for director i regex ..",
        "id": 908,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'd', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -name Regex -maxdepth Quantity -exec rm -f {} \\;",
        "text": "de let file contain white spa c without recur ..",
        "id": 909,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'max', 'depth', 'quantity', '-', 'exec', 'rm', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 24, 25]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 25, 12, 15, 16, 19, 22, 24, 26], [1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 13, 16, 17, 20, 23, 25, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 26, 27]]"
        }
    },
    {
        "code": "find Path -name Regex \\( -exec echo {} \\; -or -exec true \\; \\) -exec grep Regex {} \\;",
        "text": "construct with add it regex to be use if both command need to run regardless of success or failur ..",
        "id": 910,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '\\\\', '(', '-', 'exec', 'echo', 'word', 'word', '\\\\', ';', '-', 'or', '-', 'exec', 'true', '\\\\', ';', '\\\\', ')', '-', 'exec', 'grep', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 0, 0, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 13, 14, 15, 0, 0, 16, 16, 17, 27, 28, 44, 45]]",
            "sibling_edges": "[[17, 1, 2, 3, 4, 5, 6, 28, 7, 8, 9, 10, 11, 12, 13, 14, 15, 45, 19, 22, 24, 27, 29, 31, 33, 36, 38, 40, 44, 46], [1, 2, 3, 4, 5, 6, 27, 7, 8, 9, 10, 11, 12, 13, 14, 15, 44, 16, 20, 23, 25, 28, 30, 32, 34, 37, 39, 41, 45, 47]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[48, 18, 19, 20, 21, 22, 23, 24, 25, 26, 49, 50, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 52, 46], [18, 19, 20, 21, 22, 23, 24, 25, 26, 49, 50, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 52, 46, 47]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i file ..",
        "id": 911,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -n Quantity -I {} dirname {} | sort | uniq",
        "text": "find all file file and director i in en ti r file system and print sort and uni qu p be not director i path ..",
        "id": 912,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'dir', 'name', 'word', 'word', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}', 'sort', 'uni', 'q']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 9, 9, 10, 11, 11, 0, 0, 12, 12, 0, 0, 0, 0, 13, 21, 21, 29, 30, 33, 34, 35, 36, 36]]",
            "sibling_edges": "[[7, 1, 34, 2, 35, 3, 13, 4, 5, 6, 21, 8, 9, 10, 11, 30, 12, 15, 18, 19, 22, 24, 27, 29, 31, 33, 38, 45], [1, 21, 2, 35, 3, 36, 4, 5, 6, 7, 8, 9, 10, 11, 29, 12, 33, 16, 19, 20, 23, 25, 28, 30, 32, 34, 39, 46]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[37, 14, 15, 16, 17, 18, 19, 20, 1, 38, 39, 22, 23, 24, 25, 26, 27, 28, 40, 41, 31, 32, 42, 43, 2, 44, 3, 45], [14, 15, 16, 17, 18, 19, 20, 1, 38, 39, 22, 23, 24, 25, 26, 27, 28, 40, 41, 31, 32, 42, 43, 2, 44, 3, 45, 46]]"
        }
    },
    {
        "code": "find Path -type d ! -name Regex",
        "text": "display all file in current folder excl ud director i aa ..",
        "id": 913,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '!', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 13], [1, 2, 3, 4, 5, 6, 10, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 9, 10, 11, 12, 13, 14], [8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "cd $( readlink File )",
        "text": "c hang director i to real path of current work director i of process regex ..",
        "id": 914,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'cd', 'word', 'word', 'file', 'read', 'link']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 1, 0, 0, 5, 6, 6]]",
            "sibling_edges": "[[1, 2, 5, 6, 8], [2, 6, 3, 5, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 8, 9, 7], [2, 8, 9, 7, 3]]"
        }
    },
    {
        "code": "find Path -atime -Timespan",
        "text": "search for file that be access le than time span ago ..",
        "id": 915,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'a', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -name Regex -printf \"%f\\n\"",
        "text": "display all text file in current folder ..",
        "id": 916,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'raw_string', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'f', \"'\", '%', 'f', \"'\", 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14, 15, 16], [1, 2, 3, 4, 5, 9, 12, 13, 15, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "tail -n 1 $file | tee >(wc -c | xargs -I {} truncate $file -s -{})",
        "text": "t run cat file regex r emo v last line from it and print file on stdout ..",
        "id": 917,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'number', 'word', '-', 'n', '<number>', '$', 'variable_name', 'word', '>(', ')', 'tail', 'file', 'tee', '|', 'word', 'word', 'word', 'word', 'word', '-', 'c', 'word', '-', 'i', 'word', 'word', 'truncate', '$', 'variable_name', '-', 's', 'word', 'word', 'word', 'wc', 'x', 'arg', '{', '}', 'file', '-', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 4, 9, 10, 0, 0, 0, 0, 0, 0, 17, 17, 0, 18, 18, 0, 0, 19, 0, 0, 20, 20, 0, 0, 0, 21, 24, 24, 27, 28, 31, 34, 35, 36]]",
            "sibling_edges": "[[9, 1, 4, 2, 3, 10, 5, 8, 11, 36, 17, 16, 21, 24, 18, 28, 19, 31, 20, 22, 25, 27, 30, 32, 34, 35, 38], [1, 10, 2, 3, 8, 11, 6, 9, 21, 12, 16, 24, 17, 18, 27, 19, 30, 20, 34, 23, 26, 28, 31, 33, 35, 36, 39]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 5, 6, 7, 8, 14, 1, 15, 11, 37, 22, 23, 16, 38, 39, 25, 26, 40, 41, 29, 30, 42, 32, 33, 43, 44, 45], [5, 6, 7, 8, 14, 1, 15, 11, 37, 22, 23, 16, 38, 39, 25, 26, 40, 41, 29, 30, 42, 32, 33, 43, 44, 45, 12]]"
        }
    },
    {
        "code": "find Path -mtime -Timespan",
        "text": "find all file and director i under file director i tree which be mod if i within time span ..",
        "id": 918,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "md5sum File",
        "text": "print regex me sag digest of file ..",
        "id": 919,
        "graph": {
            "nodes": "['command', 'word', 'word', 'file', 'md', '<number>', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 1, 2, 2, 2]]",
            "sibling_edges": "[[2, 4, 5], [1, 5, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 6], [5, 6, 3]]"
        }
    },
    {
        "code": "bar file1 | wc -l",
        "text": "count line in file regex and show progress bar while ..",
        "id": 920,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'file', '<number>', 'word', '-', 'l', 'bar', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 2, 2, 0, 3, 3, 4, 7]]",
            "sibling_edges": "[[2, 1, 4, 7, 5, 8], [1, 7, 2, 3, 6, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 1, 11, 8], [5, 6, 1, 11, 8, 9]]"
        }
    },
    {
        "code": "find /stuff -type d -printf %P\\0 | xargs -0 script.py",
        "text": "search for all director i in a folder and limit search to current folder and give them as input to python script ..",
        "id": 921,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', '/', 'stuff', '-', 'type', 'd', '-', 'print', 'f', '%', 'p', '\\\\', '<number>', 'word', '-', '<number>', 'script', '.', 'py', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 0, 7, 7, 8, 8, 8, 9, 22, 22]]",
            "sibling_edges": "[[6, 1, 9, 2, 3, 4, 5, 22, 7, 10, 12, 15, 16, 18, 19, 20, 23, 25, 26, 29], [1, 22, 2, 3, 4, 5, 6, 7, 8, 11, 13, 16, 17, 19, 20, 21, 24, 26, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 29, 30, 23, 24, 25, 26], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 29, 30, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "yes | tr \\n x | head -c $BYTES | pv | grep n",
        "text": "use regex amount of ram show current and total rate of consumpt ..",
        "id": 922,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'x', 'word', '-', 'c', '$', 'variable_name', 'word', 'word', 'n', 'yes', 'tr', 'head', 'byte', 'pv', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 6, 0, 0, 0, 0, 7, 8, 9, 11, 15, 16, 17]]",
            "sibling_edges": "[[8, 1, 5, 2, 15, 3, 16, 4, 9, 11, 6, 17, 12, 14], [1, 9, 2, 11, 3, 16, 4, 17, 5, 6, 14, 7, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 1, 20, 10, 2, 21, 12, 13, 14, 22, 3, 23, 4, 24], [1, 20, 10, 2, 21, 12, 13, 14, 22, 3, 23, 4, 24, 18]]"
        }
    },
    {
        "code": "info Regex Regex Regex Regex Regex",
        "text": "open menu item regex regex regex regex regex regex regex in regex manual ..",
        "id": 923,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'regex', 'regex', 'regex', 'regex', 'info']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4], [1, 2, 3, 4, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 7, 8, 9, 10], [7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path -name Regex -print",
        "text": "search en ti r file system for file file ..",
        "id": 924,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find Path Path Path -name Regex -type f | xargs -I {} chmod +Permission {}",
        "text": "set exe cut bite for all user on all file script from director i tree lib etc debian ..",
        "id": 925,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'path', 'path', '-', 'name', 'regex', '-', 'type', 'f', 'word', '-', 'i', 'word', 'word', 'ch', 'mod', '+', 'permission', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 5, 6, 7, 7, 8, 0, 9, 9, 0, 0, 10, 10, 11, 11, 0, 0, 12, 22, 22, 25, 26, 31, 32]]",
            "sibling_edges": "[[8, 1, 12, 2, 3, 4, 5, 6, 7, 22, 9, 26, 10, 11, 16, 19, 23, 25, 27, 29, 31, 34], [1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 25, 10, 11, 31, 17, 20, 24, 26, 28, 30, 32, 35]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 34, 35, 23, 24, 36, 37, 27, 28, 29, 30, 38], [13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 34, 35, 23, 24, 36, 37, 27, 28, 29, 30, 38, 39]]"
        }
    },
    {
        "code": "find . -exec myscript {} +",
        "text": "find all file and director i in current director i and exe cut myscript with minim invoc for those file and director i ..",
        "id": 926,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '.', '-', 'exec', 'myscript', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 1, 2, 2, 3, 0, 0, 4, 5, 10, 11]]",
            "sibling_edges": "[[5, 1, 2, 3, 11, 7, 10], [1, 2, 3, 10, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 14, 15], [6, 7, 8, 9, 14, 15, 12]]"
        }
    },
    {
        "code": "jobs -s -l | awk Program",
        "text": "print all pi d of stop process ..",
        "id": 927,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 's', '-', 'l', 'word', 'program', 'job', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 4, 5, 10, 10]]",
            "sibling_edges": "[[3, 1, 5, 2, 10, 6, 8, 13], [1, 10, 2, 3, 4, 7, 9, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 1, 13, 14], [6, 7, 8, 9, 1, 13, 14, 11]]"
        }
    },
    {
        "code": "find Path -newermt $( date +%Y-%m-%d -d Regex ) -type f -print",
        "text": "print file file in time span ..",
        "id": 928,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'mt', '$(', ')', '-', 'type', 'f', '-', 'print', 'find', 'word', 'word', 'word', 'word', '+', '%', 'y', '-', '%', 'm', '-', '%', 'd', '-', 'd', 'regex', 'date']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 3, 3, 4, 5, 5, 6, 0, 0, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 21, 22]]",
            "sibling_edges": "[[6, 1, 2, 12, 3, 4, 8, 9, 11, 21, 13, 16, 22, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32], [1, 2, 11, 3, 4, 5, 9, 10, 22, 12, 14, 17, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 33]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 10, 11, 35, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 12, 13, 14, 15, 16], [7, 8, 9, 10, 11, 35, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "cat File | xargs -I {} -d Regex -n Quantity grep -r {}",
        "text": "recur find string in all file under current director i that match with comma se par pattern list in file regex ..",
        "id": 929,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'file', 'word', '-', 'i', 'word', 'word', '-', 'd', 'regex', '-', 'n', 'quantity', 'grep', '-', 'r', 'word', 'word', 'cat', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 4, 4, 5, 6, 6, 7, 8, 9, 9, 0, 0, 10, 12, 12, 15, 16, 26, 27]]",
            "sibling_edges": "[[2, 1, 10, 12, 3, 16, 4, 5, 6, 7, 8, 9, 13, 15, 17, 20, 24, 26, 29], [1, 12, 2, 3, 15, 4, 5, 6, 7, 8, 9, 26, 14, 16, 18, 21, 25, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 11, 1, 29, 30, 13, 14, 31, 32, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33], [11, 1, 29, 30, 13, 14, 31, 32, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34]]"
        }
    },
    {
        "code": "find /etc -type f | xargs --max-lines=1 -r --max-procs=20 ./do1.sh",
        "text": "exe cut script file on each regular file from file director i tree ..",
        "id": 930,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'etc', '-', 'type', 'f', 'word', '--', 'max', '-', 'line', '=', '<number>', '-', 'r', '--', 'max', '-', 'procs', '=', '<number>', '.', '/', 'do1', '.', 'sh', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 0, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 15, 15]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 15, 5, 6, 7, 10, 12, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36], [1, 15, 2, 3, 4, 5, 6, 7, 8, 11, 13, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 10, 11, 12, 13, 14, 1, 36, 37, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [10, 11, 12, 13, 14, 1, 36, 37, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]]"
        }
    },
    {
        "code": "find Path -type f Path | grep -v Regex",
        "text": "find writ a bl regular file omit those that contain file in name ..",
        "id": 931,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'path', 'word', '-', 'v', 'regex', 'find', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 0, 6, 6, 7, 8, 14]]",
            "sibling_edges": "[[5, 1, 8, 2, 3, 4, 14, 6, 10, 15], [1, 14, 2, 3, 4, 5, 6, 7, 11, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 9, 10, 11, 12, 13, 1, 19, 15, 16], [9, 10, 11, 12, 13, 1, 19, 15, 16, 17]]"
        }
    },
    {
        "code": "find Path -mindepth Quantity -type f",
        "text": "find all file under minimum number level down current director i ..",
        "id": 932,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'min', 'depth', 'quantity', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 9, 12], [1, 2, 3, 4, 5, 9, 10, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "find Path -name Regex -print -or -name Regex -print",
        "text": "display all header file and file file in current folder ..",
        "id": 933,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '-', 'or', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 11, 14, 16, 18, 21], [1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 17, 19, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]"
        }
    },
    {
        "code": "history | grep Regex",
        "text": "search for regex in hist or i ..",
        "id": 934,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'regex', 'history', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 0, 2, 3, 4]]",
            "sibling_edges": "[[3, 1, 4], [1, 4, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 1, 7], [1, 7, 5]]"
        }
    },
    {
        "code": "find Path -exec chmod Permission {} \\;",
        "text": "set read write and exe cut per miss for all for file and director i in foldernam director i tree ..",
        "id": 935,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 0, 0, 5, 5, 6, 13, 14]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 14, 8, 10, 13, 15], [1, 2, 3, 4, 13, 5, 9, 11, 14, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 7, 8, 9, 10, 11, 12, 18, 19, 15], [7, 8, 9, 10, 11, 12, 18, 19, 15, 16]]"
        }
    },
    {
        "code": "find Path -name Regex -type f",
        "text": "search file director i recur for regular file name regex ..",
        "id": 936,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "env | uniq | sort -r | grep Regex",
        "text": "show all v aria bl who be e name or val u contain regex sort in revers alphabet order ..",
        "id": 937,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', '-', 'r', 'word', 'regex', 'env', 'uni', 'q', 'sort', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 5, 6, 7, 7, 8, 11]]",
            "sibling_edges": "[[6, 1, 7, 2, 4, 3, 8, 11, 9, 14], [1, 7, 2, 8, 3, 11, 4, 5, 10, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 1, 14, 15, 2, 16, 9, 10, 3, 17], [1, 14, 15, 2, 16, 9, 10, 3, 17, 12]]"
        }
    },
    {
        "code": "(find . -type f -ctime $FTIME && find . -type f -atime $FTIME && find . -type f -mtime $FTIME) | sort | uniq",
        "text": "list file under current director i which be mod if i access or who be e status be c hang regex ago and sort them and r emo v dup li c en tr i ..",
        "id": 938,
        "graph": {
            "nodes": "['pipeline', '|', '|', '(', ')', '&&', 'word', 'word', '&&', 'word', 'word', 'word', 'word', 'sort', 'uni', 'q', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'm', 'time', '$', 'variable_name', 'word', '.', '-', 'type', 'f', '-', 'c', 'time', '$', 'variable_name', 'word', '.', '-', 'type', 'f', '-', 'a', 'time', '$', 'variable_name', 'find', 'ftime', 'find', 'ftime', 'find', 'ftime']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 10, 11, 12, 12, 12, 0, 0, 0, 16, 17, 17, 18, 19, 19, 19, 0, 0, 0, 20, 21, 21, 22, 23, 23, 23, 0, 0, 24, 33, 34, 43, 44, 53]]",
            "sibling_edges": "[[4, 1, 6, 2, 3, 33, 53, 5, 43, 8, 24, 9, 10, 11, 12, 14, 34, 16, 17, 18, 19, 44, 20, 21, 22, 23, 26, 29, 30, 32, 36, 39, 40, 42, 46, 49, 50, 52], [1, 6, 2, 7, 34, 4, 5, 24, 8, 44, 9, 10, 11, 12, 32, 15, 16, 17, 18, 19, 42, 20, 21, 22, 23, 52, 27, 30, 31, 33, 37, 40, 41, 43, 47, 50, 51, 53]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[3, 56, 35, 36, 37, 38, 39, 40, 41, 42, 57, 8, 58, 45, 46, 47, 48, 49, 50, 51, 52, 59, 5, 54, 25, 26, 27, 28, 29, 30, 31, 32, 55, 4, 1, 13, 2, 14], [56, 35, 36, 37, 38, 39, 40, 41, 42, 57, 8, 58, 45, 46, 47, 48, 49, 50, 51, 52, 59, 5, 54, 25, 26, 27, 28, 29, 30, 31, 32, 55, 4, 1, 13, 2, 14, 15]]"
        }
    },
    {
        "code": "brew info grc",
        "text": "display inform about src formula ..",
        "id": 939,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'info', 'grc', 'brew']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "sort File | rev | uniq -f Quantity | rev",
        "text": "sort file ig nor last number char act of each line ..",
        "id": 940,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'file', 'word', 'word', '-', 'f', 'quantity', 'word', 'sort', 'rev', 'uni', 'q', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 5, 6, 0, 7, 9, 10, 10, 14]]",
            "sibling_edges": "[[4, 1, 9, 2, 6, 3, 7, 10, 5, 11, 17], [1, 9, 2, 10, 3, 14, 4, 5, 6, 12, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 8, 1, 16, 2, 17, 18, 11, 12, 13, 3], [8, 1, 16, 2, 17, 18, 11, 12, 13, 3, 19]]"
        }
    },
    {
        "code": "pushd $( dirname $( which Regex ) )",
        "text": "push director i contain first exist command find in all argument to director i stack ..",
        "id": 941,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'push', 'd', 'word', '$(', ')', 'dir', 'name', 'word', 'word', 'regex', 'which']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 1, 1, 0, 0, 0, 6, 6, 0, 0, 11, 12]]",
            "sibling_edges": "[[1, 2, 8, 4, 6, 7, 11, 9, 12], [2, 6, 3, 5, 7, 12, 8, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 2, 9, 10, 7, 14, 13, 8], [5, 2, 9, 10, 7, 14, 13, 8, 3]]"
        }
    },
    {
        "code": "find Path -perm -Permission",
        "text": "find all file on system that be world writeabl ..",
        "id": 942,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', '-', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 8], [1, 2, 3, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path $( uname -r ) -regex Regex",
        "text": "find all loadabl modul for current kernel who be e name incl ud regex ..",
        "id": 943,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '$(', ')', '-', 'regex', 'regex', 'find', 'word', 'word', '-', 'r', 'u', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 1, 0, 0, 2, 2, 3, 4, 0, 0, 12, 12, 13, 13]]",
            "sibling_edges": "[[4, 1, 7, 2, 6, 12, 8, 13, 14, 16], [1, 6, 2, 3, 13, 7, 9, 12, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 16, 17, 14, 15, 7, 8, 9], [5, 6, 16, 17, 14, 15, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "join <( sort File ) <( sort File ) | sort -k Number",
        "text": "join line in file regex with line in file regex if line share a common first word and sort result num er ..",
        "id": 944,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', '<(', ')', '<(', ')', 'word', '-', 'k', 'number', 'join', 'word', 'word', 'sort', 'word', 'file', 'word', 'file', 'sort', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 0, 0, 9, 0, 14, 0, 15, 17, 19]]",
            "sibling_edges": "[[8, 1, 4, 6, 9, 2, 5, 14, 7, 15, 10, 17, 19], [1, 9, 5, 7, 2, 3, 17, 6, 19, 8, 11, 14, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 5, 21, 18, 6, 7, 22, 20, 8, 1, 16, 10, 11], [5, 21, 18, 6, 7, 22, 20, 8, 1, 16, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find all file call file that re id under and below directory ..",
        "id": 945,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "cd Directory",
        "text": "go to file director i ..",
        "id": 946,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'cd']",
            "base_edges": "[[1, 2, 3, 4], [0, 0, 1, 2]]",
            "sibling_edges": "[[2], [1]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4], [3]]"
        }
    },
    {
        "code": "less $( find Path -maxdepth Quantity -type f -daystart -mtime -Timespan )",
        "text": "show file in maximum number level down current director i that be mod if i le than time span ago from date time ..",
        "id": 947,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'le', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'type', 'f', '-', 'day', 'start', '-', 'm', 'time', '-', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 6, 7, 8, 8, 9, 10, 10, 10, 11, 11, 11, 12, 12, 13]]",
            "sibling_edges": "[[1, 2, 12, 13, 5, 6, 7, 8, 9, 10, 11, 15, 16, 19, 22, 23, 25, 26, 28], [2, 13, 3, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 20, 23, 24, 26, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 30, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [2, 30, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3]]"
        }
    },
    {
        "code": "wc $( find Path -name Regex )",
        "text": "print new l in word and byte count for all file file file file and file file under current director i tree and also show total count ..",
        "id": 948,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'wc', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 1, 0, 0, 0, 0, 5, 6, 6, 7, 8]]",
            "sibling_edges": "[[1, 2, 7, 8, 5, 6, 10], [2, 8, 3, 5, 6, 7, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 13, 9, 10, 11, 12], [2, 13, 9, 10, 11, 12, 3]]"
        }
    },
    {
        "code": "find . -type f -name *.ext $(printf ! -name %s  $(cat list.txt))",
        "text": "display file end with file in current folder excl ud those that be present in list file ..",
        "id": 949,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', '.', '-', 'type', 'f', '-', 'name', '*', '.', 'ext', '$(', ')', 'find', 'word', 'word', 'word', 'word', '!', '-', 'name', '%', 's', '$(', ')', 'print', 'f', 'word', 'word', 'list', '.', 'txt', 'cat']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 19, 20, 20, 21, 21, 0, 0, 22, 22, 0, 0, 32, 32, 32, 33]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 5, 8, 11, 13, 14, 16, 29, 22, 19, 20, 21, 24, 26, 28, 32, 30, 33, 34, 35], [1, 2, 3, 4, 5, 16, 9, 12, 14, 15, 22, 17, 19, 20, 21, 28, 25, 27, 33, 29, 31, 32, 35, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 30, 31, 23, 24, 25, 26, 27, 28, 37, 34, 35, 36, 29], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 30, 31, 23, 24, 25, 26, 27, 28, 37, 34, 35, 36, 29, 17]]"
        }
    },
    {
        "code": "dig Regex Regex | awk Program",
        "text": "print all ns server of domain file ..",
        "id": 950,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'regex', 'regex', 'word', 'program', 'dig', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 3, 0, 4, 5, 8, 8]]",
            "sibling_edges": "[[3, 1, 5, 2, 8, 11], [1, 8, 2, 3, 4, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 6, 7, 1, 11, 12], [6, 7, 1, 11, 12, 9]]"
        }
    },
    {
        "code": "find Path -type f -print0 | xargs -0 -I {} chmod Permission {}",
        "text": "find all file under file and c hang per miss to number ..",
        "id": 951,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'ch', 'mod', 'permission', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 0, 0, 8, 8, 9, 0, 0, 10, 18, 18, 23, 24, 28, 29]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 18, 6, 7, 24, 8, 9, 12, 15, 16, 19, 21, 23, 25, 28, 31], [1, 18, 2, 3, 4, 5, 6, 7, 23, 8, 9, 28, 13, 16, 17, 20, 22, 24, 26, 29, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 11, 12, 13, 14, 15, 16, 17, 1, 31, 32, 19, 20, 21, 22, 33, 34, 25, 26, 27, 35], [11, 12, 13, 14, 15, 16, 17, 1, 31, 32, 19, 20, 21, 22, 33, 34, 25, 26, 27, 35, 36]]"
        }
    },
    {
        "code": "su - username command",
        "text": "run command regex as user user n be with a full login simul ..",
        "id": 952,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'username', 'command', 'su']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2], [1, 2, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 5, 6], [5, 6, 7]]"
        }
    },
    {
        "code": "find Path -type d -name Regex -exec rm -r -f {} \\;",
        "text": "find all director i with name regex in current folder and f orc de let them ..",
        "id": 953,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'name', 'regex', '-', 'exec', 'rm', '-', 'r', '-', 'f', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 0, 0, 10, 10, 11, 26, 27]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 13, 16, 19, 22, 24, 26, 28], [1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 14, 17, 20, 23, 25, 27, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 28, 29]]"
        }
    },
    {
        "code": "find /. -name toBeSearched.file 2>/dev/null",
        "text": "find a file in current folder and discard error ..",
        "id": 954,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'file_descriptor', '>', 'word', 'word', '/', '.', '-', 'name', 'tobesearched', '.', 'file', '<number>', '/', 'dev', '/', 'null', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 6, 6, 6, 6, 7]]",
            "sibling_edges": "[[3, 7, 1, 2, 4, 5, 8, 10, 12, 13, 16, 17, 18], [4, 1, 2, 3, 5, 6, 9, 11, 13, 14, 17, 18, 19]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 14, 15, 5, 16, 17, 18], [8, 9, 10, 11, 12, 13, 14, 15, 5, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "dig Regex -f File",
        "text": "read lookup request from text file file and use them to fetch file record ..",
        "id": 955,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'regex', '-', 'f', 'file', 'dig']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -name Regex -print0 | xargs -0 -n Quantity -I {} mv {} File",
        "text": "move all file file from current director i tree to directory ..",
        "id": 956,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'n', 'quantity', '-', 'i', 'word', 'word', 'mv', 'word', 'word', 'file', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 0, 6, 6, 7, 7, 8, 9, 9, 0, 0, 10, 0, 0, 11, 12, 20, 20, 28, 29, 31, 32]]",
            "sibling_edges": "[[5, 1, 12, 2, 3, 4, 20, 6, 7, 8, 9, 29, 10, 32, 14, 17, 18, 21, 23, 26, 28, 31, 35], [1, 20, 2, 3, 4, 5, 6, 7, 8, 9, 28, 10, 31, 11, 15, 18, 19, 22, 24, 27, 29, 32, 36]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[34, 13, 14, 15, 16, 17, 18, 19, 1, 35, 36, 21, 22, 23, 24, 25, 26, 27, 37, 38, 30, 39, 40], [13, 14, 15, 16, 17, 18, 19, 1, 35, 36, 21, 22, 23, 24, 25, 26, 27, 37, 38, 30, 39, 40, 33]]"
        }
    },
    {
        "code": "find Path -type f -print | sed Program",
        "text": "find all file under current director i and rep lac match of regex file with regex in ever i line of output ..",
        "id": 957,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'print', 'word', 'program', 'find', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 0, 6, 7, 14, 14]]",
            "sibling_edges": "[[5, 1, 7, 2, 3, 4, 14, 9, 12, 17], [1, 14, 2, 3, 4, 5, 6, 10, 13, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 9, 10, 11, 12, 13, 1, 17, 18], [8, 9, 10, 11, 12, 13, 1, 17, 18, 15]]"
        }
    },
    {
        "code": "find / -name grub.conf >& /dev/null",
        "text": "find file file in en ti r file system discard error in csh or tcsh shell ..",
        "id": 958,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', '>&', 'word', 'word', '/', '-', 'name', 'grub', '.', 'conf', '/', 'dev', '/', 'null', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 5, 5, 5, 5, 6]]",
            "sibling_edges": "[[3, 6, 1, 2, 4, 8, 10, 11, 13, 14, 15], [4, 1, 2, 3, 5, 9, 11, 12, 14, 15, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 7, 8, 9, 10, 11, 12, 4, 13, 14, 15], [7, 8, 9, 10, 11, 12, 4, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path | cpio -p -m -u -d Regex",
        "text": "cop i all file uncondit and director i in director i tree regex to regex pre serv director i hi er arch i and mod if time ..",
        "id": 959,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', 'word', '-', 'p', '-', 'm', '-', 'u', '-', 'd', 'regex', 'find', 'cp', 'io']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 10, 10]]",
            "sibling_edges": "[[2, 1, 8, 10, 3, 4, 5, 6, 11, 13, 15, 17, 21], [1, 10, 2, 3, 4, 5, 6, 7, 12, 14, 16, 18, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 9, 1, 21, 22, 11, 12, 13, 14, 15, 16, 17, 18], [9, 1, 21, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "find all regex regex regular file under current director i ..",
        "id": 960,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "find Path -type f -name Regex | awk Program | bash",
        "text": "convert file file to file file use regex ..",
        "id": 961,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'word', 'program', 'word', 'find', 'a', 'wk', 'bash']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 6, 7, 0, 8, 0, 9, 17, 17, 19]]",
            "sibling_edges": "[[7, 1, 8, 2, 9, 3, 4, 5, 6, 17, 11, 14, 21], [1, 17, 2, 19, 3, 4, 5, 6, 7, 8, 12, 15, 22]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 10, 11, 12, 13, 14, 15, 16, 1, 21, 22, 18, 2], [10, 11, 12, 13, 14, 15, 16, 1, 21, 22, 18, 2, 23]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan",
        "text": "find ever i file under director i file that be mod if i more than time span ago ..",
        "id": 962,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 9], [1, 2, 3, 7, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find $dir -type f | wc -l); if [ $n -gt 0 ]; then printf %4d : %s\\n $n $dir; fi; done",
        "text": "find list of director i with non zero file count ..",
        "id": 963,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'number', 'word', 'word', 'while', ';', 'word', '-', 'max', 'depth', '<number>', '-', 'type', 'd', 'word', 'word', 'word', 'do', ';', ';', 'done', 'find', 'sort', 'word', '-', 'r', 'dir', 'variable_name', '=', 'if', ';', 'then', ';', 'fi', 'read', 'n', '$(', ')', '[', ']', 'word', 'word', 'word', '|', 'test_operator', 'number', 'word', '%', '4d', ':', '%', 's', '$', 'variable_name', '$', 'variable_name', 'word', 'word', 'word', '$', 'variable_name', '-', 'gt', '<number>', 'print', 'f', 'n', 'dir', 'word', '$', 'variable_name', '-', 'type', 'f', 'word', '-', 'l', 'n', 'find', 'dir', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 4, 5, 5, 6, 0, 0, 0, 0, 0, 0, 0, 9, 17, 0, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 26, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 43, 44, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 48, 49, 49, 56, 58, 0, 0, 0, 59, 59, 60, 0, 61, 61, 63, 71, 73, 77]]",
            "sibling_edges": "[[6, 1, 17, 2, 9, 3, 4, 5, 7, 19, 8, 10, 11, 14, 26, 18, 20, 40, 21, 36, 22, 27, 30, 31, 32, 42, 33, 34, 58, 35, 39, 61, 41, 48, 49, 43, 44, 45, 56, 60, 46, 63, 47, 50, 53, 55, 57, 71, 73, 59, 77, 62, 64, 67, 72, 74, 78], [1, 17, 2, 7, 3, 4, 5, 6, 26, 8, 20, 11, 12, 15, 18, 19, 30, 21, 32, 22, 23, 28, 31, 39, 41, 33, 34, 49, 35, 36, 71, 40, 62, 42, 43, 44, 45, 55, 57, 46, 77, 47, 48, 51, 54, 56, 58, 72, 59, 60, 61, 63, 65, 68, 73, 75, 79]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 10, 11, 12, 13, 14, 15, 16, 1, 25, 2, 7, 37, 27, 28, 29, 8, 20, 38, 31, 39, 81, 72, 82, 74, 75, 76, 46, 83, 78, 79, 40, 21, 32, 41, 62, 80, 64, 65, 66, 42, 33, 34, 67, 68, 50, 51, 52, 53, 54, 55, 69, 57, 70, 35, 36, 22], [10, 11, 12, 13, 14, 15, 16, 1, 25, 2, 7, 37, 27, 28, 29, 8, 20, 38, 31, 39, 81, 72, 82, 74, 75, 76, 46, 83, 78, 79, 40, 21, 32, 41, 62, 80, 64, 65, 66, 42, 33, 34, 67, 68, 50, 51, 52, 53, 54, 55, 69, 57, 70, 35, 36, 22, 23]]"
        }
    },
    {
        "code": "who | awk Program | sed -e Program",
        "text": "print login inform of all user except first number and rep lac all inst an c of regex with regex ..",
        "id": 964,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'program', 'word', '-', 'e', 'program', 'who', 'a', 'wk', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 6, 7, 7, 9, 9]]",
            "sibling_edges": "[[6, 1, 3, 2, 7, 9, 4, 10, 14, 16], [1, 7, 2, 9, 3, 4, 5, 11, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 1, 14, 15, 8, 2, 16, 17, 10, 11], [1, 14, 15, 8, 2, 16, 17, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -name Regex -type f -exec chmod Permission {} \\;",
        "text": "c hang per miss to number for file file under file ..",
        "id": 965,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'type', 'f', '-', 'exec', 'ch', 'mod', 'permission', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 20, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 21, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find . -name *.txt | while IFS= read -r FILE; do echo Copying $FILE..; cp $FILE /destination; done",
        "text": "cop i all file file from current director i tree to file ..",
        "id": 966,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'while', ';', 'word', '.', '-', 'name', '*', '.', 'txt', 'word', 'word', 'do', ';', ';', 'done', 'find', 'variable_name', '=', 'word', '-', 'r', 'file', 'word', 'word', 'ifs', 'read', 'word', 'copy', 'word', 'word', '$', 'variable_name', '/', 'destination', 'echo', '$', 'variable_name', '..', 'cp', 'file', 'file']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 14, 14, 15, 0, 0, 21, 23, 0, 27, 0, 0, 0, 0, 28, 28, 31, 0, 0, 33, 34, 36, 41]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 5, 15, 6, 9, 11, 12, 22, 23, 14, 16, 33, 17, 28, 18, 21, 24, 31, 27, 34, 36, 41, 35, 37, 40], [1, 5, 2, 3, 4, 21, 6, 16, 10, 12, 13, 23, 14, 15, 31, 17, 34, 18, 19, 22, 25, 27, 40, 35, 28, 33, 36, 38, 41]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 8, 9, 10, 11, 12, 13, 1, 5, 29, 22, 30, 24, 25, 26, 6, 16, 39, 32, 40, 45, 42, 17, 43, 35, 44, 37, 38, 18], [8, 9, 10, 11, 12, 13, 1, 5, 29, 22, 30, 24, 25, 26, 6, 16, 39, 32, 40, 45, 42, 17, 43, 35, 44, 37, 38, 18, 19]]"
        }
    },
    {
        "code": "find Path -type f -empty",
        "text": "display all e mp ti file in folder file ..",
        "id": 967,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'empty', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find . -user <userid>",
        "text": "get list of file own by regex ..",
        "id": 968,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', '<', 'word', '>', 'word', 'word', '.', '-', 'user', 'user', 'id', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 4, 4, 7]]",
            "sibling_edges": "[[2, 4, 7, 1, 3, 5, 9, 11], [3, 5, 1, 2, 4, 6, 10, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 8, 9, 10, 3, 11, 12, 5], [8, 9, 10, 3, 11, 12, 5, 6]]"
        }
    },
    {
        "code": "find Path -name Regex -delete",
        "text": "r emo v all file file from current director i tree ..",
        "id": 969,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'delete', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 7, 10], [1, 2, 3, 4, 8, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 8, 9, 10], [6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "find . -type f -wholename *.mbox -print0 | parallel -0 mv {} {.}",
        "text": "find regular file under current director i who be e name end in file pipe output to gnu parallel command that will r en be each file to not a file ext en ..",
        "id": 970,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', '.', '-', 'type', 'f', '-', 'whole', 'name', '*', '.', 'mbox', '-', 'print', '<number>', 'word', '-', '<number>', 'mv', 'word', 'word', 'word', 'word', 'word', 'find', 'parallel', '{', '}', '{', '.', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 0, 8, 8, 9, 0, 0, 0, 0, 0, 10, 24, 28, 29, 30, 31, 32]]",
            "sibling_edges": "[[7, 1, 10, 2, 3, 4, 5, 6, 24, 8, 9, 29, 12, 15, 16, 18, 19, 21, 22, 25, 28, 30, 31], [1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 28, 30, 13, 16, 17, 19, 20, 22, 23, 26, 29, 31, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 34, 25, 26, 27, 35, 36, 37, 38], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 34, 25, 26, 27, 35, 36, 37, 38, 39]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex \\) -print0 | xargs -0 -I {} wc {}",
        "text": "count line of file or regex or obj c or file code under current director i ..",
        "id": 971,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'wc', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 18, 18, 19, 19, 19, 0, 20, 20, 21, 21, 0, 0, 22, 0, 0, 23, 55, 55, 60, 61, 63, 64]]",
            "sibling_edges": "[[19, 1, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 55, 20, 21, 61, 22, 25, 27, 30, 32, 35, 37, 40, 42, 45, 47, 50, 52, 53, 56, 58, 60, 63, 66], [1, 55, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 60, 22, 63, 26, 28, 31, 33, 36, 38, 41, 43, 46, 48, 51, 53, 54, 57, 59, 61, 64, 67]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[65, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 1, 66, 67, 56, 57, 58, 59, 68, 69, 62, 70], [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 1, 66, 67, 56, 57, 58, 59, 68, 69, 62, 70, 71]]"
        }
    },
    {
        "code": "find `gen_root_dirs.sh` -type f -size 0 -ls",
        "text": "list all file which size size in some director i ..",
        "id": 972,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'number', 'word', 'word', '`', '`', '-', 'type', 'f', '-', 'size', '<number>', '-', 'ls', 'find', 'word', 'gen_root_dirs', '.', 'sh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 0, 18, 18, 18]]",
            "sibling_edges": "[[6, 8, 1, 2, 3, 4, 7, 18, 9, 12, 15, 19, 20], [7, 1, 2, 3, 4, 5, 18, 8, 10, 13, 16, 20, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 7, 19, 20, 21, 8, 9, 10, 11, 12, 13, 14, 15], [7, 19, 20, 21, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path ! -name Regex",
        "text": "find all file and director i that not contain regex in name under current director i tree ..",
        "id": 973,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'path', '!', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 8], [1, 2, 3, 4, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 9], [6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "alias -s py=$EDITOR",
        "text": "set alia file for command regex ..",
        "id": 974,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 's', 'word', 'alias', 'py', '=', '$', 'variable_name', 'editor']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 1, 1, 0, 2, 5, 5, 0, 0, 10]]",
            "sibling_edges": "[[2, 1, 3, 5, 7, 9], [1, 5, 4, 9, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 4, 7, 8, 9], [3, 4, 7, 8, 9, 11]]"
        }
    },
    {
        "code": "find Path -name Regex -print | xargs -I {} sed -i Program {}",
        "text": "rep lac regex with regex in all file file in current director i tree ..",
        "id": 975,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'print', 'word', '-', 'i', 'word', 'word', 's', 'ed', '-', 'i', 'program', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 0, 6, 6, 0, 0, 7, 7, 8, 8, 9, 0, 0, 10, 17, 17, 20, 21, 27, 28]]",
            "sibling_edges": "[[5, 1, 10, 2, 3, 4, 17, 6, 21, 7, 8, 9, 12, 15, 18, 20, 22, 24, 27, 30], [1, 17, 2, 3, 4, 5, 6, 20, 7, 8, 9, 27, 13, 16, 19, 21, 23, 25, 28, 31]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[29, 11, 12, 13, 14, 15, 16, 1, 30, 31, 18, 19, 32, 33, 22, 23, 24, 25, 26, 34], [11, 12, 13, 14, 15, 16, 1, 30, 31, 18, 19, 32, 33, 22, 23, 24, 25, 26, 34, 35]]"
        }
    },
    {
        "code": "find Path -fstype ext2 -name Regex -print",
        "text": "find file and director i name regex in regex partit in en ti r file system ..",
        "id": 976,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'fstype', 'ext2', '-', 'name', 'regex', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 15], [1, 2, 3, 4, 5, 6, 10, 13, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 14, 15], [8, 9, 10, 11, 12, 13, 14, 15, 16]]"
        }
    },
    {
        "code": "find Path -user Regex -iname Regex",
        "text": "search specif i user for give regex ..",
        "id": 977,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'user', 'regex', '-', 'i', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12], [1, 2, 3, 4, 5, 9, 12, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 7, 8, 9, 10, 11, 12, 13], [7, 8, 9, 10, 11, 12, 13, 14]]"
        }
    },
    {
        "code": "bind -p | grep -a Regex",
        "text": "filter output of bind regex by regex ..",
        "id": 978,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'p', 'word', '-', 'a', 'regex', 'bind', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 2, 0, 3, 3, 4, 5, 8]]",
            "sibling_edges": "[[2, 1, 5, 8, 3, 6, 9], [1, 8, 2, 3, 4, 7, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 6, 7, 1, 13, 9, 10], [6, 7, 1, 13, 9, 10, 11]]"
        }
    },
    {
        "code": "echo $( pwd ) | crontab",
        "text": "set a cron tab to c re at or up dat timestamp of regex in current director i ever i minut ..",
        "id": 979,
        "graph": {
            "nodes": "['pipeline', '|', 'word', '$(', ')', 'word', 'echo', 'cron', 'tab', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 0, 2, 5, 5, 0, 9]]",
            "sibling_edges": "[[4, 1, 2, 3, 9, 7], [1, 5, 3, 9, 4, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 10, 4, 1, 7], [3, 10, 4, 1, 7, 8]]"
        }
    },
    {
        "code": "mktemp -t Regex",
        "text": "c re at tempo rar i file by templat prov id in option regex ..",
        "id": 980,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 't', 'regex', 'mk', 'temp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "find Path -type f -size +Size | xargs -I {} du -s -h {}",
        "text": "show disk use of all regular file in current folder which be big than size ..",
        "id": 981,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'size', '+', 'size', 'word', '-', 'i', 'word', 'word', 'du', '-', 's', '-', 'h', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 6, 6, 0, 7, 7, 0, 0, 8, 9, 9, 10, 10, 0, 0, 11, 20, 20, 23, 24, 30, 31]]",
            "sibling_edges": "[[6, 1, 11, 2, 3, 4, 5, 20, 7, 24, 8, 9, 10, 13, 16, 18, 21, 23, 26, 28, 30, 33], [1, 20, 2, 3, 4, 5, 6, 7, 23, 8, 9, 10, 30, 14, 17, 19, 22, 24, 27, 29, 31, 34]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[32, 12, 13, 14, 15, 16, 17, 18, 19, 1, 33, 34, 21, 22, 35, 36, 25, 26, 27, 28, 29, 37], [12, 13, 14, 15, 16, 17, 18, 19, 1, 33, 34, 21, 22, 35, 36, 25, 26, 27, 28, 29, 37, 38]]"
        }
    },
    {
        "code": "find Path -maxdepth Quantity -name Regex -print0 | xargs -0 -I {} zcat {} | awk -F Regex Program",
        "text": "find file that end in file and exe cut regex on unzip content ..",
        "id": 982,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'max', 'depth', 'quantity', '-', 'name', 'regex', '-', 'print', '<number>', 'word', '-', '<number>', '-', 'i', 'word', 'word', 'z', 'cat', 'word', 'word', 'word', '-', 'f', 'regex', 'program', 'find', 'x', 'arg', '{', '}', '{', '}', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 8, 0, 9, 9, 10, 10, 0, 0, 11, 11, 0, 0, 0, 12, 12, 13, 14, 15, 27, 27, 32, 33, 36, 37, 38, 38]]",
            "sibling_edges": "[[8, 1, 37, 2, 15, 3, 4, 5, 6, 7, 27, 9, 10, 33, 11, 38, 12, 13, 17, 18, 21, 24, 25, 28, 30, 32, 34, 36, 39, 44, 50], [1, 27, 2, 38, 3, 4, 5, 6, 7, 8, 9, 10, 32, 11, 36, 12, 13, 14, 18, 19, 22, 25, 26, 29, 31, 33, 35, 37, 40, 45, 51]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 44, 45, 28, 29, 30, 31, 46, 47, 34, 35, 48, 49, 2, 50, 51, 39, 40, 41], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 44, 45, 28, 29, 30, 31, 46, 47, 34, 35, 48, 49, 2, 50, 51, 39, 40, 41, 42]]"
        }
    },
    {
        "code": "cal 02 2012|perl -F(.{1,3}) -anEBEGIN{$,=\"\\t&\";$\\=\"\\t\\\\\\\\\\n\"}$.==1||eof||do{$i//=@F;print@F[map{$_*2-1}(1..$i/2)]}",
        "text": "convert unix regex output to latex tab l code ..",
        "id": 983,
        "graph": {
            "nodes": "['program', ';', ';', '|', '$', '||', 'variable_name', 'word', '}', 'word', ')', 'word', '}', 'number', 'number', '-', '||', 'word', 'print', '@', 'f', '[', 'map', '{', '$', '_', '*', '<number>', '-', '<number>', '(', '<number>', '..', ']', 'word', '<number>', '<number>', 'word', 'raw_string', 'word', 'i', '//', '=', '@', 'f', 'word', 'cal', 'word', 'word', '(', ')', 'word', 'word', '$', ',', '=', \"'\", '\\\\', 't', '&', \"'\", '.', '=', '=', '<number>', 'word', 'word', 'word', '$', '$', 'variable_name', '/', '<number>', 'perl', '-', 'f', 'anebegin', '{', 'word', 'raw_string', 'word', '$', 'eof', 'do', '{', 'i', '\\\\', '=', \"'\", '\\\\', 't', '\\\\', \"'\", '}', 'word', 'word', 'word', 'word', '.', '{', '<number>', ',', '<number>', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 11, 0, 13, 14, 0, 0, 0, 17, 17, 17, 17, 17, 0, 34, 0, 0, 0, 0, 0, 0, 0, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 0, 0, 0, 0, 0, 0, 45, 45, 47, 48, 48, 51, 52, 0, 0, 0, 0, 65, 66, 67, 70, 78, 78, 79, 79, 79, 79, 79, 80, 0, 0, 0, 0, 94, 95, 96, 96, 96, 97]]",
            "sibling_edges": "[[38, 1, 4, 17, 2, 9, 45, 14, 3, 15, 65, 5, 6, 7, 8, 10, 11, 34, 13, 50, 53, 39, 16, 68, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 47, 48, 37, 81, 40, 41, 42, 43, 70, 49, 97, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 66, 67, 69, 71, 74, 78, 79, 80, 86, 88, 89, 90, 91, 94, 95, 96, 100, 101], [1, 4, 78, 2, 6, 69, 10, 3, 47, 51, 5, 66, 7, 8, 9, 11, 12, 13, 14, 15, 37, 16, 65, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 48, 49, 38, 39, 41, 42, 43, 44, 45, 94, 50, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 68, 70, 72, 75, 79, 80, 81, 87, 89, 90, 91, 92, 95, 96, 97, 101, 102]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[46, 35, 36, 3, 73, 74, 75, 49, 98, 99, 100, 101, 102, 103, 50, 15, 76, 77, 53, 54, 55, 56, 57, 58, 59, 60, 1, 4, 86, 87, 88, 89, 90, 91, 92, 93, 81, 61, 62, 63, 64, 16, 82, 5, 83, 84, 68, 40, 41, 42, 43, 44, 2, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 8, 30, 31, 32, 69, 85, 71, 72, 10, 33], [35, 36, 3, 73, 74, 75, 49, 98, 99, 100, 101, 102, 103, 50, 15, 76, 77, 53, 54, 55, 56, 57, 58, 59, 60, 1, 4, 86, 87, 88, 89, 90, 91, 92, 93, 81, 61, 62, 63, 64, 16, 82, 5, 83, 84, 68, 40, 41, 42, 43, 44, 2, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 8, 30, 31, 32, 69, 85, 71, 72, 10, 33, 12]]"
        }
    },
    {
        "code": "find Path \\( -name Regex -or -name Regex \\) -exec rm {} \\;",
        "text": "r emo v all file name regex and regex ..",
        "id": 984,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 0, 0, 11, 11, 12, 29, 30]]",
            "sibling_edges": "[[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 14, 16, 19, 21, 24, 26, 29, 31], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 11, 15, 17, 20, 22, 25, 27, 30, 32]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[33, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 31], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 31, 32]]"
        }
    },
    {
        "code": "ln -s File Regex",
        "text": "c re at a symbol link in directory to file ..",
        "id": 985,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 's', 'file', 'regex', 'ln']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "hostname | tr Regex Regex | tr -d Regex | awk Program",
        "text": "save number of record in system ho tn be that contain number in v aria bl regex ..",
        "id": 986,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'regex', 'word', '-', 'd', 'regex', 'word', 'program', 'host', 'name', 'tr', 'tr', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 0, 6, 6, 7, 0, 8, 9, 9, 10, 13, 17, 17]]",
            "sibling_edges": "[[9, 1, 5, 2, 7, 3, 10, 4, 13, 6, 17, 14, 19, 23], [1, 10, 2, 13, 3, 17, 4, 5, 6, 7, 8, 15, 20, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 20, 1, 21, 11, 12, 2, 22, 14, 15, 16, 3, 23, 24], [20, 1, 21, 11, 12, 2, 22, 14, 15, 16, 3, 23, 24, 18]]"
        }
    },
    {
        "code": "find Path -path Regex -prune -or -type f -name Regex",
        "text": "display all file file in current folder excl ud search in path file ..",
        "id": 987,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'path', 'regex', '-', 'prune', '-', 'or', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 12, 15, 17, 19, 22], [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 16, 18, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan -exec rm {} \\;",
        "text": "de let all file under file director i tree that be mod if i more than time span ago ..",
        "id": 988,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', '-', 'exec', 'rm', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 0, 0, 6, 6, 7, 17, 18]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 18, 9, 10, 12, 14, 17, 19], [1, 2, 3, 4, 5, 17, 6, 10, 11, 13, 15, 18, 20]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 8, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19], [8, 9, 10, 11, 12, 13, 14, 15, 16, 22, 23, 19, 20]]"
        }
    },
    {
        "code": "find /some/dir/ -type f > somefile",
        "text": "find all regular file in folder file and save output to file regex ..",
        "id": 989,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', '>', 'word', 'word', '/', 'some', '/', 'dir', '/', '-', 'type', 'f', 'somefile', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 3, 5, 6]]",
            "sibling_edges": "[[3, 6, 1, 2, 4, 7, 8, 9, 10, 12], [4, 1, 2, 3, 5, 8, 9, 10, 11, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14, 4], [7, 8, 9, 10, 11, 12, 13, 14, 4, 15]]"
        }
    },
    {
        "code": "echo $( pwd )",
        "text": "print current work director i and base name of regex ..",
        "id": 990,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'echo', 'word', 'pwd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 0, 5]]",
            "sibling_edges": "[[1, 2, 5], [2, 5, 3]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 6], [2, 6, 3]]"
        }
    },
    {
        "code": "find Path -type f | xargs -I {} grep Regex {}",
        "text": "find text in whole director i tree ..",
        "id": 991,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', 'word', '-', 'i', 'word', 'word', 'grep', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 0, 0, 8, 13, 13, 16, 17, 20, 21]]",
            "sibling_edges": "[[4, 1, 8, 2, 3, 13, 5, 17, 6, 7, 10, 14, 16, 20, 23], [1, 13, 2, 3, 4, 5, 16, 6, 7, 20, 11, 15, 17, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 19, 27], [9, 10, 11, 12, 1, 23, 24, 14, 15, 25, 26, 18, 19, 27, 28]]"
        }
    },
    {
        "code": "dig -x Regex | awk Program",
        "text": "get domain name with regex from dig revers lookup ..",
        "id": 992,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', '-', 'x', 'regex', 'word', 'program', 'dig', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 2, 2, 3, 0, 4, 5, 9, 9]]",
            "sibling_edges": "[[3, 1, 5, 2, 9, 6, 12], [1, 9, 2, 3, 4, 7, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 1, 12, 13], [6, 7, 8, 1, 12, 13, 10]]"
        }
    },
    {
        "code": "find -x data -name filepattern-*2009* -print0 > filesOfInterest.txt",
        "text": "print a list of all regex file and director i under data director i to file file ..",
        "id": 993,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', 'word', 'word', 'word', '>', 'word', 'word', '-', 'x', 'data', '-', 'name', 'file', 'pattern', '-', '*', '<number>', '*', '-', 'print', '<number>', 'file', 'of', 'interest', '.', 'txt', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 7, 7, 7, 7, 7, 8]]",
            "sibling_edges": "[[5, 8, 1, 2, 3, 4, 6, 9, 12, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26], [6, 1, 2, 3, 4, 5, 7, 10, 13, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[28, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 6, 23, 24, 25, 26], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 6, 23, 24, 25, 26, 27]]"
        }
    },
    {
        "code": "find Path -mtime Timespan",
        "text": "find all file under file director i tree which be mod if i exact time span ago ..",
        "id": 994,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7], [1, 2, 3, 7, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "echo $[4/0] || exit $?",
        "text": "if first command fail exit from script with exit code of fail command ..",
        "id": 995,
        "graph": {
            "nodes": "['list', '||', 'word', '$[', ']', 'word', '$', 'special_variable_name', 'echo', 'number', '/', 'number', 'exit', '?', '<number>', '<number>']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 7, 9, 11]]",
            "sibling_edges": "[[4, 1, 2, 5, 3, 11, 6, 9, 10], [1, 5, 3, 6, 9, 4, 7, 10, 11]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[8, 3, 14, 10, 15, 4, 1, 12, 6], [3, 14, 10, 15, 4, 1, 12, 6, 13]]"
        }
    },
    {
        "code": "find Path -type f -name Regex",
        "text": "find all file file in current director i tree ..",
        "id": 996,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "ls -1 -b | tr Regex Regex",
        "text": "list all file in a current folder se par name with semicolon ..",
        "id": 997,
        "graph": {
            "nodes": "['pipeline', '|', 'number', 'word', 'word', 'word', 'word', '-', '<number>', '-', 'b', 'word', 'regex', 'regex', 'ls', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 4, 5, 6, 11]]",
            "sibling_edges": "[[3, 1, 6, 2, 11, 4, 7, 9], [1, 11, 2, 3, 4, 5, 8, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 1, 15, 12], [7, 8, 9, 10, 1, 15, 12, 13]]"
        }
    },
    {
        "code": "column -x <<< $(printf '%s\\n' $module)",
        "text": "print v aria bl regex in format row ..",
        "id": 998,
        "graph": {
            "nodes": "['command', 'word', 'word', '-', 'x', '<<<', 'column', '$(', ')', 'raw_string', 'word', \"'\", '%', 's', \"'\", '$', 'variable_name', 'print', 'f', 'module']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 9, 9, 9, 9, 0, 0, 10, 10, 16]]",
            "sibling_edges": "[[2, 1, 3, 5, 7, 16, 10, 9, 11, 12, 13, 15, 17], [1, 5, 4, 7, 10, 8, 9, 15, 12, 13, 14, 16, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 3, 4, 5, 7, 17, 18, 11, 12, 13, 14, 15, 19], [3, 4, 5, 7, 17, 18, 11, 12, 13, 14, 15, 19, 8]]"
        }
    },
    {
        "code": "find ./ -name *~ | xargs> rm",
        "text": "find all regex file under current director i and de let them ..",
        "id": 999,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'word', 'word', 'word', 'rm', 'word', '.', '/', '-', 'name', '*', '~', 'word', 'find', 'x', 'arg']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 5, 5, 6, 6, 0, 8, 15, 15]]",
            "sibling_edges": "[[15, 6, 1, 2, 8, 4, 5, 9, 11, 13, 17], [2, 1, 15, 3, 4, 5, 6, 10, 12, 14, 18]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 9, 10, 11, 12, 13, 14, 1, 17, 18, 2], [9, 10, 11, 12, 13, 14, 1, 17, 18, 2, 7]]"
        }
    },
    {
        "code": "yum search mysql | grep client",
        "text": "search avail pack ag with regex and regex in name ..",
        "id": 1000,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'search', 'my', 'sql', 'word', 'client', 'yum', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [0, 0, 0, 0, 0, 2, 3, 3, 0, 4, 5, 9]]",
            "sibling_edges": "[[3, 1, 5, 2, 9, 7], [1, 9, 2, 3, 4, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 6, 7, 8, 1, 12], [6, 7, 8, 1, 12, 10]]"
        }
    },
    {
        "code": "ping Regex -I Regex -c Quantity",
        "text": "send one ping request to host who be e name or ip address be specif i by v aria bl regex use network inter fa c regex ..",
        "id": 1001,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', '-', 'i', 'regex', '-', 'c', 'quantity', 'ping']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "mv File File",
        "text": "r en be regex to regex ..",
        "id": 1002,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'file', 'file', 'mv']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "diff --suppress-common-lines --speed-large-files -y File1 File2 | wc -l",
        "text": "find number of differ row between regex and regex ..",
        "id": 1003,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '--', 'suppress', '-', 'common', '-', 'line', '--', 'speed', '-', 'large', '-', 'file', '-', 'y', 'file', '<number>', 'file', '<number>', 'word', '-', 'l', 'diff', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 0, 7, 7, 8, 27]]",
            "sibling_edges": "[[6, 1, 8, 2, 3, 4, 5, 27, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 23, 25, 28], [1, 27, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 24, 26, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[30, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 31, 28], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 31, 28, 29]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search for all non hide file ..",
        "id": 1004,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "diff -u Quantity File | grep -E Regex",
        "text": "com par file regex and regex with number line of un if i context and print line begin with regex ..",
        "id": 1005,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'u', 'quantity', 'file', 'word', '-', 'e', 'regex', 'diff', 'grep']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 0, 5, 5, 6, 7, 12]]",
            "sibling_edges": "[[4, 1, 7, 2, 3, 12, 5, 8, 13], [1, 12, 2, 3, 4, 5, 6, 9, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 8, 9, 10, 11, 1, 17, 13, 14], [8, 9, 10, 11, 1, 17, 13, 14, 15]]"
        }
    },
    {
        "code": "find Path -type f -iname Regex -exec ls -l -r -t {} \\; | awk -F Regex Program",
        "text": "find on li per miss field regex file name from long list with find command ..",
        "id": 1006,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'i', 'name', 'regex', '-', 'exec', 'ls', '-', 'l', '-', 'r', '-', 't', 'word', 'word', '\\\\', ';', 'word', '-', 'f', 'regex', 'program', 'find', '{', '}', 'a', 'wk']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 0, 0, 12, 12, 0, 13, 13, 14, 15, 16, 34, 35, 38, 38]]",
            "sibling_edges": "[[12, 1, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 38, 13, 14, 18, 21, 22, 25, 28, 30, 32, 34, 36, 39, 46], [1, 38, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 34, 12, 13, 14, 15, 19, 22, 23, 26, 29, 31, 33, 35, 37, 40, 47]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 45, 36, 37, 1, 46, 47, 39, 40, 41], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 45, 36, 37, 1, 46, 47, 39, 40, 41, 42]]"
        }
    },
    {
        "code": "find Path -name Regex -prune -or -print",
        "text": "display all file in current director i excl ud those that be in regex director i ..",
        "id": 1007,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'prune', '-', 'or', '-', 'print', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 14, 16], [1, 2, 3, 4, 5, 6, 10, 13, 15, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]"
        }
    },
    {
        "code": "su - username",
        "text": "login as user user n be ..",
        "id": 1008,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'username', 'su']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 1, 2, 3]]",
            "sibling_edges": "[[3, 1], [1, 2]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[6, 4], [4, 5]]"
        }
    },
    {
        "code": "cat File | od -c",
        "text": "display regex as print a bl char act or backslash es cap ..",
        "id": 1009,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'file', 'word', '-', 'c', 'cat', 'od']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 2, 0, 3, 3, 4, 6]]",
            "sibling_edges": "[[2, 1, 4, 6, 7], [1, 6, 2, 3, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 1, 10, 7], [5, 1, 10, 7, 8]]"
        }
    },
    {
        "code": "tr -d \\n\\r < yourfile.txt",
        "text": "de let regex from file ..",
        "id": 1010,
        "graph": {
            "nodes": "['redirected_statement', 'word', 'word', '<', 'word', 'word', '-', 'd', '\\\\', 'r', 'yourfile', '.', 'txt', 'tr']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 4, 4, 4, 5]]",
            "sibling_edges": "[[2, 5, 1, 3, 6, 8, 10, 11], [3, 1, 2, 4, 7, 9, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[13, 6, 7, 8, 9, 3, 10, 11], [6, 7, 8, 9, 3, 10, 11, 12]]"
        }
    },
    {
        "code": "find Path -perm Permission",
        "text": "find all file and director i in en ti r file system for which owner file per miss or group at least exe cut per miss or other at least exe cut per miss ..",
        "id": 1011,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'perm', 'permission', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "mkdir Directory",
        "text": "make director i name in v aria bl regex with file strip from end ..",
        "id": 1012,
        "graph": {
            "nodes": "['command', 'word', 'word', 'directory', 'mk', 'dir']",
            "base_edges": "[[1, 2, 3, 4, 5], [0, 0, 1, 2, 2]]",
            "sibling_edges": "[[2, 4], [1, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5], [5, 3]]"
        }
    },
    {
        "code": "echo Regex | rev | cut -d Regex -f Number | rev",
        "text": "output on li filetyp suffix of file in case file ..",
        "id": 1013,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'regex', 'word', 'word', '-', 'd', 'regex', '-', 'f', 'number', 'word', 'echo', 'rev', 'cut', 'rev']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 5, 6, 7, 7, 8, 0, 9, 11, 12, 19]]",
            "sibling_edges": "[[4, 1, 11, 2, 8, 3, 9, 12, 5, 6, 7, 13, 16], [1, 11, 2, 12, 3, 19, 4, 5, 6, 7, 8, 14, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[20, 10, 1, 21, 2, 22, 13, 14, 15, 16, 17, 18, 3], [10, 1, 21, 2, 22, 13, 14, 15, 16, 17, 18, 3, 23]]"
        }
    },
    {
        "code": "find Path -type d -exec ls -a -l -g -d {} \\;",
        "text": "display a long list of all director i in current folder ..",
        "id": 1014,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'exec', 'ls', '-', 'a', '-', 'l', '-', 'g', '-', 'd', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 0, 0, 10, 10, 11, 27, 28]]",
            "sibling_edges": "[[11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 13, 16, 19, 21, 23, 25, 27, 29], [1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 10, 14, 17, 20, 22, 24, 26, 28, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 29], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 29, 30]]"
        }
    },
    {
        "code": "find Path -ok tar -r -v -f File {} \\;",
        "text": "tar all file in current folder and ask for user confirm be for c re at tar ball ..",
        "id": 1015,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'ok', 'tar', '-', 'r', '-', 'v', '-', 'f', 'file', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 0, 0, 8, 8, 9, 21, 22]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 22, 11, 14, 16, 18, 21, 23], [1, 2, 3, 4, 5, 6, 7, 21, 8, 12, 15, 17, 19, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 23, 24]]"
        }
    },
    {
        "code": "find Path -type f -daystart -mtime Timespan",
        "text": "find all file that be mod if i date time ..",
        "id": 1016,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'day', 'start', '-', 'm', 'time', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6, 7]]",
            "sibling_edges": "[[7, 1, 2, 3, 4, 5, 9, 12, 13, 15, 16], [1, 2, 3, 4, 5, 6, 10, 13, 14, 16, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[19, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
        }
    },
    {
        "code": "chmod -R -f Permission File",
        "text": "recur add user write per miss to all file under file ..",
        "id": 1017,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', '-', 'r', '-', 'f', 'permission', 'file', 'ch', 'mod']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5, 5]]",
            "sibling_edges": "[[5, 1, 2, 3, 6, 8, 12], [1, 2, 3, 4, 7, 9, 13]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[12, 13, 6, 7, 8, 9, 10], [13, 6, 7, 8, 9, 10, 11]]"
        }
    },
    {
        "code": "grep -q tar archive <<<$filetype",
        "text": "quiet search pattern in a give string exit with number status if an i match be find otherwis exit with non zero ..",
        "id": 1018,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'q', 'tar', 'archive', '<<<', 'grep', '$', 'variable_name', 'filetype']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 1, 1, 2, 3, 0, 4, 0, 0, 12]]",
            "sibling_edges": "[[4, 1, 2, 3, 5, 9, 11], [1, 2, 3, 9, 6, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8, 9, 11], [5, 6, 7, 8, 9, 11, 13]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search system for file who be e name begin with letter regex regex or file ..",
        "id": 1019,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -mtime +Timespan -type d -exec rmdir {} \\;",
        "text": "de let folder like file or deep old than time span if regex contain file or other folder ..",
        "id": 1020,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'm', 'time', '+', 'timespan', '-', 'type', 'd', '-', 'exec', 'rm', 'dir', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 0, 0, 8, 8, 9, 23, 24]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 7, 24, 11, 12, 14, 16, 19, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 23, 8, 12, 13, 15, 17, 20, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -type f -perm Permission -exec ls -l {} \\;",
        "text": "list regular file in current director i with read write and exe cut per miss for all user and also show per miss ..",
        "id": 1021,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'perm', 'permission', '-', 'exec', 'ls', '-', 'l', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 0, 0, 9, 9, 10, 23, 24]]",
            "sibling_edges": "[[10, 1, 2, 3, 4, 5, 6, 7, 8, 24, 12, 15, 18, 21, 23, 25], [1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 13, 16, 19, 22, 24, 26]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[27, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 25, 26]]"
        }
    },
    {
        "code": "find Path -group Regex",
        "text": "find all file that belong to group develop ..",
        "id": 1022,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'group', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "tail -n +Quantity File | split -l Quantity File Regex",
        "text": "split file excl ud first line into file of at most number line each and with a prefix regex ..",
        "id": 1023,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', '+', 'quantity', 'file', 'word', '-', 'l', 'quantity', 'file', 'regex', 'tail', 'split']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 0, 5, 5, 6, 7, 8, 9, 15]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 15, 5, 6, 7, 10, 12, 16], [1, 15, 2, 3, 4, 5, 6, 7, 8, 11, 13, 17]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 10, 11, 12, 13, 14, 1, 22, 16, 17, 18, 19], [10, 11, 12, 13, 14, 1, 22, 16, 17, 18, 19, 20]]"
        }
    },
    {
        "code": "find Path -name Regex | xargs -I {} grep -E Regex {}",
        "text": "search for regex in all file file under current director i ..",
        "id": 1024,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'i', 'word', 'word', 'grep', '-', 'e', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 0, 5, 5, 0, 0, 6, 7, 7, 8, 0, 0, 9, 14, 14, 17, 18, 23, 24]]",
            "sibling_edges": "[[4, 1, 9, 2, 3, 14, 5, 18, 6, 7, 8, 11, 15, 17, 20, 23, 26], [1, 14, 2, 3, 4, 5, 17, 6, 7, 8, 23, 12, 16, 18, 21, 24, 27]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30], [10, 11, 12, 13, 1, 26, 27, 15, 16, 28, 29, 19, 20, 21, 22, 30, 31]]"
        }
    },
    {
        "code": "watch -d ls -l",
        "text": "exe cut regex ever i time span and highlight differ in run ..",
        "id": 1025,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'd', 'ls', '-', 'l', 'watch']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 1, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5, 8], [1, 2, 3, 6, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "tar tzvf archive.tar.gz | sed s/ \\+/ /g | cut -f3 -d  | sed 2,$s/^/+ / | paste -sd  | bc",
        "text": "sum total content size of extract file in file ..",
        "id": 1026,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'tzvf', 'archive', '.', 'tar', '.', 'gz', 'word', 's', '/', '\\\\', '+', '/', '/', 'g', 'word', '-', 'f3', '-', 'd', 'word', 'word', 'word', '/', 'word', '-', 'sd', 'word', 'tar', 's', 'ed', 'cut', 's', 'ed', '<number>', ',', '$', 'variable_name', '/', '^', '/', '+', 'paste', 'bc', 's']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7, 7, 0, 8, 8, 9, 9, 9, 10, 10, 0, 11, 11, 12, 12, 0, 0, 0, 13, 0, 14, 14, 0, 15, 22, 22, 30, 35, 35, 36, 36, 0, 0, 37, 37, 37, 37, 39, 42, 52]]",
            "sibling_edges": "[[7, 1, 10, 2, 12, 3, 13, 4, 14, 5, 15, 6, 22, 8, 9, 30, 11, 35, 37, 39, 17, 18, 19, 20, 23, 25, 26, 28, 31, 33, 36, 52, 40, 44, 47, 49, 51, 53, 54, 55], [1, 22, 2, 30, 3, 35, 4, 39, 5, 42, 6, 7, 8, 9, 10, 11, 12, 36, 13, 14, 18, 19, 20, 21, 24, 26, 27, 29, 32, 34, 51, 37, 41, 45, 48, 50, 52, 54, 55, 56]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[43, 16, 17, 18, 19, 20, 21, 1, 44, 45, 23, 24, 25, 26, 27, 28, 29, 2, 46, 31, 32, 33, 34, 3, 47, 48, 49, 50, 51, 59, 53, 54, 55, 56, 38, 4, 57, 40, 41, 5], [16, 17, 18, 19, 20, 21, 1, 44, 45, 23, 24, 25, 26, 27, 28, 29, 2, 46, 31, 32, 33, 34, 3, 47, 48, 49, 50, 51, 59, 53, 54, 55, 56, 38, 4, 57, 40, 41, 5, 58]]"
        }
    },
    {
        "code": "find Path \\( -type d -name Regex -prune \\) -or \\( -type f -name Regex -print \\)",
        "text": "display all file in current folder excl ud those that be present in sub director i aa and display those file that start with word regex ..",
        "id": 1027,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '\\\\', '(', '-', 'type', 'd', '-', 'name', 'regex', '-', 'prune', '\\\\', ')', '-', 'or', '\\\\', '(', '-', 'type', 'f', '-', 'name', 'regex', '-', 'print', '\\\\', ')', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 15, 15, 16, 16, 17]]",
            "sibling_edges": "[[17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 21, 24, 27, 29, 31, 33, 35, 38, 41, 43], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 22, 25, 28, 30, 32, 34, 36, 39, 42, 44]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[45, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]]"
        }
    },
    {
        "code": "find Path -name Regex -execdir diff -u {} File \\;",
        "text": "com par each file header file in or below current director i with file file ..",
        "id": 1028,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'dir', 'diff', '-', 'u', 'word', 'word', 'file', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 0, 0, 7, 8, 8, 9, 20, 21]]",
            "sibling_edges": "[[9, 1, 2, 3, 4, 5, 6, 21, 7, 11, 14, 15, 18, 20, 23], [1, 2, 3, 4, 5, 6, 20, 7, 8, 12, 15, 16, 19, 21, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 27, 22, 23], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 27, 22, 23, 24]]"
        }
    },
    {
        "code": "find Path -type d -atime +Timespan",
        "text": "display all director i in current folder for file which not be access in time span ..",
        "id": 1029,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'a', 'time', '+', 'timespan', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11, 12, 14], [1, 2, 3, 4, 5, 9, 12, 13, 15]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[16, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15]]"
        }
    },
    {
        "code": "mkdir dir2; find dir1 ( -type l -o -type f ) -not -wholename */exclude/* -exec cp -P --parents {} dir2/ ;",
        "text": "cop i en ti r director i str uctu r from regex as a sub director i of regex omit e mp ti director i special file and an i director i name regex ..",
        "id": 1030,
        "graph": {
            "nodes": "['program', ';', ';', 'word', '-', 'word', '}', 'word', 'word', 'dir', '<number>', 'word', 'word', '(', ')', 'not', '-', 'whole', 'name', '*', '/', 'exclude', '/', '*', '-', 'exec', 'cp', '-', 'p', '--', 'p', 'be', 'not', 's', '{', 'dir', '<number>', '/', 'mk', 'dir', 'find', 'dir', '<number>', 'word', 'word', 'word', 'word', 'word', 'l', '-', 'o', '-', 'type', 'f', '-', 'type']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 8, 8, 11, 12, 12, 0, 0, 0, 0, 0, 43, 44, 44, 45, 45, 46, 47, 47]]",
            "sibling_edges": "[[3, 1, 14, 7, 8, 11, 12, 4, 5, 6, 9, 13, 46, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 41, 47, 43, 44, 45, 49, 51, 54], [1, 11, 4, 2, 3, 12, 13, 5, 6, 7, 10, 47, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 42, 43, 44, 45, 46, 50, 52, 55]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[38, 39, 9, 10, 1, 40, 41, 42, 13, 54, 55, 48, 49, 50, 51, 52, 53, 14, 4, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 6, 35, 36, 37], [39, 9, 10, 1, 40, 41, 42, 13, 54, 55, 48, 49, 50, 51, 52, 53, 14, 4, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 6, 35, 36, 37, 2]]"
        }
    },
    {
        "code": "cd -L Directory",
        "text": "c hang director i to p be not director i and not resolv an i s ym link in result path ..",
        "id": 1031,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'l', 'directory', 'cd']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7], [0, 0, 0, 1, 1, 2, 3]]",
            "sibling_edges": "[[3, 1, 4], [1, 2, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 4, 5], [4, 5, 6]]"
        }
    },
    {
        "code": "find /path/to/dir -name *.pdf -exec convert -thumbnail x80 {}[0] {}-thumb.png ;",
        "text": "c re at thumbnail from first page of each file file under file ..",
        "id": 1032,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '/', 'path', '/', 'to', '/', 'dir', '-', 'name', '*', '.', 'pdf', '-', 'exec', 'convert', '-', 'thumbnail', 'x80', 'word', 'word', 'word', 'number', 'word', 'word', 'word', 'word', 'find', '{', '}', '[', '<number>', ']', '{', '}', '-', 'thumb', '.', 'png']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 9, 27, 28, 29, 30, 31, 32, 33, 34, 34, 34, 34]]",
            "sibling_edges": "[[34, 9, 2, 3, 4, 5, 6, 7, 8, 31, 10, 11, 12, 13, 14, 16, 18, 19, 21, 24, 27, 28, 29, 30, 32, 33, 43, 44, 45], [1, 2, 3, 4, 5, 6, 7, 8, 27, 32, 11, 12, 13, 14, 15, 17, 19, 20, 22, 25, 28, 29, 30, 31, 33, 34, 44, 45, 46]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[35, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 1]]"
        }
    },
    {
        "code": "(find $DIR/tmp/daily/ -name *.tar.gz | sort -n | head -2",
        "text": "find all file file in a folder and sort them accord to name and display first number file ..",
        "id": 1033,
        "graph": {
            "nodes": "['ERROR', '(', '|', 'word', 'word', '|', 'word', 'word', '-', 'name', '*', '.', 'tar', '.', 'gz', 'word', 'number', 'find', '$', 'variable_name', '/', 'tmp', '/', 'daily', '/', 'word', '-', 'n', 'word', '-', '<number>', 'dir', 'sort', 'head']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 4, 4, 4, 0, 0, 6, 0, 0, 7, 7, 7, 7, 7, 0, 15, 15, 0, 16, 16, 19, 25, 28]]",
            "sibling_edges": "[[1, 4, 2, 6, 7, 3, 15, 5, 19, 8, 10, 11, 12, 13, 25, 28, 18, 20, 21, 22, 23, 26, 29], [6, 2, 25, 18, 3, 4, 5, 28, 7, 9, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 27, 30]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[1, 17, 18, 31, 20, 21, 22, 23, 24, 8, 9, 10, 11, 12, 13, 14, 2, 32, 26, 27, 5, 33, 29], [17, 18, 31, 20, 21, 22, 23, 24, 8, 9, 10, 11, 12, 13, 14, 2, 32, 26, 27, 5, 33, 29, 30]]"
        }
    },
    {
        "code": "find Path -size +Size",
        "text": "find file and director i that be big than size in size user file director i tree ..",
        "id": 1034,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'size', '+', 'size', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 0, 0, 0, 1, 2, 2, 3, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 8], [1, 2, 3, 7, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[10, 5, 6, 7, 8], [5, 6, 7, 8, 9]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "search file director i tree for director i and file call file ..",
        "id": 1035,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -name Regex | sed Program | sed Program | sh",
        "text": "move all regex file under file to regex file under same director i ..",
        "id": 1036,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', 'word', 'program', 'word', 'program', 'word', 'find', 's', 'ed', 's', 'ed', 'sh']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 6, 7, 7, 8, 0, 9, 0, 10, 0, 11, 19, 19, 21, 21, 23]]",
            "sibling_edges": "[[8, 1, 9, 2, 10, 3, 11, 4, 5, 6, 7, 19, 21, 13, 16, 25, 27], [1, 19, 2, 21, 3, 23, 4, 5, 6, 7, 8, 9, 10, 14, 17, 26, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[24, 12, 13, 14, 15, 16, 17, 18, 1, 25, 26, 20, 2, 27, 28, 22, 3], [12, 13, 14, 15, 16, 17, 18, 1, 25, 26, 20, 2, 27, 28, 22, 3, 29]]"
        }
    },
    {
        "code": "nl -n rz -w Quantity -s Regex File | sed -r Program",
        "text": "r emo v number add a regex line number and rearrang date for each line in regex ..",
        "id": 1037,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', 'rz', '-', 'w', 'quantity', '-', 's', 'regex', 'file', 'word', '-', 'r', 'program', 'nl', 's', 'ed']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 0, 9, 9, 10, 11, 22, 22]]",
            "sibling_edges": "[[8, 1, 11, 2, 3, 4, 5, 6, 7, 22, 9, 12, 15, 18, 23, 27], [1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 16, 19, 24, 28]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 27, 28, 23, 24], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 27, 28, 23, 24, 25]]"
        }
    },
    {
        "code": "find Path -type f -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex -or -name Regex",
        "text": "search home director i tree for video file ..",
        "id": 1038,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 18, 18, 19, 19, 20, 21]]",
            "sibling_edges": "[[21, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 26, 29, 31, 34, 36, 39, 41, 44, 46, 49, 51], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 27, 30, 32, 35, 37, 40, 42, 45, 47, 50, 52]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[54, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]]"
        }
    },
    {
        "code": "less -p Regex File",
        "text": "page through content of file regex posit view at first occur r of regular express regex ..",
        "id": 1039,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', '-', 'p', 'regex', 'file', 'le']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 1, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 5], [1, 2, 3, 6]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type f -regex Regex",
        "text": "search home director i tree for video file ..",
        "id": 1040,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '-', 'regex', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6]]",
            "sibling_edges": "[[6, 1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 5, 9, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[14, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13]]"
        }
    },
    {
        "code": "info Regex --index-search Regex",
        "text": "open g cc info manual and goe to a node point by index en tr i regex ..",
        "id": 1041,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'regex', '--', 'index', '-', 'search', 'regex', 'info']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6, 7, 8], [1, 2, 3, 7, 8, 9]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 10]]"
        }
    },
    {
        "code": "find Path -print | xargs -I {} chown Regex {}",
        "text": "c hang owner of all file in folder file to nextint ..",
        "id": 1042,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'print', 'word', '-', 'i', 'word', 'word', 'chow', 'n', 'regex', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 0, 4, 4, 0, 0, 5, 5, 6, 0, 0, 7, 11, 11, 14, 15, 19, 20]]",
            "sibling_edges": "[[3, 1, 7, 2, 11, 4, 15, 5, 6, 9, 12, 14, 16, 19, 22], [1, 11, 2, 3, 4, 14, 5, 6, 19, 10, 13, 15, 17, 20, 23]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[21, 8, 9, 10, 1, 22, 23, 12, 13, 24, 25, 16, 17, 18, 26], [8, 9, 10, 1, 22, 23, 12, 13, 24, 25, 16, 17, 18, 26, 27]]"
        }
    },
    {
        "code": "find Path -type f \\( -name Regex -or -name Regex \\) -exec wc -l {} +",
        "text": "show number of line for each file and file file in current director i tree ..",
        "id": 1043,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'f', '\\\\', '(', '-', 'name', 'regex', '-', 'or', '-', 'name', 'regex', '\\\\', ')', '-', 'exec', 'wc', '-', 'l', 'word', 'word', '+', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 12, 13, 13, 0, 0, 14, 15, 37, 38]]",
            "sibling_edges": "[[15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 17, 20, 22, 25, 27, 30, 32, 35, 37], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 37, 14, 18, 21, 23, 26, 28, 31, 33, 36, 38]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[40, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 39]]"
        }
    },
    {
        "code": "kill $( jobs -p )",
        "text": "kill all job ..",
        "id": 1044,
        "graph": {
            "nodes": "['command', 'word', '$(', ')', 'kill', 'word', 'word', '-', 'p', 'job']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 1, 0, 0, 5, 5, 6]]",
            "sibling_edges": "[[1, 2, 5, 6, 7], [2, 6, 3, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 2, 9, 7, 8], [2, 9, 7, 8, 3]]"
        }
    },
    {
        "code": "find . -maxdepth 1 | sort > a",
        "text": "find all file and director i number level down current director i and redirect sort output to file a ..",
        "id": 1045,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'word', 'word', 'number', 'a', 'word', '.', '-', 'max', 'depth', '<number>', 'word', 'find', 'sort']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 0, 0, 0, 0, 0, 3, 0, 4, 5, 5, 5, 6, 0, 8, 14]]",
            "sibling_edges": "[[14, 6, 1, 2, 8, 4, 5, 10, 11], [2, 1, 14, 3, 4, 5, 6, 11, 12]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[15, 9, 10, 11, 12, 13, 1, 16, 2], [9, 10, 11, 12, 13, 1, 16, 2, 7]]"
        }
    },
    {
        "code": "yum install -y nodejs",
        "text": "inst al pack ag regex answer regex on all question ..",
        "id": 1046,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'install', '-', 'y', 'nodejs', 'yum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "find Path -type d -printf \"newdir/%P\\0\" | xargs -0 -I {} mkdir -p {}",
        "text": "cop i director i str uctu r from director i regex to regex ..",
        "id": 1047,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'raw_string', 'number', 'word', 'word', 'word', 'word', 'path', '-', 'type', 'd', '-', 'print', 'f', \"'\", 'newdir', '/', '%', 'p', '\\\\', '<number>', \"'\", 'word', '-', '<number>', '-', 'i', 'word', 'word', 'mk', 'dir', '-', 'p', 'word', 'word', 'find', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 0, 7, 7, 8, 8, 0, 0, 9, 9, 10, 10, 0, 0, 11, 27, 27, 32, 33, 38, 39]]",
            "sibling_edges": "[[6, 1, 11, 2, 3, 4, 5, 27, 7, 8, 33, 9, 10, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 34, 36, 38, 41], [1, 27, 2, 3, 4, 5, 6, 7, 8, 32, 9, 10, 38, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 31, 33, 35, 37, 39, 42]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[40, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 41, 42, 28, 29, 30, 31, 43, 44, 34, 35, 36, 37, 45], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 41, 42, 28, 29, 30, 31, 43, 44, 34, 35, 36, 37, 45, 46]]"
        }
    },
    {
        "code": "scp -r File",
        "text": "recur cop i director i or file file on host regex to current director i on local host connect as ssh user match user n be on local host ..",
        "id": 1048,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', '-', 'r', 'file', 's', 'cp']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 1, 1, 2, 3, 3]]",
            "sibling_edges": "[[3, 1, 4, 7], [1, 2, 5, 8]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[7, 8, 4, 5], [8, 4, 5, 6]]"
        }
    },
    {
        "code": "zcat biglogfile.gz | split -l500000 --filter=gzip > $FILE.gz",
        "text": "split file into chunk of number line g zip compress file ..",
        "id": 1049,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'word', 'word', 'word', 'word', 'biglogfile', '.', 'gz', 'word', '-', 'l500000', '--', 'filter', '=', 'g', 'zip', '$', 'variable_name', '.', 'gz', 'z', 'cat', 'split', 'file']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 4, 4, 5, 5, 5, 5, 5, 0, 0, 6, 6, 7, 7, 11, 20]]",
            "sibling_edges": "[[5, 3, 1, 2, 7, 11, 4, 20, 8, 9, 12, 14, 15, 16, 17, 19, 21, 23], [2, 1, 11, 19, 3, 4, 5, 6, 9, 10, 13, 15, 16, 17, 18, 20, 22, 24]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[23, 24, 8, 9, 10, 1, 25, 12, 13, 14, 15, 16, 17, 18, 2, 19, 26, 21], [24, 8, 9, 10, 1, 25, 12, 13, 14, 15, 16, 17, 18, 2, 19, 26, 21, 22]]"
        }
    },
    {
        "code": "find path/to/folder -type f -print0 | sort -z | xargs -0 cat | sha1sum",
        "text": "cal cu l regex sum for content of regular file in file director i tree ..",
        "id": 1050,
        "graph": {
            "nodes": "['pipeline', '|', '|', '|', 'word', 'word', 'word', 'word', 'word', 'number', 'word', 'word', 'path', '/', 'to', '/', 'folder', '-', 'type', 'f', '-', 'print', '<number>', 'word', '-', 'z', 'word', '-', '<number>', 'cat', 'word', 'find', 'sort', 'x', 'arg', 'sha', '<number>', 'sum']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 5, 5, 6, 7, 7, 7, 0, 8, 8, 0, 9, 9, 10, 0, 11, 23, 26, 26, 30, 30, 30]]",
            "sibling_edges": "[[7, 1, 8, 2, 10, 3, 11, 4, 5, 6, 23, 26, 9, 12, 13, 14, 15, 17, 20, 21, 24, 27, 33, 35, 36], [1, 23, 2, 26, 3, 30, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 18, 21, 22, 25, 28, 34, 36, 37]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 32, 24, 25, 2, 33, 34, 27, 28, 29, 3, 35, 36], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 32, 24, 25, 2, 33, 34, 27, 28, 29, 3, 35, 36, 37]]"
        }
    },
    {
        "code": "find Path -name Regex",
        "text": "find file with a question mark in name ..",
        "id": 1051,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "sudo find . ( -name *.log -o -name *.trc ) -mtime -1 | sudo xargs ls -ltr --color | less -R",
        "text": "recur find all file like file and file in a current folder mod if i in a time span sort list by mod if time and pipe output to pager tool regex ..",
        "id": 1052,
        "graph": {
            "nodes": "['program', ';', 'word', 'word', '-', '|', '|', 'word', 'find', '.', '(', ')', 'number', 'word', 'word', 'word', 'word', 'word', 'su', 'do', 'word', 'word', 'word', 'word', 'word', '-', '<number>', 'word', 'x', 'arg', 'ls', '-', 'ltr', '--', 'color', 'word', '-', 'r', 'word', '*', '.', 'log', '-', 'o', '-', 'name', '*', '.', 'trc', 'm', 'time', 'su', 'do', 'le', '-', 'name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 12, 12, 0, 13, 13, 14, 15, 15, 16, 16, 0, 17, 17, 0, 20, 20, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 27, 27, 35, 38, 38]]",
            "sibling_edges": "[[3, 1, 4, 7, 2, 11, 12, 5, 16, 6, 10, 23, 24, 27, 13, 14, 15, 35, 18, 38, 20, 21, 22, 25, 28, 31, 33, 36, 39, 40, 42, 44, 46, 47, 49, 51, 54], [1, 10, 24, 2, 3, 4, 5, 27, 6, 35, 38, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 29, 32, 34, 37, 40, 41, 43, 45, 47, 48, 50, 52, 55]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[18, 19, 8, 9, 1, 10, 54, 55, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 11, 4, 49, 50, 25, 26, 5, 51, 52, 28, 29, 30, 31, 32, 33, 34, 6, 53, 36], [19, 8, 9, 1, 10, 54, 55, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 11, 4, 49, 50, 25, 26, 5, 51, 52, 28, 29, 30, 31, 32, 33, 34, 6, 53, 36, 37]]"
        }
    },
    {
        "code": "find Path -name Regex -execdir rename Regex {} \\;",
        "text": "search for file file in current folder and r en be it to file ..",
        "id": 1053,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', '-', 'exec', 'dir', 'rename', 'regex', 'word', 'word', '\\\\', ';', 'find', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 6, 0, 0, 7, 7, 8, 18, 19]]",
            "sibling_edges": "[[8, 1, 2, 3, 4, 5, 6, 19, 10, 13, 14, 18, 20], [1, 2, 3, 4, 5, 6, 18, 7, 11, 14, 15, 19, 21]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20], [9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 20, 21]]"
        }
    },
    {
        "code": "find Path -newer File",
        "text": "search for all file in folder file which be mod if i after file ..",
        "id": 1054,
        "graph": {
            "nodes": "['command', 'word', 'word', 'word', 'word', 'path', '-', 'new', 'file', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0, 0, 1, 2, 2, 3, 4]]",
            "sibling_edges": "[[4, 1, 2, 6], [1, 2, 3, 7]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[9, 5, 6, 7], [5, 6, 7, 8]]"
        }
    },
    {
        "code": "grep -n -i Regex File | wc -l",
        "text": "count line with all ca word regex in file file ..",
        "id": 1055,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'word', 'word', 'word', 'word', '-', 'n', '-', 'i', 'regex', 'file', 'word', '-', 'l', 'grep', 'wc']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 5, 0, 6, 6, 7, 14]]",
            "sibling_edges": "[[5, 1, 7, 2, 3, 4, 14, 8, 10, 15], [1, 14, 2, 3, 4, 5, 6, 9, 11, 16]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[17, 8, 9, 10, 11, 12, 13, 1, 18, 15], [8, 9, 10, 11, 12, 13, 1, 18, 15, 16]]"
        }
    },
    {
        "code": "pstree | cat",
        "text": "print process tree adjust output width with a screen size ..",
        "id": 1056,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'word', 'ps', 'tree', 'cat']",
            "base_edges": "[[1, 2, 3, 4, 5, 6], [0, 0, 0, 2, 2, 3]]",
            "sibling_edges": "[[2, 1, 4], [1, 3, 5]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[4, 5, 1], [5, 1, 6]]"
        }
    },
    {
        "code": "find Path -name Regex | tail - Quantity | xargs -I {} rm {}",
        "text": "find file in and below current director i who be e name begin with regex and r emo v one of them ..",
        "id": 1057,
        "graph": {
            "nodes": "['pipeline', '|', '|', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'word', 'path', '-', 'name', 'regex', 'word', '-', 'quantity', 'word', '-', 'i', 'word', 'word', 'rm', 'word', 'word', 'find', 'tail', 'x', 'arg', '{', '}', '{', '}']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 6, 7, 0, 8, 8, 0, 0, 9, 0, 0, 10, 15, 18, 18, 21, 22, 24, 25]]",
            "sibling_edges": "[[5, 1, 7, 2, 10, 3, 4, 15, 6, 18, 8, 22, 9, 12, 19, 21, 24, 28], [1, 15, 2, 18, 3, 4, 5, 6, 7, 8, 21, 9, 24, 13, 20, 22, 25, 29]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[26, 11, 12, 13, 14, 1, 27, 16, 17, 2, 28, 29, 19, 20, 30, 31, 23, 32], [11, 12, 13, 14, 1, 27, 16, 17, 2, 28, 29, 19, 20, 30, 31, 23, 32, 33]]"
        }
    },
    {
        "code": "top -l 1 | grep $app_name",
        "text": "collect process inform and display on li line contain pattern specif i by v aria bl regex ..",
        "id": 1058,
        "graph": {
            "nodes": "['pipeline', '|', 'word', 'number', 'word', '-', 'l', '<number>', 'word', '$', 'variable_name', 'top', 'grep', 'app_name']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 4, 8, 10]]",
            "sibling_edges": "[[3, 1, 4, 2, 8, 5, 9], [1, 8, 2, 3, 9, 6, 10]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[11, 5, 6, 7, 1, 12, 9], [5, 6, 7, 1, 12, 9, 13]]"
        }
    },
    {
        "code": "find . 2>&1 | grep -v Permission denied > some_file",
        "text": "find all file under current director i redirect error me sag to output and filter an i line contain text regex write remain output to regex ..",
        "id": 1059,
        "graph": {
            "nodes": "['redirected_statement', '|', '>', 'word', 'word', 'word', 'word', 'some_file', 'word', 'file_descriptor', '>&', 'number', 'word', '-', 'v', 'permission', 'deny', 'word', '.', '<number>', '<number>', 'grep', 'find']",
            "base_edges": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 4, 5, 6, 0, 8, 9, 11, 12, 17]]",
            "sibling_edges": "[[6, 11, 1, 2, 8, 12, 4, 5, 17, 9, 10, 13], [2, 1, 12, 3, 9, 4, 5, 6, 8, 10, 11, 14]]",
            "dfg_edges": "[[], []]",
            "code_edges": "[[22, 18, 19, 10, 20, 1, 21, 13, 14, 15, 16, 2], [18, 19, 10, 20, 1, 21, 13, 14, 15, 16, 2, 7]]"
        }
    }
]